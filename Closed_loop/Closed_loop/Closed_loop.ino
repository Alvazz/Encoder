/*


First attempt at closing the loop using AS5145 encoder, A4954 driver

Controlled via a serial terminal at 115200 baud.


____
    |
  13|-> LED 
  12|-> pulse         _
  11|-> clock          \
  10|->Chip Select      |---AS5145
   9|->data           _/
   8|->IN4             \
   7|->IN3              \
  ~6|->VREF2             \___A4954
  ~5|->VREF1             /           
   4|->IN2              /
  ~3|->IN1            _/
   2|
   1|
   0|
____|
  

Implemented commands are:

p  -  print [step count] , [assumed angle] , [encoder reading]

c  -  clear step count & assumed angle

s  -  step

d  -  dir toggle

z  -  seek zero position

g  -  Go! steps around 400 times

w  -  Same as go, but stores encoder angles to EEPROM

r  -  returns EEPROM contents

a  -  prompts user to enter angle 



*/


#include <EEPROM.h>
#include <math.h>
#include <avr/pgmspace.h>



float kp = 20.0;
int ep = 0;
float ki = 2.0;
float KF = 1.0;


int dir = 1;
int step_state = 1;



int inputstream = 0; //one bit read from pin
long packeddata = 0; //two bytes concatenated from inputstream
long angle = 0; //holds processed angle value
long angletemp;
float anglefloat = 0; 

int a = 0;  //angle value in zero routine
float offset = 0.000000000000000; //zero-offest of closest full step

//long anglemask = 65472; //0x1111111111000000: mask to obtain first 10 digits with position info
long anglemask = 262080; // 0x111111111111000000: mask to obtain first 12 digits with position info
long statusmask = 63; //0x000000000111111; mask to obtain last 6 digits containing status info
long statusbits; //holds status/error information
int DECn; //bit holding decreasing magnet field error data
int INCn; //bit holding increasing magnet field error data
int OCF; //bit holding startup-valid bit
int COF; //bit holding cordic DSP processing error data
int LIN; //bit holding magnet field displacement error data
int debug = 1; //SET THIS TO 0 TO DISABLE PRINTING OF ERROR CODES
int shortdelay = 5; // this is the microseconds of delay in the data clock
int longdelay = 1; // this is the milliseconds between readings


int i_step = 0; // step index
int i_w = 0;// write index
int i_r = 0; // read index

//___________________________________

const float pi = 3.14159;
const int  half = 134;//128;

float new_angle = 0.0; //input angle
float current_angle = 0.0; //current angle
float diff_angle = 0.0;
int val1 = 0;
int val2 = 0;

//////////////////////////////////////
//////////////////PINS////////////////
//////////////////////////////////////
int IN1 = 8;
int IN2 = 9;
int VREF1 = 5;
int VREF2 = 6;
int IN3 = 10;
int IN4 = 11;
int pulse = 12;


const int ledPin = 13; //LED connected to digital pin 13
const int clockPin = 2; //output to clock
const int CSnPin = 3; //output to chip select
const int inputPin = 7; //read AS5040


//////////////////////////////////////
//////////////////////////////////////
//////////////////////////////////////


float angle_out=0.0;
int zero_state =0;




const PROGMEM float lookup[] = {
  
  0.0,0.0818,0.1636,0.2455,0.3273,0.4091,0.4909,0.5727,0.6545,0.7364,0.8182,0.9668,1.0568,1.1468,1.2368,1.3268,1.4168,1.5068,1.5968,1.6868,1.7768,1.8457,1.9275,2.0093,2.0912,2.173,2.2548,2.3366,2.4184,2.5002,2.5821,2.6639,2.8125,2.9025,2.9925,3.0825,3.1725,3.2625,3.3525,3.4425,3.5325,3.6225,3.6914,3.7814,3.8714,3.9614,4.0514,4.1414,4.2314,4.3214,4.4114,4.5014,4.5703,4.6521,4.7339,4.8158,4.8976,4.9794,5.0612,5.143,5.2249,5.3067,5.3885,5.5371,5.6371,5.7371,5.8371,5.9371,6.0371,6.1371,6.2371,6.3371,6.3281,6.4099,6.4918,6.5736,6.6554,6.7372,6.819,6.9009,6.9827,7.0645,7.1463,7.2949,7.3849,7.4749,7.5649,7.6549,7.7449,7.8349,7.9249,8.0149,8.1049,8.1738,8.2638,8.3538,8.4438,8.5338,8.6238,8.7138,8.8038,8.8938,8.9838,9.0527,9.1427,9.2327,9.3227,9.4127,9.5027,9.5927,9.6827,9.7727,9.8627,9.9316,10.0216,10.1116,10.2016,10.2916,10.3816,10.4716,10.5616,10.6516,10.7416,10.8105,10.8924,10.9742,11.056,11.1378,11.2196,11.3015,11.3833,11.4651,11.5469,11.6287,11.7773,11.8592,11.941,12.0228,12.1046,12.1864,12.2683,12.3501,12.4319,12.5137,12.5955,12.7441,12.8441,12.9441,13.0441,13.1441,13.2441,13.3441,13.4441,13.5441,13.5352,13.6252,13.7152,13.8052,13.8952,13.9852,14.0752,14.1652,14.2552,14.3452,14.4141,14.4891,14.5641,14.6391,14.7141,14.7891,14.8641,14.9391,15.0141,15.0891,15.1641,15.2391,15.4688,15.5587,15.6487,15.7387,15.8287,15.9187,16.0087,16.0987,16.1887,16.2787,16.3477,16.4477,16.5477,16.6477,16.7477,16.8477,16.9477,17.0477,17.1477,17.1387,17.2287,17.3187,17.4087,17.4987,17.5887,17.6787,17.7687,17.8587,17.9487,18.0176,18.0994,18.1812,18.263,18.3449,18.4267,18.5085,18.5903,18.6721,18.7539,18.8358,18.9844,19.0744,19.1644,19.2544,19.3444,19.4344,19.5244,19.6144,19.7044,19.7944,19.8633,19.9533,20.0433,20.1333,20.2233,20.3133,20.4033,20.4933,20.5833,20.6733,20.7422,20.8322,20.9222,21.0122,21.1022,21.1922,21.2822,21.3722,21.4622,21.5522,21.6211,21.7029,21.7847,21.8665,21.9484,22.0302,22.112,22.1938,22.2756,22.3575,22.4393,22.5879,22.6779,22.7679,22.8579,22.9479,23.0379,23.1279,23.2179,23.3079,23.3979,23.4668,23.5486,23.6304,23.7123,23.7941,23.8759,23.9577,24.0395,24.1213,24.2032,24.285,24.4336,24.5336,24.6336,24.7336,24.8336,24.9336,25.0336,25.1336,25.2336,25.2246,25.3064,25.3882,25.4701,25.5519,25.6337,25.7155,25.7973,25.8792,25.961,26.0428,26.1914,26.2814,26.3714,26.4614,26.5514,26.6414,26.7314,26.8214,26.9114,27.0014,27.0703,27.1603,27.2503,27.3403,27.4303,27.5203,27.6103,27.7003,27.7903,27.8803,27.9492,28.0392,28.1292,28.2192,28.3092,28.3992,28.4892,28.5792,28.6692,28.7592,28.8281,28.9099,28.9918,29.0736,29.1554,29.2372,29.319,29.4009,29.4827,29.5645,29.6463,29.7949,29.8849,29.9749,30.0649,30.1549,30.2449,30.3349,30.4249,30.5149,30.6049,30.6738,30.7638,30.8538,30.9438,31.0338,31.1238,31.2138,31.3038,31.3938,31.4838,31.5527,31.6427,31.7327,31.8227,31.9127,32.0027,32.0927,32.1827,32.2727,32.3627,32.4316,32.5135,32.5953,32.6771,32.7589,32.8407,32.9225,33.0044,33.0862,33.168,33.2498,33.3984,33.4884,33.5784,33.6684,33.7584,33.8484,33.9384,34.0284,34.1184,34.2084,34.2773,34.3673,34.4573,34.5473,34.6373,34.7273,34.8173,34.9073,34.9973,35.0873,35.1563,35.2463,35.3362,35.4263,35.5162,35.6063,35.6962,35.7863,35.8762,35.9663,36.0352,36.1252,36.2152,36.3052,36.3952,36.4852,36.5752,36.6652,36.7552,36.8452,36.9141,37.0041,37.0941,37.1841,37.2741,37.3641,37.4541,37.5441,37.6341,37.7241,37.793,37.8748,37.9566,38.0384,38.1202,38.2021,38.2839,38.3657,38.4475,38.5293,38.6112,38.7598,38.8498,38.9398,39.0298,39.1198,39.2098,39.2998,39.3898,39.4798,39.5698,39.6387,39.7287,39.8187,39.9087,39.9987,40.0887,40.1787,40.2687,40.3587,40.4487,40.5176,40.6076,40.6976,40.7876,40.8776,40.9676,41.0576,41.1476,41.2376,41.3276,41.3965,41.4865,41.5765,41.6665,41.7565,41.8465,41.9365,42.0265,42.1165,42.2065,42.2754,42.3572,42.439,42.5208,42.6027,42.6845,42.7663,42.8481,42.9299,43.0118,43.0936,43.2422,43.3422,43.4422,43.5422,43.6422,43.7422,43.8422,43.9422,44.0422,44.0332,44.115,44.1968,44.2787,44.3605,44.4423,44.5241,44.6059,44.6877,44.7696,44.8514,45.0,45.09,45.18,45.27,45.36,45.45,45.54,45.63,45.72,45.81,45.8789,45.9689,46.0589,46.1489,46.2389,46.3289,46.4189,46.5089,46.5989,46.6889,46.7578,46.8478,46.9378,47.0278,47.1178,47.2078,47.2978,47.3878,47.4778,47.5678,47.6367,47.7267,47.8167,47.9067,47.9967,48.0867,48.1767,48.2667,48.3567,48.4467,48.5156,48.5974,48.6793,48.7611,48.8429,48.9247,49.0065,49.0884,49.1702,49.252,49.3338,49.4824,49.5724,49.6624,49.7524,49.8424,49.9324,50.0224,50.1124,50.2024,50.2924,50.3613,50.4513,50.5413,50.6313,50.7213,50.8113,50.9013,50.9913,51.0813,51.1713,51.2402,51.3221,51.4039,51.4857,51.5675,51.6493,51.7311,51.813,51.8948,51.9766,52.0584,52.207,52.307,52.407,52.507,52.607,52.707,52.807,52.907,53.007,52.998,53.088,53.178,53.268,53.358,53.448,53.538,53.628,53.718,53.808,53.877,53.967,54.057,54.147,54.237,54.327,54.417,54.507,54.597,54.687,54.7559,54.8377,54.9195,55.0013,55.0831,55.165,55.2468,55.3286,55.4104,55.4922,55.574,55.7227,55.8127,55.9027,55.9927,56.0827,56.1727,56.2627,56.3527,56.4427,56.5327,56.6016,56.7016,56.8016,56.9016,57.0016,57.1016,57.2016,57.3016,57.4016,57.3926,57.4744,57.5562,57.638,57.7199,57.8017,57.8835,57.9653,58.0471,58.1289,58.2108,58.3594,58.4412,58.523,58.6048,58.6866,58.7685,58.8503,58.9321,59.0139,59.0957,59.1776,59.3262,59.4162,59.5062,59.5962,59.6862,59.7762,59.8662,59.9562,60.0462,60.1362,60.2051,60.3051,60.4051,60.5051,60.6051,60.7051,60.8051,60.9051,61.0051,60.9961,61.0861,61.1761,61.2661,61.3561,61.4461,61.5361,61.6261,61.7161,61.8061,61.875,61.9568,62.0386,62.1205,62.2023,62.2841,62.3659,62.4477,62.5295,62.6114,62.6932,62.8418,62.9318,63.0218,63.1118,63.2018,63.2918,63.3818,63.4718,63.5618,63.6518,63.7207,63.8207,63.9207,64.0207,64.1207,64.2207,64.3207,64.4207,64.5207,64.5117,64.6017,64.6917,64.7817,64.8717,64.9617,65.0517,65.1417,65.2317,65.3217,65.3906,65.4656,65.5406,65.6156,65.6906,65.7656,65.8406,65.9156,65.9906,66.0656,66.1406,66.2156,66.4453,66.5453,66.6453,66.7453,66.8453,66.9453,67.0453,67.1453,67.2453,67.2363,67.3263,67.4163,67.5063,67.5963,67.6863,67.7763,67.8663,67.9563,68.0463,68.1152,68.2052,68.2952,68.3852,68.4752,68.5652,68.6552,68.7452,68.8352,68.9252,68.9941,69.076,69.1578,69.2396,69.3214,69.4032,69.485,69.5669,69.6487,69.7305,69.8123,69.9609,70.0609,70.1609,70.2609,70.3609,70.4609,70.5609,70.6609,70.7609,70.752,70.8338,70.9156,70.9974,71.0792,71.161,71.2429,71.3247,71.4065,71.4883,71.5701,71.7188,71.8088,71.8988,71.9887,72.0787,72.1688,72.2588,72.3487,72.4387,72.5288,72.5977,72.6877,72.7777,72.8677,72.9577,73.0477,73.1377,73.2277,73.3177,73.4077,73.4766,73.5666,73.6566,73.7466,73.8366,73.9266,74.0166,74.1066,74.1966,74.2866,74.3555,74.4455,74.5355,74.6255,74.7155,74.8055,74.8955,74.9855,75.0755,75.1655,75.2344,75.3244,75.4144,75.5044,75.5944,75.6844,75.7744,75.8644,75.9544,76.0444,76.1133,76.2033,76.2933,76.3833,76.4733,76.5633,76.6533,76.7433,76.8333,76.9233,76.9922,77.0822,77.1722,77.2622,77.3522,77.4422,77.5322,77.6222,77.7122,77.8022,77.8711,77.9611,78.0511,78.1411,78.2311,78.3211,78.4111,78.5011,78.5911,78.6811,78.75,78.8318,78.9136,78.9955,79.0773,79.1591,79.2409,79.3227,79.4045,79.4864,79.5682,79.7168,79.8068,79.8968,79.9868,80.0768,80.1668,80.2568,80.3468,80.4368,80.5268,80.5957,80.6957,80.7957,80.8957,80.9957,81.0957,81.1957,81.2957,81.3957,81.3867,81.4685,81.5504,81.6322,81.714,81.7958,81.8776,81.9594,82.0413,82.1231,82.2049,82.3535,82.4435,82.5335,82.6235,82.7135,82.8035,82.8935,82.9835,83.0735,83.1635,83.2324,83.3142,83.3961,83.4779,83.5597,83.6415,83.7233,83.8051,83.887,83.9688,84.0506,84.1992,84.2992,84.3992,84.4992,84.5992,84.6992,84.7992,84.8992,84.9992,84.9902,85.0802,85.1702,85.2602,85.3502,85.4402,85.5302,85.6202,85.7102,85.8002,85.8691,85.951,86.0328,86.1146,86.1964,86.2782,86.36,86.4419,86.5237,86.6055,86.6873,86.8359,86.9259,87.0159,87.1059,87.1959,87.2859,87.3759,87.4659,87.5559,87.6459,87.7148,87.8048,87.8948,87.9848,88.0748,88.1648,88.2548,88.3448,88.4348,88.5248,88.5938,88.6838,88.7738,88.8637,88.9537,89.0438,89.1338,89.2237,89.3137,89.4038,89.4727,89.5545,89.6363,89.7181,89.7999,89.8817,89.9636,90.0454,90.1272,90.209,90.2908,90.4395,90.5295,90.6195,90.7095,90.7995,90.8895,90.9795,91.0695,91.1595,91.2495,91.3184,91.4084,91.4984,91.5884,91.6784,91.7684,91.8584,91.9484,92.0384,92.1284,92.1973,92.2791,92.3609,92.4427,92.5245,92.6064,92.6882,92.77,92.8518,92.9336,93.0154,93.1641,93.2541,93.3441,93.4341,93.5241,93.6141,93.7041,93.7941,93.8841,93.9741,94.043,94.133,94.223,94.313,94.403,94.493,94.583,94.673,94.763,94.853,94.9219,95.0119,95.1019,95.1919,95.2819,95.3719,95.4619,95.5519,95.6419,95.7319,95.8008,95.8908,95.9808,96.0708,96.1608,96.2508,96.3408,96.4308,96.5208,96.6108,96.6797,96.7697,96.8597,96.9497,97.0397,97.1297,97.2197,97.3097,97.3997,97.4897,97.5586,97.6404,97.7222,97.804,97.8859,97.9677,98.0495,98.1313,98.2131,98.295,98.3768,98.5254,98.6154,98.7054,98.7954,98.8854,98.9754,99.0654,99.1554,99.2454,99.3354,99.4043,99.4943,99.5843,99.6743,99.7643,99.8543,99.9443,100.0343,100.1243,100.2143,100.2832,100.3732,100.4632,100.5532,100.6432,100.7332,100.8232,100.9132,101.0032,101.0932,101.1621,101.2439,101.3257,101.4076,101.4894,101.5712,101.653,101.7348,101.8167,101.8985,101.9803,102.1289,102.2107,102.2925,102.3744,102.4562,102.538,102.6198,102.7016,102.7835,102.8653,102.9471,103.0957,103.1957,103.2957,103.3957,103.4957,103.5957,103.6957,103.7957,103.8957,103.8867,103.9767,104.0667,104.1567,104.2467,104.3367,104.4267,104.5167,104.6067,104.6967,104.7656,104.8474,104.9293,105.0111,105.0929,105.1747,105.2565,105.3384,105.4202,105.502,105.5838,105.7324,105.8142,105.8961,105.9779,106.0597,106.1415,106.2233,106.3051,106.387,106.4688,106.5506,106.6992,106.7992,106.8992,106.9992,107.0992,107.1992,107.2992,107.3992,107.4992,107.4902,107.5721,107.6539,107.7357,107.8175,107.8993,107.9811,108.063,108.1448,108.2266,108.3084,108.457,108.547,108.637,108.727,108.817,108.907,108.997,109.087,109.177,109.267,109.3359,109.4178,109.4996,109.5814,109.6632,109.745,109.8268,109.9087,109.9905,110.0723,110.1541,110.3027,110.3927,110.4827,110.5727,110.6627,110.7527,110.8427,110.9327,111.0227,111.1127,111.1816,111.2716,111.3616,111.4516,111.5416,111.6316,111.7216,111.8116,111.9016,111.9916,112.0605,112.1505,112.2405,112.3305,112.4205,112.5105,112.6005,112.6905,112.7805,112.8705,112.9395,113.0213,113.1031,113.1849,113.2667,113.3485,113.4304,113.5122,113.594,113.6758,113.7576,113.9063,113.9963,114.0863,114.1762,114.2662,114.3563,114.4463,114.5362,114.6262,114.7163,114.7852,114.8752,114.9652,115.0552,115.1452,115.2352,115.3252,115.4152,115.5052,115.5952,115.6641,115.7459,115.8277,115.9095,115.9913,116.0732,116.155,116.2368,116.3186,116.4004,116.4822,116.6309,116.7209,116.8109,116.9009,116.9909,117.0809,117.1709,117.2609,117.3509,117.4409,117.5098,117.5998,117.6898,117.7798,117.8698,117.9598,118.0498,118.1398,118.2298,118.3198,118.3887,118.4787,118.5687,118.6587,118.7487,118.8387,118.9287,119.0187,119.1087,119.1987,119.2676,119.3494,119.4312,119.513,119.5949,119.6767,119.7585,119.8403,119.9221,120.0039,120.0858,120.2344,120.3244,120.4144,120.5044,120.5944,120.6844,120.7744,120.8644,120.9544,121.0444,121.1133,121.2033,121.2933,121.3833,121.4733,121.5633,121.6533,121.7433,121.8333,121.9233,121.9922,122.074,122.1558,122.2376,122.3195,122.4013,122.4831,122.5649,122.6467,122.7286,122.8104,122.959,123.049,123.139,123.229,123.319,123.409,123.499,123.589,123.679,123.769,123.8379,123.9197,124.0015,124.0833,124.1652,124.247,124.3288,124.4106,124.4924,124.5743,124.6561,124.8047,124.8947,124.9847,125.0747,125.1647,125.2547,125.3447,125.4347,125.5247,125.6147,125.6836,125.7736,125.8636,125.9536,126.0436,126.1336,126.2236,126.3136,126.4036,126.4936,126.5625,126.6443,126.7261,126.808,126.8898,126.9716,127.0534,127.1352,127.217,127.2989,127.3807,127.5293,127.6193,127.7093,127.7993,127.8893,127.9793,128.0693,128.1593,128.2493,128.3393,128.4082,128.4982,128.5882,128.6782,128.7682,128.8582,128.9482,129.0382,129.1282,129.2182,129.2871,129.3771,129.4671,129.5571,129.6471,129.7371,129.8271,129.9171,130.0071,130.0971,130.166,130.2478,130.3297,130.4115,130.4933,130.5751,130.6569,130.7387,130.8206,130.9024,130.9842,131.1328,131.2228,131.3128,131.4028,131.4928,131.5828,131.6728,131.7628,131.8528,131.9428,132.0117,132.1017,132.1917,132.2817,132.3717,132.4617,132.5517,132.6417,132.7317,132.8217,132.8906,132.9724,133.0543,133.1361,133.2179,133.2997,133.3815,133.4634,133.5452,133.627,133.7088,133.8574,133.9392,134.0211,134.1029,134.1847,134.2665,134.3483,134.4301,134.512,134.5938,134.6756,134.8242,134.9142,135.0042,135.0942,135.1842,135.2742,135.3642,135.4542,135.5442,135.6342,135.7031,135.7931,135.8831,135.9731,136.0631,136.1531,136.2431,136.3331,136.4231,136.5131,136.582,136.672,136.762,136.852,136.942,137.032,137.122,137.212,137.302,137.392,137.4609,137.5428,137.6246,137.7064,137.7882,137.87,137.9518,138.0337,138.1155,138.1973,138.2791,138.4277,138.5177,138.6077,138.6977,138.7877,138.8777,138.9677,139.0577,139.1477,139.2377,139.3066,139.3966,139.4866,139.5766,139.6666,139.7566,139.8466,139.9366,140.0266,140.1166,140.1855,140.2755,140.3655,140.4555,140.5455,140.6355,140.7255,140.8155,140.9055,140.9955,141.0645,141.1463,141.2281,141.3099,141.3917,141.4735,141.5554,141.6372,141.719,141.8008,141.8826,142.0313,142.1213,142.2113,142.3013,142.3913,142.4812,142.5712,142.6612,142.7512,142.8413,142.9102,142.992,143.0738,143.1556,143.2374,143.3192,143.4011,143.4829,143.5647,143.6465,143.7283,143.877,143.967,144.057,144.147,144.237,144.327,144.417,144.507,144.597,144.687,144.7559,144.8559,144.9559,145.0559,145.1559,145.2559,145.3559,145.4559,145.5559,145.5469,145.6287,145.7105,145.7923,145.8741,145.956,146.0378,146.1196,146.2014,146.2832,146.3651,146.5137,146.5955,146.6773,146.7591,146.8409,146.9228,147.0046,147.0864,147.1682,147.25,147.3319,147.4805,147.5705,147.6605,147.7505,147.8405,147.9305,148.0205,148.1105,148.2005,148.2905,148.3594,148.4494,148.5394,148.6294,148.7194,148.8094,148.8994,148.9894,149.0794,149.1694,149.2383,149.3283,149.4183,149.5083,149.5983,149.6883,149.7783,149.8683,149.9583,150.0483,150.1172,150.199,150.2808,150.3626,150.4445,150.5263,150.6081,150.6899,150.7717,150.8536,150.9354,151.084,151.174,151.264,151.354,151.444,151.534,151.624,151.714,151.804,151.894,151.9629,152.0529,152.1429,152.2329,152.3229,152.4129,152.5029,152.5929,152.6829,152.7729,152.8418,152.9318,153.0218,153.1118,153.2018,153.2918,153.3818,153.4718,153.5618,153.6518,153.7207,153.8025,153.8843,153.9662,154.048,154.1298,154.2116,154.2934,154.3752,154.4571,154.5389,154.6875,154.7775,154.8675,154.9575,155.0475,155.1375,155.2275,155.3175,155.4075,155.4975,155.5664,155.6564,155.7464,155.8364,155.9264,156.0164,156.1064,156.1964,156.2864,156.3764,156.4453,156.5353,156.6253,156.7153,156.8053,156.8953,156.9853,157.0753,157.1653,157.2553,157.3242,157.406,157.4879,157.5697,157.6515,157.7333,157.8151,157.8969,157.9788,158.0606,158.1424,158.291,158.381,158.471,158.561,158.651,158.741,158.831,158.921,159.011,159.101,159.1699,159.2517,159.3336,159.4154,159.4972,159.579,159.6608,159.7426,159.8245,159.9063,159.9881,160.1367,160.2367,160.3367,160.4367,160.5367,160.6367,160.7367,160.8367,160.9367,160.9277,161.0096,161.0914,161.1732,161.255,161.3368,161.4186,161.5005,161.5823,161.6641,161.7459,161.8945,161.9845,162.0745,162.1645,162.2545,162.3445,162.4345,162.5245,162.6145,162.7045,162.7734,162.8553,162.9371,163.0189,163.1007,163.1825,163.2643,163.3462,163.428,163.5098,163.5916,163.7402,163.8302,163.9202,164.0102,164.1002,164.1902,164.2802,164.3702,164.4602,164.5502,164.6191,164.7091,164.7991,164.8891,164.9791,165.0691,165.1591,165.2491,165.3391,165.4291,165.498,165.588,165.678,165.768,165.858,165.948,166.038,166.128,166.218,166.308,166.377,166.4588,166.5406,166.6224,166.7042,166.786,166.8679,166.9497,167.0315,167.1133,167.1951,167.3438,167.4338,167.5238,167.6138,167.7038,167.7937,167.8837,167.9737,168.0637,168.1538,168.2227,168.3227,168.4227,168.5227,168.6227,168.7227,168.8227,168.9227,169.0227,169.0137,169.0955,169.1773,169.2591,169.3409,169.4228,169.5046,169.5864,169.6682,169.75,169.8319,169.9805,170.0623,170.1441,170.2259,170.3077,170.3896,170.4714,170.5532,170.635,170.7168,170.7987,170.9473,171.0373,171.1273,171.2173,171.3073,171.3973,171.4873,171.5773,171.6673,171.7573,171.8262,171.9162,172.0062,172.0962,172.1862,172.2762,172.3662,172.4562,172.5462,172.6362,172.7051,172.7951,172.8851,172.9751,173.0651,173.1551,173.2451,173.3351,173.4251,173.5151,173.584,173.674,173.764,173.854,173.944,174.034,174.124,174.214,174.304,174.394,174.4629,174.5447,174.6265,174.7083,174.7902,174.872,174.9538,175.0356,175.1174,175.1993,175.2811,175.4297,175.5197,175.6097,175.6997,175.7897,175.8797,175.9697,176.0597,176.1497,176.2397,176.3086,176.3986,176.4886,176.5786,176.6686,176.7586,176.8486,176.9386,177.0286,177.1186,177.1875,177.2693,177.3511,177.433,177.5148,177.5966,177.6784,177.7602,177.842,177.9239,178.0057,178.1543,178.2543,178.3543,178.4543,178.5543,178.6543,178.7543,178.8543,178.9543,178.9453,179.0271,179.1089,179.1908,179.2726,179.3544,179.4362,179.518,179.5999,179.6817,179.7635,179.9121,180.0021,180.0921,180.1821,180.2721,180.3621,180.4521,180.5421,180.6321,180.7221,180.791,180.8728,180.9547,181.0365,181.1183,181.2001,181.2819,181.3637,181.4456,181.5274,181.6092,181.7578,181.8478,181.9378,182.0278,182.1178,182.2078,182.2978,182.3878,182.4778,182.5678,182.6367,182.7267,182.8167,182.9067,182.9967,183.0867,183.1767,183.2667,183.3567,183.4467,183.5156,183.5974,183.6793,183.7611,183.8429,183.9247,184.0065,184.0884,184.1702,184.252,184.3338,184.4824,184.5724,184.6624,184.7524,184.8424,184.9324,185.0224,185.1124,185.2024,185.2924,185.3613,185.4613,185.5613,185.6613,185.7613,185.8613,185.9613,186.0613,186.1613,186.1523,186.2342,186.316,186.3978,186.4796,186.5614,186.6433,186.7251,186.8069,186.8887,186.9705,187.1191,187.201,187.2828,187.3646,187.4464,187.5282,187.61,187.6919,187.7737,187.8555,187.9373,188.0859,188.1759,188.2659,188.3559,188.4459,188.5359,188.6259,188.7159,188.8059,188.8959,188.9648,189.0648,189.1648,189.2648,189.3648,189.4648,189.5648,189.6648,189.7648,189.7559,189.8377,189.9195,190.0013,190.0831,190.165,190.2468,190.3286,190.4104,190.4922,190.574,190.7227,190.7977,190.8727,190.9477,191.0227,191.0977,191.1727,191.2477,191.3227,191.3977,191.4727,191.5477,191.7773,191.8773,191.9773,192.0773,192.1773,192.2773,192.3773,192.4773,192.5773,192.5684,192.6684,192.7684,192.8684,192.9684,193.0684,193.1684,193.2684,193.3684,193.3594,193.4412,193.523,193.6048,193.6866,193.7685,193.8503,193.9321,194.0139,194.0957,194.1776,194.3262,194.408,194.4898,194.5716,194.6534,194.7353,194.8171,194.8989,194.9807,195.0625,195.1444,195.293,195.383,195.473,195.563,195.653,195.743,195.833,195.923,196.013,196.103,196.1719,196.2719,196.3719,196.4719,196.5719,196.6719,196.7719,196.8719,196.9719,196.9629,197.0447,197.1265,197.2083,197.2902,197.372,197.4538,197.5356,197.6174,197.6993,197.7811,197.9297,198.0115,198.0933,198.1751,198.257,198.3388,198.4206,198.5024,198.5842,198.6661,198.7479,198.8965,198.9865,199.0765,199.1665,199.2565,199.3465,199.4365,199.5265,199.6165,199.7065,199.7754,199.8654,199.9554,200.0454,200.1354,200.2254,200.3154,200.4054,200.4954,200.5854,200.6543,200.7443,200.8343,200.9243,201.0143,201.1043,201.1943,201.2843,201.3743,201.4643,201.5332,201.615,201.6968,201.7787,201.8605,201.9423,202.0241,202.1059,202.1877,202.2696,202.3514,202.5,202.59,202.68,202.77,202.86,202.95,203.04,203.13,203.22,203.31,203.3789,203.4689,203.5589,203.6489,203.7389,203.8289,203.9189,204.0089,204.0989,204.1889,204.2578,204.3478,204.4378,204.5278,204.6178,204.7078,204.7978,204.8878,204.9778,205.0678,205.1367,205.2185,205.3004,205.3822,205.464,205.5458,205.6276,205.7094,205.7913,205.8731,205.9549,206.1035,206.1935,206.2835,206.3735,206.4635,206.5535,206.6435,206.7335,206.8235,206.9135,206.9824,207.0724,207.1624,207.2524,207.3424,207.4324,207.5224,207.6124,207.7024,207.7924,207.8613,207.9513,208.0413,208.1313,208.2213,208.3113,208.4013,208.4913,208.5813,208.6713,208.7402,208.8302,208.9202,209.0102,209.1002,209.1902,209.2802,209.3702,209.4602,209.5502,209.6191,209.701,209.7828,209.8646,209.9464,210.0282,210.11,210.1919,210.2737,210.3555,210.4373,210.5859,210.6859,210.7859,210.8859,210.9859,211.0859,211.1859,211.2859,211.3859,211.377,211.4588,211.5406,211.6224,211.7042,211.786,211.8679,211.9497,212.0315,212.1133,212.1951,212.3438,212.4338,212.5238,212.6138,212.7038,212.7937,212.8837,212.9737,213.0637,213.1538,213.2227,213.3127,213.4027,213.4927,213.5827,213.6727,213.7627,213.8527,213.9427,214.0327,214.1016,214.1834,214.2652,214.347,214.4288,214.5107,214.5925,214.6743,214.7561,214.8379,214.9197,215.0684,215.1584,215.2484,215.3384,215.4284,215.5184,215.6084,215.6984,215.7884,215.8784,215.9473,216.0373,216.1273,216.2173,216.3073,216.3973,216.4873,216.5773,216.6673,216.7573,216.8262,216.9162,217.0062,217.0962,217.1862,217.2762,217.3662,217.4562,217.5462,217.6362,217.7051,217.7951,217.8851,217.9751,218.0651,218.1551,218.2451,218.3351,218.4251,218.5151,218.584,218.6658,218.7476,218.8294,218.9113,218.9931,219.0749,219.1567,219.2385,219.3203,219.4022,219.5508,219.6408,219.7308,219.8208,219.9108,220.0008,220.0908,220.1808,220.2708,220.3608,220.4297,220.5197,220.6097,220.6997,220.7897,220.8797,220.9697,221.0597,221.1497,221.2397,221.3086,221.3986,221.4886,221.5786,221.6686,221.7586,221.8486,221.9386,222.0286,222.1186,222.1875,222.2775,222.3675,222.4575,222.5475,222.6375,222.7275,222.8175,222.9075,222.9975,223.0664,223.1564,223.2464,223.3364,223.4264,223.5164,223.6064,223.6964,223.7864,223.8764,223.9453,224.0271,224.1089,224.1908,224.2726,224.3544,224.4362,224.518,224.5999,224.6817,224.7635,224.9121,225.0121,225.1121,225.2121,225.3121,225.4121,225.5121,225.6121,225.7121,225.7031,225.7931,225.8831,225.9731,226.0631,226.1531,226.2431,226.3331,226.4231,226.5131,226.582,226.6638,226.7457,226.8275,226.9093,226.9911,227.0729,227.1548,227.2366,227.3184,227.4002,227.5488,227.6306,227.7125,227.7943,227.8761,227.9579,228.0397,228.1216,228.2034,228.2852,228.367,228.5156,228.6156,228.7156,228.8156,228.9156,229.0156,229.1156,229.2156,229.3156,229.3066,229.3966,229.4866,229.5766,229.6666,229.7566,229.8466,229.9366,230.0266,230.1166,230.1855,230.2674,230.3492,230.431,230.5128,230.5946,230.6765,230.7583,230.8401,230.9219,231.0037,231.1523,231.2423,231.3323,231.4223,231.5123,231.6023,231.6923,231.7823,231.8723,231.9623,232.0313,232.1213,232.2113,232.3013,232.3913,232.4812,232.5712,232.6612,232.7512,232.8413,232.9102,233.0102,233.1102,233.2102,233.3102,233.4102,233.5102,233.6102,233.7102,233.7012,233.783,233.8648,233.9466,234.0284,234.1103,234.1921,234.2739,234.3557,234.4375,234.5194,234.668,234.7498,234.8316,234.9134,234.9952,235.0771,235.1589,235.2407,235.3225,235.4043,235.4862,235.6348,235.7348,235.8348,235.9348,236.0348,236.1348,236.2348,236.3348,236.4348,236.4258,236.5158,236.6058,236.6958,236.7858,236.8758,236.9658,237.0558,237.1458,237.2358,237.3047,237.3865,237.4683,237.5501,237.632,237.7138,237.7956,237.8774,237.9592,238.0411,238.1229,238.2715,238.3533,238.4351,238.5169,238.5988,238.6806,238.7624,238.8442,238.926,239.0078,239.0897,239.2383,239.3383,239.4383,239.5383,239.6383,239.7383,239.8383,239.9383,240.0383,240.0293,240.1193,240.2093,240.2993,240.3893,240.4793,240.5693,240.6593,240.7493,240.8393,240.9082,240.9982,241.0882,241.1782,241.2682,241.3582,241.4482,241.5382,241.6282,241.7182,241.7871,241.8689,241.9507,242.0326,242.1144,242.1962,242.278,242.3598,242.4417,242.5235,242.6053,242.7539,242.8439,242.9339,243.0239,243.1139,243.2039,243.2939,243.3839,243.4739,243.5639,243.6328,243.7328,243.8328,243.9328,244.0328,244.1328,244.2328,244.3328,244.4328,244.4238,244.5056,244.5875,244.6693,244.7511,244.8329,244.9147,244.9966,245.0784,245.1602,245.242,245.3906,245.4724,245.5543,245.6361,245.7179,245.7997,245.8815,245.9634,246.0452,246.127,246.2088,246.3574,246.4574,246.5574,246.6574,246.7574,246.8574,246.9574,247.0574,247.1574,247.1484,247.2384,247.3284,247.4184,247.5084,247.5984,247.6884,247.7784,247.8684,247.9584,248.0273,248.1092,248.191,248.2728,248.3546,248.4364,248.5183,248.6001,248.6819,248.7637,248.8455,248.9941,249.0841,249.1741,249.2641,249.3541,249.4441,249.5341,249.6241,249.7141,249.8041,249.873,249.973,250.073,250.173,250.273,250.373,250.473,250.573,250.673,250.6641,250.7459,250.8277,250.9095,250.9913,251.0732,251.155,251.2368,251.3186,251.4004,251.4822,251.6309,251.7209,251.8109,251.9009,251.9909,252.0809,252.1709,252.2609,252.3509,252.4409,252.5098,252.5998,252.6898,252.7798,252.8698,252.9598,253.0498,253.1398,253.2298,253.3198,253.3887,253.4787,253.5687,253.6587,253.7487,253.8387,253.9287,254.0187,254.1087,254.1987,254.2676,254.3576,254.4476,254.5376,254.6276,254.7176,254.8076,254.8976,254.9876,255.0776,255.1465,255.2283,255.3101,255.3919,255.4738,255.5556,255.6374,255.7192,255.801,255.8828,255.9647,256.1133,256.2033,256.2933,256.3833,256.4733,256.5633,256.6533,256.7433,256.8333,256.9233,256.9922,257.0822,257.1722,257.2622,257.3522,257.4422,257.5322,257.6222,257.7122,257.8022,257.8711,257.9611,258.0511,258.1411,258.2311,258.3211,258.4111,258.5011,258.5911,258.6811,258.75,258.8318,258.9136,258.9955,259.0773,259.1591,259.2409,259.3227,259.4045,259.4864,259.5682,259.7168,259.8168,259.9168,260.0168,260.1168,260.2168,260.3168,260.4168,260.5168,260.5078,260.5978,260.6878,260.7778,260.8678,260.9578,261.0478,261.1378,261.2278,261.3178,261.3867,261.4685,261.5504,261.6322,261.714,261.7958,261.8776,261.9594,262.0413,262.1231,262.2049,262.3535,262.4435,262.5335,262.6235,262.7135,262.8035,262.8935,262.9835,263.0735,263.1635,263.2324,263.3224,263.4124,263.5024,263.5924,263.6824,263.7724,263.8624,263.9524,264.0424,264.1113,264.2013,264.2913,264.3813,264.4713,264.5613,264.6513,264.7413,264.8313,264.9213,264.9902,265.0721,265.1539,265.2357,265.3175,265.3993,265.4811,265.563,265.6448,265.7266,265.8084,265.957,266.047,266.137,266.227,266.317,266.407,266.497,266.587,266.677,266.767,266.8359,266.9259,267.0159,267.1059,267.1959,267.2859,267.3759,267.4659,267.5559,267.6459,267.7148,267.8048,267.8948,267.9848,268.0748,268.1648,268.2548,268.3448,268.4348,268.5248,268.5938,268.6837,268.7738,268.8637,268.9538,269.0437,269.1338,269.2237,269.3138,269.4038,269.4727,269.5545,269.6363,269.7181,269.7999,269.8817,269.9636,270.0454,270.1272,270.209,270.2908,270.4395,270.5295,270.6195,270.7095,270.7995,270.8895,270.9795,271.0695,271.1595,271.2495,271.3184,271.4084,271.4984,271.5884,271.6784,271.7684,271.8584,271.9484,272.0384,272.1284,272.1973,272.2873,272.3773,272.4673,272.5573,272.6473,272.7373,272.8273,272.9173,273.0073,273.0762,273.1662,273.2562,273.3462,273.4362,273.5262,273.6162,273.7062,273.7962,273.8862,273.9551,274.0369,274.1187,274.2005,274.2824,274.3642,274.446,274.5278,274.6096,274.6914,274.7733,274.9219,275.0119,275.1019,275.1919,275.2819,275.3719,275.4619,275.5519,275.6419,275.7319,275.8008,275.9008,276.0008,276.1008,276.2008,276.3008,276.4008,276.5008,276.6008,276.5918,276.6736,276.7554,276.8373,276.9191,277.0009,277.0827,277.1645,277.2463,277.3282,277.41,277.5586,277.6404,277.7222,277.804,277.8859,277.9677,278.0495,278.1313,278.2131,278.295,278.3768,278.5254,278.6154,278.7054,278.7954,278.8854,278.9754,279.0654,279.1554,279.2454,279.3354,279.4043,279.4943,279.5843,279.6743,279.7643,279.8543,279.9443,280.0343,280.1243,280.2143,280.2832,280.3832,280.4832,280.5832,280.6832,280.7832,280.8832,280.9832,281.0832,281.0742,281.1492,281.2242,281.2992,281.3742,281.4492,281.5242,281.5992,281.6742,281.7492,281.8242,281.8992,282.1289,282.2189,282.3089,282.3989,282.4889,282.5789,282.6689,282.7589,282.8489,282.9389,283.0078,283.0978,283.1878,283.2778,283.3678,283.4578,283.5478,283.6378,283.7278,283.8178,283.8867,283.9767,284.0667,284.1567,284.2467,284.3367,284.4267,284.5167,284.6067,284.6967,284.7656,284.8474,284.9293,285.0111,285.0929,285.1747,285.2565,285.3384,285.4202,285.502,285.5838,285.7324,285.8224,285.9124,286.0024,286.0924,286.1824,286.2724,286.3624,286.4524,286.5424,286.6113,286.6931,286.775,286.8568,286.9386,287.0204,287.1022,287.1841,287.2659,287.3477,287.4295,287.5781,287.6681,287.7581,287.8481,287.9381,288.0281,288.1181,288.2081,288.2981,288.3881,288.457,288.547,288.637,288.727,288.817,288.907,288.997,289.087,289.177,289.267,289.3359,289.4178,289.4996,289.5814,289.6632,289.745,289.8268,289.9087,289.9905,290.0723,290.1541,290.3027,290.3927,290.4827,290.5727,290.6627,290.7527,290.8427,290.9327,291.0227,291.1127,291.1816,291.2716,291.3616,291.4516,291.5416,291.6316,291.7216,291.8116,291.9016,291.9916,292.0605,292.1505,292.2405,292.3305,292.4205,292.5105,292.6005,292.6905,292.7805,292.8705,292.9395,293.0213,293.1031,293.1849,293.2667,293.3485,293.4304,293.5122,293.594,293.6758,293.7576,293.9063,293.9962,294.0863,294.1762,294.2663,294.3562,294.4463,294.5362,294.6263,294.7163,294.7852,294.867,294.9488,295.0306,295.1124,295.1942,295.2761,295.3579,295.4397,295.5215,295.6033,295.752,295.842,295.932,296.022,296.112,296.202,296.292,296.382,296.472,296.562,296.6309,296.7209,296.8109,296.9009,296.9909,297.0809,297.1709,297.2609,297.3509,297.4409,297.5098,297.5998,297.6898,297.7798,297.8698,297.9598,298.0498,298.1398,298.2298,298.3198,298.3887,298.4705,298.5523,298.6341,298.7159,298.7978,298.8796,298.9614,299.0432,299.125,299.2069,299.3555,299.4455,299.5355,299.6255,299.7155,299.8055,299.8955,299.9855,300.0755,300.1655,300.2344,300.3244,300.4144,300.5044,300.5944,300.6844,300.7744,300.8644,300.9544,301.0444,301.1133,301.2033,301.2933,301.3833,301.4733,301.5633,301.6533,301.7433,301.8333,301.9233,301.9922,302.0672,302.1422,302.2172,302.2922,302.3672,302.4422,302.5172,302.5922,302.6672,302.7422,302.8172,303.0469,303.1369,303.2269,303.3169,303.4069,303.4969,303.5869,303.6769,303.7669,303.8569,303.9258,304.0258,304.1258,304.2258,304.3258,304.4258,304.5258,304.6258,304.7258,304.7168,304.7986,304.8804,304.9623,305.0441,305.1259,305.2077,305.2895,305.3713,305.4532,305.535,305.6836,305.7654,305.8472,305.929,306.0109,306.0927,306.1745,306.2563,306.3381,306.42,306.5018,306.6504,306.7322,306.814,306.8958,306.9777,307.0595,307.1413,307.2231,307.3049,307.3868,307.4686,307.6172,307.7172,307.8172,307.9172,308.0172,308.1172,308.2172,308.3172,308.4172,308.4082,308.4982,308.5882,308.6782,308.7682,308.8582,308.9482,309.0382,309.1282,309.2182,309.2871,309.3689,309.4507,309.5326,309.6144,309.6962,309.778,309.8598,309.9417,310.0235,310.1053,310.2539,310.3357,310.4175,310.4994,310.5812,310.663,310.7448,310.8266,310.9085,310.9903,311.0721,311.2207,311.3107,311.4007,311.4907,311.5807,311.6707,311.7607,311.8507,311.9407,312.0307,312.0996,312.1896,312.2796,312.3696,312.4596,312.5496,312.6396,312.7296,312.8196,312.9096,312.9785,313.0603,313.1422,313.224,313.3058,313.3876,313.4694,313.5512,313.6331,313.7149,313.7967,313.9453,314.0353,314.1253,314.2153,314.3053,314.3953,314.4853,314.5753,314.6653,314.7553,314.8242,314.906,314.9879,315.0697,315.1515,315.2333,315.3151,315.3969,315.4788,315.5606,315.6424,315.791,315.881,315.971,316.061,316.151,316.241,316.331,316.421,316.511,316.601,316.6699,316.7599,316.8499,316.9399,317.0299,317.1199,317.2099,317.2999,317.3899,317.4799,317.5488,317.6306,317.7125,317.7943,317.8761,317.9579,318.0397,318.1216,318.2034,318.2852,318.367,318.5156,318.6056,318.6956,318.7856,318.8756,318.9656,319.0556,319.1456,319.2356,319.3256,319.3945,319.4845,319.5745,319.6645,319.7545,319.8445,319.9345,320.0245,320.1145,320.2045,320.2734,320.3634,320.4534,320.5434,320.6334,320.7234,320.8134,320.9034,320.9934,321.0834,321.1523,321.2423,321.3323,321.4223,321.5123,321.6023,321.6923,321.7823,321.8723,321.9623,322.0313,322.1131,322.1949,322.2767,322.3585,322.4403,322.5222,322.604,322.6858,322.7676,322.8494,322.998,323.0799,323.1617,323.2435,323.3253,323.4071,323.489,323.5708,323.6526,323.7344,323.8162,323.9648,324.0548,324.1448,324.2348,324.3248,324.4148,324.5048,324.5948,324.6848,324.7748,324.8438,324.9337,325.0238,325.1137,325.2038,325.2937,325.3838,325.4737,325.5638,325.6538,325.7227,325.8127,325.9027,325.9927,326.0827,326.1727,326.2627,326.3527,326.4427,326.5327,326.6016,326.6766,326.7516,326.8266,326.9016,326.9766,327.0516,327.1266,327.2016,327.2766,327.3516,327.4266,327.6563,327.7462,327.8363,327.9262,328.0163,328.1062,328.1963,328.2862,328.3763,328.4663,328.5352,328.6352,328.7352,328.8352,328.9352,329.0352,329.1352,329.2352,329.3352,329.3262,329.4162,329.5062,329.5962,329.6862,329.7762,329.8662,329.9562,330.0462,330.1362,330.2051,330.2801,330.3551,330.4301,330.5051,330.5801,330.6551,330.7301,330.8051,330.8801,330.9551,331.0301,331.2598,331.3498,331.4398,331.5298,331.6198,331.7098,331.7998,331.8898,331.9798,332.0698,332.1387,332.2387,332.3387,332.4387,332.5387,332.6387,332.7387,332.8387,332.9387,332.9297,333.0115,333.0933,333.1751,333.257,333.3388,333.4206,333.5024,333.5842,333.6661,333.7479,333.8965,333.9783,334.0601,334.1419,334.2238,334.3056,334.3874,334.4692,334.551,334.6328,334.7147,334.8633,334.9533,335.0433,335.1333,335.2233,335.3133,335.4033,335.4933,335.5833,335.6733,335.7422,335.8322,335.9222,336.0122,336.1022,336.1922,336.2822,336.3722,336.4622,336.5522,336.6211,336.7029,336.7847,336.8665,336.9484,337.0302,337.112,337.1938,337.2756,337.3575,337.4393,337.5879,337.6779,337.7679,337.8579,337.9479,338.0379,338.1279,338.2179,338.3079,338.3979,338.4668,338.5568,338.6468,338.7368,338.8268,338.9168,339.0068,339.0968,339.1868,339.2768,339.3457,339.4357,339.5257,339.6157,339.7057,339.7957,339.8857,339.9757,340.0657,340.1557,340.2246,340.3146,340.4046,340.4946,340.5846,340.6746,340.7646,340.8546,340.9446,341.0346,341.1035,341.1853,341.2672,341.349,341.4308,341.5126,341.5944,341.6762,341.7581,341.8399,341.9217,342.0703,342.1603,342.2503,342.3403,342.4303,342.5203,342.6103,342.7003,342.7903,342.8803,342.9492,343.0392,343.1292,343.2192,343.3092,343.3992,343.4892,343.5792,343.6692,343.7592,343.8281,343.9181,344.0081,344.0981,344.1881,344.2781,344.3681,344.4581,344.5481,344.6381,344.707,344.797,344.887,344.977,345.067,345.157,345.247,345.337,345.427,345.517,345.5859,345.6678,345.7496,345.8314,345.9132,345.995,346.0768,346.1587,346.2405,346.3223,346.4041,346.5527,346.6427,346.7327,346.8227,346.9127,347.0027,347.0927,347.1827,347.2727,347.3627,347.4316,347.5216,347.6116,347.7016,347.7916,347.8816,347.9716,348.0616,348.1516,348.2416,348.3105,348.3924,348.4742,348.556,348.6378,348.7196,348.8015,348.8833,348.9651,349.0469,349.1287,349.2773,349.3673,349.4573,349.5473,349.6373,349.7273,349.8173,349.9073,349.9973,350.0873,350.1563,350.2381,350.3199,350.4017,350.4835,350.5653,350.6472,350.729,350.8108,350.8926,350.9744,351.123,351.223,351.323,351.423,351.523,351.623,351.723,351.823,351.923,351.9141,352.0041,352.0941,352.1841,352.2741,352.3641,352.4541,352.5441,352.6341,352.7241,352.793,352.883,352.973,353.063,353.153,353.243,353.333,353.423,353.513,353.603,353.6719,353.7469,353.8219,353.8969,353.9719,354.0469,354.1219,354.1969,354.2719,354.3469,354.4219,354.4969,354.7266,354.8166,354.9066,354.9966,355.0866,355.1766,355.2666,355.3566,355.4466,355.5366,355.6055,355.7055,355.8055,355.9055,356.0055,356.1055,356.2055,356.3055,356.4055,356.3965,356.4865,356.5765,356.6665,356.7565,356.8465,356.9365,357.0265,357.1165,357.2065,357.2754,357.3572,357.439,357.5208,357.6027,357.6845,357.7663,357.8481,357.9299,358.0118,358.0936,
 
};



void setup() {
  Serial.begin(115200);
  
  pinMode(VREF1, OUTPUT);
  pinMode(VREF2, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(pulse, OUTPUT);
  
  
  analogWrite(VREF1, 217);  
  analogWrite(VREF2, 217);  

  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
 
  pinMode(ledPin, OUTPUT); // visual signal of I/O to chip
  pinMode(clockPin, OUTPUT); // SCK
  pinMode(CSnPin, OUTPUT); // CSn -- has to toggle high and low to signal chip to start data transfer
  pinMode(inputPin, INPUT); // SDA


  Serial.print("DDRB , ");
  Serial.println(DDRB,BIN);
  Serial.print("DDRD , ");
  Serial.println(DDRD,BIN);
  
}







void loop()
{
  while (Serial.available()) {

    char inChar = (char)Serial.read();
    
    if (inChar == 'p') {
      print_angle();
      delay(50);
    }
    
    else if (inChar == 's') {
      one_step();  
      print_angle();
    }
    
    else if (inChar == 'd') {
       if (dir == 1){
         dir = 0;
       }
       else {
         dir = 1;
       }
    }
    
    else if (inChar == 'c') {
       i_step = 0;
       i_w = 0;
    }
    
    else if (inChar == 'z') {
      a = readEncoder();
      anglefloat = a * 0.08789;
      while (anglefloat >= 0.9) {
        one_step();
        a = readEncoder();
        anglefloat = a * 0.08789;
        Serial.println(anglefloat,DEC);
      delay(50);        
      }
      delay(100);
      offset = readEncoder();
      zero_state = step_state;
      Serial.println(zero_state,DEC);
     }
     else if (inChar == 'g') {
       for(int x = 0; x < 400; x++){
        one_step();
        a = readEncoder();
        anglefloat = a * 0.08789;
        //Serial.print(i_step,DEC);
        //Serial.print(" , ");
        //Serial.print(i_step*0.9,DEC);
        //Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        Serial.println(anglefloat, DEC);
       }
     } 
     
     else if (inChar == 'w') {
       for(int x = 0; x < 400; x++){
        a = readEncoder();
        
        i_w = 2*x;
        EEPROM.put(i_w,a);
        one_step();
        anglefloat = a * 0.08789;
        //Serial.print(i_step,DEC);
        //Serial.print(" , ");
        //Serial.print(i_step*0.9,DEC);
        //Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        Serial.println(anglefloat, DEC);
       delay(100);
       }
     }    
      else if (inChar == 'r') {
       for(int x = 0; x < 400; x++){
        i_r = 2*x;
       
        EEPROM.get(i_r,a);
        
        //anglefloat = a * 0.08789;
        //Serial.print(i_step,DEC);
        //Serial.print(" , ");
        //Serial.print(i_step*0.9,DEC);
        //Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        //Serial.println(anglefloat, DEC);
        Serial.println(a, DEC);
       }
     }
     
     
  else if (inChar == 'a')  {
     Serial.println("Enter angle:");      //Prompt User for input
     while (Serial.available()==0)  {     //Wait for new angle
    }   
     update_angle();
    }
  else if (inChar == 'l') {
     Serial.println("Enter encoder count:");      //Prompt User for input
     while (Serial.available()==0)  {     //Wait for new angle
    }   
     a=Serial.parseFloat();
     angle_out= lookup_angle(a);
     Serial.println(angle_out,DEC);
    }
  else if (inChar == 'f') {
  follow();
  }
  
  
  else if (inChar == 'x')  {
     Serial.println("Enter angle:");      //Prompt User for input
     while (Serial.available()==0)  {     //Wait for new angle
    }   
     setpoint();
    }
  
  }
    
       
     
     
}





float lookup_angle(int n)
{
   float a_out; 
   a_out = pgm_read_float_near(lookup+n);
  //Serial.println(angle_out,DEC);
    return a_out;
}



//_____________________________________________________________________________


void follow()
{
  while (1) {
       a = readEncoder();
       current_angle= lookup_angle(a);
      
       digitalWrite(pulse, !digitalRead(pulse));
      
      val1 = 100*sin( (100*(current_angle*pi)/180) + .45+((pi/4)*(3+ 2*zero_state)));
      analogWrite(VREF1, abs(val1));
      
      if (val1 >= 0)  {
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2,LOW);
      }
      else  {
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
      }
      val2 = 100*sin( (100*(current_angle*pi)/180) + .45+(((pi/4)*(1+ 2*zero_state))));
      analogWrite(VREF2, abs(val2));  
      
      if (val2 >= 0)  {
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4,LOW);
      }
      else  {
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
      }
      
      
      //delay(1);
      Serial.print(current_angle);
      Serial.print(" , ");
      Serial.print(val1,DEC);
      Serial.print(" , ");
      Serial.println(val2,DEC);
    }

}












//________________________________________________________________________




void update_angle()
{
  new_angle=Serial.parseFloat();     
  diff_angle =(new_angle-current_angle);
  
  

  
  
  if (diff_angle > 0.05)  {
    while (diff_angle >= 0.05)  {
      a = readEncoder();
      current_angle = lookup_angle(a);
      Serial.print(current_angle,DEC);
      Serial.print(" , ");
      current_angle +=0.8;
      
      
      
          
        Serial.print(current_angle,DEC);
      Serial.print(" , ");
      //Serial.print(val1,DEC);
      //Serial.print(" , ");
      Serial.println(lookup_angle(a),DEC);
      
      
      
      
      
       digitalWrite(pulse, !digitalRead(pulse));
      
      val1 = 200*sin( (100*(current_angle*pi)/180) + ((pi/4)*(3+ 2*zero_state)));
      analogWrite(VREF1, abs(val1));
      
      if (val1 >= 0)  {
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2,LOW);
      }
      else  {
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
      }
      val2 = 200*sin( (100*(current_angle*pi)/180) + ((pi/4)*(1+ 2*zero_state)));
      analogWrite(VREF2, abs(val2));  
      
      if (val2 >= 0)  {
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4,LOW);
      }
      else  {
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
      }
      
      diff_angle =(new_angle-current_angle);  
    }

  }
  else if (diff_angle <= -0.05) {
        while (diff_angle <= -0.05)  {
          
      a = readEncoder();
      current_angle = lookup_angle(a);
      Serial.print(current_angle,DEC);
      Serial.print(" , ");
      
      current_angle -=0.8;
       
       
     
  
        Serial.print(current_angle,DEC);
      Serial.print(" , ");

      Serial.println(lookup_angle(a),DEC);
      
      
      
      
      
       digitalWrite(pulse, !digitalRead(pulse));
      
      val1 = 200*sin( (100*(current_angle*pi)/180) + ((pi/4)*(3+ 2*zero_state)));
      analogWrite(VREF1, abs(val1));
      
      if (val1 >= 0)  {
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2,LOW);
      }
      else  {
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
      }

      
      val2 = 200*sin( (100*(current_angle*pi)/180) + ((pi/4)*(1+ 2*zero_state)));
      analogWrite(VREF2, abs(val2));  
      
      if (val2 >= 0)  {
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4,LOW);
      }
      else  {
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
      }
      
      //delay(1);
//      Serial.print(current_angle);
//      Serial.print(" , ");
//      Serial.print(val1,DEC);
//      Serial.print(" , ");
//      Serial.println(val2,DEC);
      diff_angle =(new_angle-current_angle);  
    }

    
    
  }
  a = readEncoder();
  Serial.println(a);

}


//-----------------------------------------------------------------------

void setpoint()
{
  static float ei =0.0;    
  static int U = 0;
  int start =0;
  int finish = 0;

  
  static float FA = 0.15;
  while(1){
    
    if (Serial.available() > 0) {
       new_angle=Serial.parseFloat();
    }
    
   start = micros();
    a = readEncoder();
finish = micros();
    
    
       current_angle= lookup_angle(a);
       ei = 0.95*(ei+diff_angle);
  diff_angle = -(new_angle-current_angle);
  Serial.println(current_angle,DEC);
 /*Serial.print(current_angle,DEC);
  Serial.print("  |  ") ;
  Serial.print(ei,DEC);
  Serial.print("  |  ") ;
  Serial.print(FA,DEC);
  Serial.print("  |  ") ;  
  Serial.println(diff_angle,DEC);
  //delay(100);
*/ 
  ep=(kp*diff_angle);
  U =abs(ep+ki*ei);
  if (U>256){
    U = 256;
  }
 // else if (U<25){
 //   U = 25;
 // }
  
  //FA = abs(diff_angle*KF);
  //if (FA>=0.1){
   FA=0.3 ;
  //}
 // Serial.println(current_angle);
  
  //digitalWrite(pulse, !digitalRead(pulse));
  
 
 // Serial.println(ep,DEC);
  if (diff_angle > 0.05)  {
    //while (diff_angle >= 0.05)  
      current_angle -= FA;//0.15;
      
       //digitalWrite(pulse, !digitalRead(pulse));
      PORTB ^= (B00010000); 
      
      ;
      val1 = U*sin( (100*(current_angle*pi)/180)+((pi/4)*(3+ 2*zero_state)));
      //val1 = ep*sin( 1.74533*current_angle + 6.8562);
      
     
      analogWrite(VREF1, abs(val1));

      if (val1 >= 0)  {
        //digitalWrite(IN1, HIGH);
        PORTB |= (B00000001);
        //digitalWrite(IN2,LOW);
        PORTB &= ~(B00000010);
      }
      else  {
        //digitalWrite(IN1, LOW);
        PORTB &= ~(B00000001);
        //digitalWrite(IN2, HIGH);
        PORTB |= (B00000010);
      }
      val2 = U*sin( (100*(current_angle*pi)/180) +((pi/4)*(1+ 2*zero_state)));
     //val2 = ep*sin( 1.74533*current_angle + 5.2854);
      analogWrite(VREF2, abs(val2));  
      
      if (val2 >= 0)  {
        //digitalWrite(IN3, HIGH);
        PORTB |= (B00000100);
        //digitalWrite(IN4,LOW);
        PORTB &= ~(B00001000);
        
      }
      else  {
        //digitalWrite(IN3, LOW);
        PORTB &= ~(B00000100);
        //digitalWrite(IN4, HIGH);
        PORTB |= (B00001000);
        
      }
      
      
      //delay(1);
    //  Serial.print(current_angle);
    //  Serial.print(" , ");
    //  Serial.print(val1,DEC);
    //  Serial.print(" , ");
    //  Serial.println(val2,DEC);
      //diff_angle =(new_angle-current_angle);  
    

  }
  else if (diff_angle < -0.05)  {
    //while (diff_angle <= 0.05)  
      current_angle += FA;//.15;
      
       //digitalWrite(pulse, !digitalRead(pulse));
      PORTB ^= (B00010000); 
      
      
      val1 = U*sin( (100*(current_angle*pi)/180) +((pi/4)*(3+ 2*zero_state)));
      //val1 = ep*sin( 1.74533*current_angle + 6.8562);
      analogWrite(VREF1, abs(val1));
      
      if (val1 >= 0)  {
        //digitalWrite(IN1, HIGH);
        PORTB |= (B00000001);
        //digitalWrite(IN2,LOW);
        PORTB &= ~(B00000010);
      }
      else  {
        //digitalWrite(IN1, LOW);
        PORTB &= ~(B00000001);
        //digitalWrite(IN2, HIGH);
        PORTB |= (B00000010);
      }
      val2 = U*sin( (100*(current_angle*pi)/180) +((pi/4)*(1+ 2*zero_state)));
      //val2 = ep*sin( 1.74533*current_angle + 5.2854);
      analogWrite(VREF2, abs(val2));  
      
      if (val2 >= 0)  {
        //digitalWrite(IN3, HIGH);
        PORTB |= (B00000100);
        //digitalWrite(IN4,LOW);
        PORTB &= ~(B00001000);
        
      }
      else  {
        //digitalWrite(IN3, LOW);
        PORTB &= ~(B00000100);
        //digitalWrite(IN4, HIGH);
        PORTB |= (B00001000);
        
      }
      
      
      //delay(1);
    //  Serial.print(current_angle);
    //  Serial.print(" , ");
    //  Serial.print(val1,DEC);
    //  Serial.print(" , ");
    //  Serial.println(val2,DEC);
      //diff_angle =(new_angle-current_angle);  
    

  
  }
  else{
  analogWrite(VREF1, 0); 
  analogWrite(VREF2, 0);  
  
  }
 // Serial.println(finish-start,DEC);

}

}






void one_step(){

  if (dir == 0) {
        i_step += 1;     
  }
   else{
        i_step -= 1;      
  }
  step_state = ((((i_step+zero_state) % 4)+4)%4);   // arduino mod does not wrap for negative....

  
  
  Serial.println(dir,DEC);
  Serial.println(step_state,DEC);

  
      
  analogWrite(VREF1, 64);  
  analogWrite(VREF2, 64);  
    if (step_state == 0){
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4, LOW);
    }
    else if (step_state == 1){

        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4, LOW);
    }
    else if (step_state == 2){
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
    }
     else if (step_state == 3){
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
        
     }
      delay(10);
}


void print_angle()
{
        a = readEncoder();
        anglefloat = a * 0.08789;
        Serial.print(i_step,DEC);
        Serial.print(" , ");
        Serial.print(i_step*0.9,DEC);
        Serial.print(" , ");
        Serial.print(a,DEC);
        Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        Serial.println(anglefloat, DEC);
}

int readEncoder()
{
// CSn needs to cycle from high to low to initiate transfer. Then clock cycles. As it goes high
// again, data will appear on sda
  digitalWrite(CSnPin, HIGH); // CSn high
  digitalWrite(clockPin, HIGH); // CLK high
  //delay(longdelay);// time between readings
  delayMicroseconds(10);
  digitalWrite(ledPin, HIGH); // signal start of transfer with LED
  digitalWrite(CSnPin, LOW); // CSn low: start of transfer
  delayMicroseconds(shortdelay); // delay for chip initialization
  digitalWrite(clockPin, LOW); // CLK goes low: start clocking
  delayMicroseconds(shortdelay); // hold low
 // for (int x=0; x <16; x++) // clock signal, 16 transitions, output to clock pin
 for (int x=0; x <18; x++) // clock signal, 16 transitions, output to clock pin
  {
    digitalWrite(clockPin, HIGH); //clock goes high
    delayMicroseconds(shortdelay); //
    inputstream =digitalRead(inputPin); // read one bit of data from pin
//Serial.print(inputstream, DEC);
    packeddata = ((packeddata << 1) + inputstream);// left-shift summing variable, add pin value
    digitalWrite(clockPin, LOW);
    delayMicroseconds(shortdelay); // end of one clock cycle
  }
// end of entire clock cycle
//Serial.println(" ");
  digitalWrite(ledPin, LOW); // signal end of transmission
// lots of diagnostics for verifying bitwise operations
//Serial.print("packed:");
//Serial.println(packeddata,DEC);
//Serial.print("pack bin: ");
//Serial.println(packeddata,BIN);
  angle = packeddata & anglemask; // mask rightmost 6 digits of packeddata to zero, into angle.
//Serial.print("mask: ");
//Serial.println(anglemask, BIN);
//Serial.print("bin angle:");
//Serial.println(angle, BIN);
//Serial.print("angle: ");
//Serial.println(angle, DEC);
  angle = (angle >> 6); // shift 16-digit angle right 6 digits to form 10-digit value
//Serial.print("angleshft:");
//Serial.println(angle, BIN);
//Serial.print("angledec: ");
//Serial.println(angle, DEC);
//angle = angle * 0.3515; // angle * (360/1024) == actual degrees
  //anglefloat = angle * 0.08789; // angle * (360/4096) == actual degrees
  angletemp = angle;
  //Serial.print("angle: "); // and, finally, print it.
  
//  Serial.print(i_step,DEC);
//  Serial.print(" , ");
//  Serial.print(i_step*0.9,DEC);
//  Serial.print(" , ");
//  Serial.println(anglefloat-offset, DEC);
  
  
  
//Serial.println("--------------------");
//Serial.print("raw: "); // this was the prefix for the bit-by-bit diag output inside the loop.
  if (debug)
  {
    statusbits = packeddata & statusmask;
    DECn = statusbits & 2; // goes high if magnet moved away from IC
    INCn = statusbits & 4; // goes high if magnet moved towards IC
    LIN = statusbits & 8; // goes high for linearity alarm
    COF = statusbits & 16; // goes high for cordic overflow: data invalid
    OCF = statusbits & 32; // this is 1 when the chip startup is finished.
    if (DECn && INCn) { Serial.println("magnet moved out of range"); }
    else
    {
      if (DECn) { Serial.println("magnet moved away from chip"); }
      if (INCn) { Serial.println("magnet moved towards chip"); }
    }
    if (LIN) { Serial.println("linearity alarm: magnet misaligned? Data questionable."); }
    if (COF) { Serial.println("cordic overflow: magnet misaligned? Data invalid."); }
  }

  packeddata = 0; // reset both variables to zero so they don't just accumulate
  angle = 0;
  
//  return anglefloat;
return angletemp;
}

