/*


First attempt at closing the loop using AS5145 encoder, A4954 driver

Controlled via a serial terminal at 115200 baud.


____
    |
  13|-> LED 
  12|-> pulse         _
  11|-> IN4            \
  10|-> IN3             |---AS5145
   9|-> IN2           _/
   8|-> IN1             \
   7|-> inputPin         \
  ~6|-> VREF2             \___A4954    ---->3
  ~5|-> VREF1             /           ----->11
   4|->                  /
  ~3|-> CSnPin         _/
   2|-> clockPin
   1|
   0|
____|
  

Implemented commands are:

p  -  print [step count] , [assumed angle] , [encoder reading]

c  -  clear step count & assumed angle

s  -  step

d  -  dir toggle

z  -  seek zero position

g  -  Go! steps around 400 times

w  -  Same as go, but stores encoder angles to EEPROM

r  -  returns EEPROM contents

a  -  prompts user to enter angle 



*/


#include <EEPROM.h>
#include <math.h>
#include <avr/pgmspace.h>

const int spr = 200; //  400 steps per revolution
const float aps = 360.0/spr;  // angle per step

float kp = 100.0;
int ep = 0;
float ki =0.1;
float KF = 0.8;


int dir = 1;
int step_state = 1;



int inputstream = 0; //one bit read from pin
long packeddata = 0; //two bytes concatenated from inputstream
long angle = 0; //holds processed angle value
long angletemp;
float anglefloat = 0; 

int a = 0;  //angle value in zero routine
float offset = 0.000000000000000; //zero-offest of closest full step

//long anglemask = 65472; //0x1111111111000000: mask to obtain first 10 digits with position info
long anglemask = 262080; // 0x111111111111000000: mask to obtain first 12 digits with position info
long statusmask = 63; //0x000000000111111; mask to obtain last 6 digits containing status info
long statusbits; //holds status/error information
int DECn; //bit holding decreasing magnet field error data
int INCn; //bit holding increasing magnet field error data
int OCF; //bit holding startup-valid bit
int COF; //bit holding cordic DSP processing error data
int LIN; //bit holding magnet field displacement error data
int debug = 1;//1; //SET THIS TO 0 TO DISABLE PRINTING OF ERROR CODES
int shortdelay = 3;//3; // this is the microseconds of delay in the data clock
int longdelay = 1; // this is the milliseconds between readings


int i_step = 0; // step index
int i_w = 0;// write index
int i_r = 0; // read index

//___________________________________

const float pi = 3.14159;
const int  half = 134;//128;

float new_angle = 0.0; //input angle
float current_angle = 0.0; //current angle
float diff_angle = 0.0;
int val1 = 0;
int val2 = 0;

//////////////////////////////////////
//////////////////PINS////////////////
//////////////////////////////////////
int IN1 = 8;
int IN2 = 9;
int VREF1 = 5;
int VREF2 = 6;
int IN3 = 10;
int IN4 = 11;
int pulse = 12;


const int ledPin = 13; //LED connected to digital pin 13
const int clockPin = 2; //output to clock
const int CSnPin = 3; //output to chip select
const int inputPin = 7; //read AS5040


//////////////////////////////////////
//////////////////////////////////////
//////////////////////////////////////


float angle_out=0.0;
int zero_state =0;


//const PROGMEM float sine_lookup[] = {
//  
//0.0,0.01,0.02,0.03,0.04,0.05,0.06,0.0699,0.0799,0.0899,0.0998,0.1098,0.1197,0.1296,0.1395,0.1494,0.1593,0.1692,0.179,0.1889,0.1987,0.2085,0.2182,0.228,0.2377,0.2474,0.2571,0.2667,0.2764,0.286,0.2955,0.3051,0.3146,0.324,0.3335,0.3429,0.3523,0.3616,0.3709,0.3802,0.3894,0.3986,0.4078,0.4169,0.4259,0.435,0.4439,0.4529,0.4618,0.4706,0.4794,0.4882,0.4969,0.5055,0.5141,0.5227,0.5312,0.5396,0.548,0.5564,0.5646,0.5729,0.581,0.5891,0.5972,0.6052,0.6131,0.621,0.6288,0.6365,0.6442,0.6518,0.6594,0.6669,0.6743,0.6816,0.6889,0.6961,0.7033,0.7104,0.7174,0.7243,0.7311,0.7379,0.7446,0.7513,0.7578,0.7643,0.7707,0.7771,0.7833,0.7895,0.7956,0.8016,0.8076,0.8134,0.8192,0.8249,0.8305,0.836,0.8415,0.8468,0.8521,0.8573,0.8624,0.8674,0.8724,0.8772,0.882,0.8866,0.8912,0.8957,0.9001,0.9044,0.9086,0.9128,0.9168,0.9208,0.9246,0.9284,0.932,0.9356,0.9391,0.9425,0.9458,0.949,0.9521,0.9551,0.958,0.9608,0.9636,0.9662,0.9687,0.9711,0.9735,0.9757,0.9779,0.9799,0.9819,0.9837,0.9854,0.9871,0.9887,0.9901,0.9915,0.9927,0.9939,0.9949,0.9959,0.9967,0.9975,0.9982,0.9987,0.9992,0.9995,0.9998,0.9999,1.0,1.0,0.9998,0.9996,0.9992,0.9988,0.9982,0.9976,0.9969,0.996,0.9951,0.994,0.9929,0.9917,0.9903,0.9889,0.9874,0.9857,0.984,0.9822,0.9802,0.9782,0.9761,0.9738,0.9715,0.9691,0.9666,0.964,0.9613,0.9585,0.9556,0.9526,0.9495,0.9463,0.943,0.9396,0.9362,0.9326,0.929,0.9252,0.9214,0.9174,0.9134,0.9093,0.9051,0.9008,0.8964,0.8919,0.8874,0.8827,0.878,0.8731,0.8682,0.8632,0.8581,0.8529,0.8477,0.8423,0.8369,0.8314,0.8258,0.8201,0.8143,0.8085,0.8026,0.7966,0.7905,0.7843,0.7781,0.7718,0.7654,0.7589,0.7523,0.7457,0.739,0.7322,0.7254,0.7185,0.7115,0.7044,0.6973,0.6901,0.6828,0.6755,0.6681,0.6606,0.653,0.6454,0.6378,0.63,0.6222,0.6144,0.6065,0.5985,0.5904,0.5823,0.5742,0.566,0.5577,0.5494,0.541,0.5325,0.524,0.5155,0.5069,0.4983,0.4896,0.4808,0.472,0.4632,0.4543,0.4454,0.4364,0.4274,0.4183,0.4092,0.4001,0.3909,0.3817,0.3724,0.3631,0.3538,0.3444,0.335,0.3255,0.3161,0.3066,0.297,0.2875,0.2779,0.2683,0.2586,0.2489,0.2392,0.2295,0.2198,0.21,0.2002,0.1904,0.1806,0.1708,0.1609,0.151,0.1411,0.1312,0.1213,0.1114,0.1014,0.0915,0.0815,0.0715,0.0616,0.0516,0.0416,0.0316,0.0216,0.0116,0.0016};//,-0.0084,-0.0184,-0.0284,-0.0384,-0.0484,-0.0584,-0.0684,-0.0783,-0.0883,-0.0982,-0.1082,-0.1181,-0.1281,-0.138,-0.1479,-0.1577,-0.1676,-0.1775,-0.1873,-0.1971,-0.2069,-0.2167,-0.2264,-0.2362,-0.2459,-0.2555,-0.2652,-0.2748,-0.2844,-0.294,-0.3035,-0.3131,-0.3225,-0.332,-0.3414,-0.3508,-0.3601,-0.3694,-0.3787,-0.388,-0.3971,-0.4063,-0.4154,-0.4245,-0.4335,-0.4425,-0.4515,-0.4604,-0.4692,-0.478,-0.4868,-0.4955,-0.5042,-0.5128,-0.5213,-0.5298,-0.5383,-0.5467,-0.555,-0.5633,-0.5716,-0.5797,-0.5879,-0.5959,-0.6039,-0.6119,-0.6197,-0.6276,-0.6353,-0.643,-0.6506,-0.6582,-0.6657,-0.6731,-0.6805,-0.6878,-0.695,-0.7021,-0.7092,-0.7162,-0.7232,-0.7301,-0.7369,-0.7436,-0.7502,-0.7568,-0.7633,-0.7697,-0.7761,-0.7823,-0.7885,-0.7946,-0.8007,-0.8066,-0.8125,-0.8183,-0.824,-0.8296,-0.8352,-0.8406,-0.846,-0.8513,-0.8565,-0.8616,-0.8666,-0.8716,-0.8764,-0.8812,-0.8859,-0.8905,-0.895,-0.8994,-0.9037,-0.908,-0.9121,-0.9162,-0.9201,-0.924,-0.9278,-0.9315,-0.9351,-0.9386,-0.942,-0.9453,-0.9485,-0.9516,-0.9546,-0.9576,-0.9604,-0.9631,-0.9658,-0.9683,-0.9708,-0.9731,-0.9754,-0.9775,-0.9796,-0.9816,-0.9834,-0.9852,-0.9868,-0.9884,-0.9899,-0.9912,-0.9925,-0.9937,-0.9948,-0.9957,-0.9966,-0.9974,-0.9981,-0.9986,-0.9991,-0.9995,-0.9997,-0.9999,-1.0,-1.0,-0.9998,-0.9996,-0.9993,-0.9989,-0.9983,-0.9977,-0.997,-0.9962,-0.9952,-0.9942,-0.9931,-0.9919,-0.9905,-0.9891,-0.9876,-0.986,-0.9843,-0.9825,-0.9805,-0.9785,-0.9764,-0.9742,-0.9719,-0.9695,-0.967,-0.9644,-0.9617,-0.9589,-0.956,-0.9531,-0.95,-0.9468,-0.9435,-0.9402,-0.9367,-0.9332,-0.9295,-0.9258,-0.922,-0.9181,-0.9141,-0.91,-0.9058,-0.9015,-0.8971,-0.8926,-0.8881,-0.8835,-0.8787,-0.8739,-0.869,-0.864,-0.8589,-0.8538,-0.8485,-0.8432,-0.8378,-0.8323,-0.8267,-0.821,-0.8153,-0.8094,-0.8035,-0.7975,-0.7915,-0.7853,-0.7791,-0.7728,-0.7664,-0.7599,-0.7534,-0.7468,-0.7401,-0.7333,-0.7265,-0.7196,-0.7126,-0.7055,-0.6984,-0.6912,-0.684,-0.6766,-0.6692,-0.6618,-0.6542,-0.6467,-0.639,-0.6313,-0.6235,-0.6156,-0.6077,-0.5997,-0.5917,-0.5836,-0.5755,-0.5673,-0.559,-0.5507,-0.5423,-0.5339,-0.5254,-0.5169,-0.5083,-0.4996,-0.491,-0.4822,-0.4734,-0.4646,-0.4557,-0.4468,-0.4378,-0.4288,-0.4198,-0.4107,-0.4015,-0.3924,-0.3831,-0.3739,-0.3646,-0.3553,-0.3459,-0.3365,-0.3271,-0.3176,-0.3081,-0.2986,-0.289,-0.2794,-0.2698,-0.2602,-0.2505,-0.2408,-0.2311,-0.2213,-0.2116,-0.2018,-0.192,-0.1822,-0.1723,-0.1625,-0.1526,-0.1427,-0.1328,-0.1229,-0.1129,-0.103,-0.0931,-0.0831,-0.0731,-0.0631,-0.0532,-0.0432,-0.0332,-0.0232,-0.0132,


const PROGMEM float lookup[] = {
  
0.0,0.0947,0.1895,0.2842,0.3789,0.4737,0.5684,0.6632,0.7579,0.8526,0.9474,1.0421,1.1368,1.2316,1.3263,1.4211,1.5158,1.6105,1.7053,1.8,1.8857,1.9714,2.0571,2.1429,2.2286,2.3143,2.4,2.4857,2.5714,2.6571,2.7429,2.8286,2.9143,3.0,3.0857,3.1714,3.2571,3.3429,3.4286,3.5143,3.6,3.6857,3.7714,3.8571,3.9429,4.0286,4.1143,4.2,4.2857,4.3714,4.4571,4.5429,4.6286,4.7143,4.8,4.8857,4.9714,5.0571,5.1429,5.2286,5.3143,5.4,5.49,5.58,5.67,5.76,5.85,5.94,6.03,6.12,6.21,6.3,6.39,6.48,6.57,6.66,6.75,6.84,6.93,7.02,7.11,7.2,7.29,7.38,7.47,7.56,7.65,7.74,7.83,7.92,8.01,8.1,8.19,8.28,8.37,8.46,8.55,8.64,8.73,8.82,8.91,9.0,9.09,9.18,9.27,9.36,9.45,9.54,9.63,9.72,9.81,9.9,9.99,10.08,10.17,10.26,10.35,10.44,10.53,10.62,10.71,10.8,10.8857,10.9714,11.0571,11.1429,11.2286,11.3143,11.4,11.4857,11.5714,11.6571,11.7429,11.8286,11.9143,12.0,12.0857,12.1714,12.2571,12.3429,12.4286,12.5143,12.6,12.69,12.78,12.87,12.96,13.05,13.14,13.23,13.32,13.41,13.5,13.59,13.68,13.77,13.86,13.95,14.04,14.13,14.22,14.31,14.4,14.49,14.58,14.67,14.76,14.85,14.94,15.03,15.12,15.21,15.3,15.39,15.48,15.57,15.66,15.75,15.84,15.93,16.02,16.11,16.2,16.2857,16.3714,16.4571,16.5429,16.6286,16.7143,16.8,16.8857,16.9714,17.0571,17.1429,17.2286,17.3143,17.4,17.4857,17.5714,17.6571,17.7429,17.8286,17.9143,18.0,18.09,18.18,18.27,18.36,18.45,18.54,18.63,18.72,18.81,18.9,18.99,19.08,19.17,19.26,19.35,19.44,19.53,19.62,19.71,19.8,19.8857,19.9714,20.0571,20.1429,20.2286,20.3143,20.4,20.4857,20.5714,20.6571,20.7429,20.8286,20.9143,21.0,21.0857,21.1714,21.2571,21.3429,21.4286,21.5143,21.6,21.6947,21.7895,21.8842,21.9789,22.0737,22.1684,22.2632,22.3579,22.4526,22.5474,22.6421,22.7368,22.8316,22.9263,23.0211,23.1158,23.2105,23.3053,23.4,23.49,23.58,23.67,23.76,23.85,23.94,24.03,24.12,24.21,24.3,24.39,24.48,24.57,24.66,24.75,24.84,24.93,25.02,25.11,25.2,25.2818,25.3636,25.4455,25.5273,25.6091,25.6909,25.7727,25.8545,25.9364,26.0182,26.1,26.1818,26.2636,26.3455,26.4273,26.5091,26.5909,26.6727,26.7545,26.8364,26.9182,27.0,27.09,27.18,27.27,27.36,27.45,27.54,27.63,27.72,27.81,27.9,27.99,28.08,28.17,28.26,28.35,28.44,28.53,28.62,28.71,28.8,28.8947,28.9895,29.0842,29.1789,29.2737,29.3684,29.4632,29.5579,29.6526,29.7474,29.8421,29.9368,30.0316,30.1263,30.2211,30.3158,30.4105,30.5053,30.6,30.6857,30.7714,30.8571,30.9429,31.0286,31.1143,31.2,31.2857,31.3714,31.4571,31.5429,31.6286,31.7143,31.8,31.8857,31.9714,32.0571,32.1429,32.2286,32.3143,32.4,32.4857,32.5714,32.6571,32.7429,32.8286,32.9143,33.0,33.0857,33.1714,33.2571,33.3429,33.4286,33.5143,33.6,33.6857,33.7714,33.8571,33.9429,34.0286,34.1143,34.2,34.2857,34.3714,34.4571,34.5429,34.6286,34.7143,34.8,34.8857,34.9714,35.0571,35.1429,35.2286,35.3143,35.4,35.4857,35.5714,35.6571,35.7429,35.8286,35.9143,36.0,36.0947,36.1895,36.2842,36.3789,36.4737,36.5684,36.6632,36.7579,36.8526,36.9474,37.0421,37.1368,37.2316,37.3263,37.4211,37.5158,37.6105,37.7053,37.8,37.89,37.98,38.07,38.16,38.25,38.34,38.43,38.52,38.61,38.7,38.79,38.88,38.97,39.06,39.15,39.24,39.33,39.42,39.51,39.6,39.6818,39.7636,39.8455,39.9273,40.0091,40.0909,40.1727,40.2545,40.3364,40.4182,40.5,40.5818,40.6636,40.7455,40.8273,40.9091,40.9909,41.0727,41.1545,41.2364,41.3182,41.4,41.49,41.58,41.67,41.76,41.85,41.94,42.03,42.12,42.21,42.3,42.39,42.48,42.57,42.66,42.75,42.84,42.93,43.02,43.11,43.2,43.29,43.38,43.47,43.56,43.65,43.74,43.83,43.92,44.01,44.1,44.19,44.28,44.37,44.46,44.55,44.64,44.73,44.82,44.91,45.0,45.0947,45.1895,45.2842,45.3789,45.4737,45.5684,45.6632,45.7579,45.8526,45.9474,46.0421,46.1368,46.2316,46.3263,46.4211,46.5158,46.6105,46.7053,46.8,46.8818,46.9636,47.0455,47.1273,47.2091,47.2909,47.3727,47.4545,47.5364,47.6182,47.7,47.7818,47.8636,47.9455,48.0273,48.1091,48.1909,48.2727,48.3545,48.4364,48.5182,48.6,48.69,48.78,48.87,48.96,49.05,49.14,49.23,49.32,49.41,49.5,49.59,49.68,49.77,49.86,49.95,50.04,50.13,50.22,50.31,50.4,50.4947,50.5895,50.6842,50.7789,50.8737,50.9684,51.0632,51.1579,51.2526,51.3474,51.4421,51.5368,51.6316,51.7263,51.8211,51.9158,52.0105,52.1053,52.2,52.2857,52.3714,52.4571,52.5429,52.6286,52.7143,52.8,52.8857,52.9714,53.0571,53.1429,53.2286,53.3143,53.4,53.4857,53.5714,53.6571,53.7429,53.8286,53.9143,54.0,54.0857,54.1714,54.2571,54.3429,54.4286,54.5143,54.6,54.6857,54.7714,54.8571,54.9429,55.0286,55.1143,55.2,55.2857,55.3714,55.4571,55.5429,55.6286,55.7143,55.8,55.8857,55.9714,56.0571,56.1429,56.2286,56.3143,56.4,56.4857,56.5714,56.6571,56.7429,56.8286,56.9143,57.0,57.0857,57.1714,57.2571,57.3429,57.4286,57.5143,57.6,57.6947,57.7895,57.8842,57.9789,58.0737,58.1684,58.2632,58.3579,58.4526,58.5474,58.6421,58.7368,58.8316,58.9263,59.0211,59.1158,59.2105,59.3053,59.4,59.4947,59.5895,59.6842,59.7789,59.8737,59.9684,60.0632,60.1579,60.2526,60.3474,60.4421,60.5368,60.6316,60.7263,60.8211,60.9158,61.0105,61.1053,61.2,61.2783,61.3565,61.4348,61.513,61.5913,61.6696,61.7478,61.8261,61.9043,61.9826,62.0609,62.1391,62.2174,62.2957,62.3739,62.4522,62.5304,62.6087,62.687,62.7652,62.8435,62.9217,63.0,63.09,63.18,63.27,63.36,63.45,63.54,63.63,63.72,63.81,63.9,63.99,64.08,64.17,64.26,64.35,64.44,64.53,64.62,64.71,64.8,64.8947,64.9895,65.0842,65.1789,65.2737,65.3684,65.4632,65.5579,65.6526,65.7474,65.8421,65.9368,66.0316,66.1263,66.2211,66.3158,66.4105,66.5053,66.6,66.69,66.78,66.87,66.96,67.05,67.14,67.23,67.32,67.41,67.5,67.59,67.68,67.77,67.86,67.95,68.04,68.13,68.22,68.31,68.4,68.4857,68.5714,68.6571,68.7429,68.8286,68.9143,69.0,69.0857,69.1714,69.2571,69.3429,69.4286,69.5143,69.6,69.6857,69.7714,69.8571,69.9429,70.0286,70.1143,70.2,70.2857,70.3714,70.4571,70.5429,70.6286,70.7143,70.8,70.8857,70.9714,71.0571,71.1429,71.2286,71.3143,71.4,71.4857,71.5714,71.6571,71.7429,71.8286,71.9143,72.0,72.0947,72.1895,72.2842,72.3789,72.4737,72.5684,72.6632,72.7579,72.8526,72.9474,73.0421,73.1368,73.2316,73.3263,73.4211,73.5158,73.6105,73.7053,73.8,73.89,73.98,74.07,74.16,74.25,74.34,74.43,74.52,74.61,74.7,74.79,74.88,74.97,75.06,75.15,75.24,75.33,75.42,75.51,75.6,75.6818,75.7636,75.8455,75.9273,76.0091,76.0909,76.1727,76.2545,76.3364,76.4182,76.5,76.5818,76.6636,76.7455,76.8273,76.9091,76.9909,77.0727,77.1545,77.2364,77.3182,77.4,77.4857,77.5714,77.6571,77.7429,77.8286,77.9143,78.0,78.0857,78.1714,78.2571,78.3429,78.4286,78.5143,78.6,78.6857,78.7714,78.8571,78.9429,79.0286,79.1143,79.2,79.2947,79.3895,79.4842,79.5789,79.6737,79.7684,79.8632,79.9579,80.0526,80.1474,80.2421,80.3368,80.4316,80.5263,80.6211,80.7158,80.8105,80.9053,81.0,81.0947,81.1895,81.2842,81.3789,81.4737,81.5684,81.6632,81.7579,81.8526,81.9474,82.0421,82.1368,82.2316,82.3263,82.4211,82.5158,82.6105,82.7053,82.8,82.8818,82.9636,83.0455,83.1273,83.2091,83.2909,83.3727,83.4545,83.5364,83.6182,83.7,83.7818,83.8636,83.9455,84.0273,84.1091,84.1909,84.2727,84.3545,84.4364,84.5182,84.6,84.6857,84.7714,84.8571,84.9429,85.0286,85.1143,85.2,85.2857,85.3714,85.4571,85.5429,85.6286,85.7143,85.8,85.8857,85.9714,86.0571,86.1429,86.2286,86.3143,86.4,86.4947,86.5895,86.6842,86.7789,86.8737,86.9684,87.0632,87.1579,87.2526,87.3474,87.4421,87.5368,87.6316,87.7263,87.8211,87.9158,88.0105,88.1053,88.2,88.2947,88.3895,88.4842,88.5789,88.6737,88.7684,88.8632,88.9579,89.0526,89.1474,89.2421,89.3368,89.4316,89.5263,89.6211,89.7158,89.8105,89.9053,90.0,90.0818,90.1636,90.2455,90.3273,90.4091,90.4909,90.5727,90.6545,90.7364,90.8182,90.9,90.9818,91.0636,91.1455,91.2273,91.3091,91.3909,91.4727,91.5545,91.6364,91.7182,91.8,91.8857,91.9714,92.0571,92.1429,92.2286,92.3143,92.4,92.4857,92.5714,92.6571,92.7429,92.8286,92.9143,93.0,93.0857,93.1714,93.2571,93.3429,93.4286,93.5143,93.6,93.69,93.78,93.87,93.96,94.05,94.14,94.23,94.32,94.41,94.5,94.59,94.68,94.77,94.86,94.95,95.04,95.13,95.22,95.31,95.4,95.4947,95.5895,95.6842,95.7789,95.8737,95.9684,96.0632,96.1579,96.2526,96.3474,96.4421,96.5368,96.6316,96.7263,96.8211,96.9158,97.0105,97.1053,97.2,97.2857,97.3714,97.4571,97.5429,97.6286,97.7143,97.8,97.8857,97.9714,98.0571,98.1429,98.2286,98.3143,98.4,98.4857,98.5714,98.6571,98.7429,98.8286,98.9143,99.0,99.0818,99.1636,99.2455,99.3273,99.4091,99.4909,99.5727,99.6545,99.7364,99.8182,99.9,99.9818,100.0636,100.1455,100.2273,100.3091,100.3909,100.4727,100.5545,100.6364,100.7182,100.8,100.89,100.98,101.07,101.16,101.25,101.34,101.43,101.52,101.61,101.7,101.79,101.88,101.97,102.06,102.15,102.24,102.33,102.42,102.51,102.6,102.6947,102.7895,102.8842,102.9789,103.0737,103.1684,103.2632,103.3579,103.4526,103.5474,103.6421,103.7368,103.8316,103.9263,104.0211,104.1158,104.2105,104.3053,104.4,104.49,104.58,104.67,104.76,104.85,104.94,105.03,105.12,105.21,105.3,105.39,105.48,105.57,105.66,105.75,105.84,105.93,106.02,106.11,106.2,106.2783,106.3565,106.4348,106.513,106.5913,106.6696,106.7478,106.8261,106.9043,106.9826,107.0609,107.1391,107.2174,107.2957,107.3739,107.4522,107.5304,107.6087,107.687,107.7652,107.8435,107.9217,108.0,108.0947,108.1895,108.2842,108.3789,108.4737,108.5684,108.6632,108.7579,108.8526,108.9474,109.0421,109.1368,109.2316,109.3263,109.4211,109.5158,109.6105,109.7053,109.8,109.8947,109.9895,110.0842,110.1789,110.2737,110.3684,110.4632,110.5579,110.6526,110.7474,110.8421,110.9368,111.0316,111.1263,111.2211,111.3158,111.4105,111.5053,111.6,111.6818,111.7636,111.8455,111.9273,112.0091,112.0909,112.1727,112.2545,112.3364,112.4182,112.5,112.5818,112.6636,112.7455,112.8273,112.9091,112.9909,113.0727,113.1545,113.2364,113.3182,113.4,113.4857,113.5714,113.6571,113.7429,113.8286,113.9143,114.0,114.0857,114.1714,114.2571,114.3429,114.4286,114.5143,114.6,114.6857,114.7714,114.8571,114.9429,115.0286,115.1143,115.2,115.29,115.38,115.47,115.56,115.65,115.74,115.83,115.92,116.01,116.1,116.19,116.28,116.37,116.46,116.55,116.64,116.73,116.82,116.91,117.0,117.0947,117.1895,117.2842,117.3789,117.4737,117.5684,117.6632,117.7579,117.8526,117.9474,118.0421,118.1368,118.2316,118.3263,118.4211,118.5158,118.6105,118.7053,118.8,118.8857,118.9714,119.0571,119.1429,119.2286,119.3143,119.4,119.4857,119.5714,119.6571,119.7429,119.8286,119.9143,120.0,120.0857,120.1714,120.2571,120.3429,120.4286,120.5143,120.6,120.6818,120.7636,120.8455,120.9273,121.0091,121.0909,121.1727,121.2545,121.3364,121.4182,121.5,121.5818,121.6636,121.7455,121.8273,121.9091,121.9909,122.0727,122.1545,122.2364,122.3182,122.4,122.49,122.58,122.67,122.76,122.85,122.94,123.03,123.12,123.21,123.3,123.39,123.48,123.57,123.66,123.75,123.84,123.93,124.02,124.11,124.2,124.2947,124.3895,124.4842,124.5789,124.6737,124.7684,124.8632,124.9579,125.0526,125.1474,125.2421,125.3368,125.4316,125.5263,125.6211,125.7158,125.8105,125.9053,126.0,126.0857,126.1714,126.2571,126.3429,126.4286,126.5143,126.6,126.6857,126.7714,126.8571,126.9429,127.0286,127.1143,127.2,127.2857,127.3714,127.4571,127.5429,127.6286,127.7143,127.8,127.8818,127.9636,128.0455,128.1273,128.2091,128.2909,128.3727,128.4545,128.5364,128.6182,128.7,128.7818,128.8636,128.9455,129.0273,129.1091,129.1909,129.2727,129.3545,129.4364,129.5182,129.6,129.69,129.78,129.87,129.96,130.05,130.14,130.23,130.32,130.41,130.5,130.59,130.68,130.77,130.86,130.95,131.04,131.13,131.22,131.31,131.4,131.49,131.58,131.67,131.76,131.85,131.94,132.03,132.12,132.21,132.3,132.39,132.48,132.57,132.66,132.75,132.84,132.93,133.02,133.11,133.2,133.2947,133.3895,133.4842,133.5789,133.6737,133.7684,133.8632,133.9579,134.0526,134.1474,134.2421,134.3368,134.4316,134.5263,134.6211,134.7158,134.8105,134.9053,135.0,135.0783,135.1565,135.2348,135.313,135.3913,135.4696,135.5478,135.6261,135.7043,135.7826,135.8609,135.9391,136.0174,136.0957,136.1739,136.2522,136.3304,136.4087,136.487,136.5652,136.6435,136.7217,136.8,136.89,136.98,137.07,137.16,137.25,137.34,137.43,137.52,137.61,137.7,137.79,137.88,137.97,138.06,138.15,138.24,138.33,138.42,138.51,138.6,138.69,138.78,138.87,138.96,139.05,139.14,139.23,139.32,139.41,139.5,139.59,139.68,139.77,139.86,139.95,140.04,140.13,140.22,140.31,140.4,140.49,140.58,140.67,140.76,140.85,140.94,141.03,141.12,141.21,141.3,141.39,141.48,141.57,141.66,141.75,141.84,141.93,142.02,142.11,142.2,142.2857,142.3714,142.4571,142.5429,142.6286,142.7143,142.8,142.8857,142.9714,143.0571,143.1429,143.2286,143.3143,143.4,143.4857,143.5714,143.6571,143.7429,143.8286,143.9143,144.0,144.0857,144.1714,144.2571,144.3429,144.4286,144.5143,144.6,144.6857,144.7714,144.8571,144.9429,145.0286,145.1143,145.2,145.2857,145.3714,145.4571,145.5429,145.6286,145.7143,145.8,145.8947,145.9895,146.0842,146.1789,146.2737,146.3684,146.4632,146.5579,146.6526,146.7474,146.8421,146.9368,147.0316,147.1263,147.2211,147.3158,147.4105,147.5053,147.6,147.6857,147.7714,147.8571,147.9429,148.0286,148.1143,148.2,148.2857,148.3714,148.4571,148.5429,148.6286,148.7143,148.8,148.8857,148.9714,149.0571,149.1429,149.2286,149.3143,149.4,149.4857,149.5714,149.6571,149.7429,149.8286,149.9143,150.0,150.0857,150.1714,150.2571,150.3429,150.4286,150.5143,150.6,150.6857,150.7714,150.8571,150.9429,151.0286,151.1143,151.2,151.2857,151.3714,151.4571,151.5429,151.6286,151.7143,151.8,151.8857,151.9714,152.0571,152.1429,152.2286,152.3143,152.4,152.4857,152.5714,152.6571,152.7429,152.8286,152.9143,153.0,153.0947,153.1895,153.2842,153.3789,153.4737,153.5684,153.6632,153.7579,153.8526,153.9474,154.0421,154.1368,154.2316,154.3263,154.4211,154.5158,154.6105,154.7053,154.8,154.89,154.98,155.07,155.16,155.25,155.34,155.43,155.52,155.61,155.7,155.79,155.88,155.97,156.06,156.15,156.24,156.33,156.42,156.51,156.6,156.6818,156.7636,156.8455,156.9273,157.0091,157.0909,157.1727,157.2545,157.3364,157.4182,157.5,157.5818,157.6636,157.7455,157.8273,157.9091,157.9909,158.0727,158.1545,158.2364,158.3182,158.4,158.49,158.58,158.67,158.76,158.85,158.94,159.03,159.12,159.21,159.3,159.39,159.48,159.57,159.66,159.75,159.84,159.93,160.02,160.11,160.2,160.29,160.38,160.47,160.56,160.65,160.74,160.83,160.92,161.01,161.1,161.19,161.28,161.37,161.46,161.55,161.64,161.73,161.82,161.91,162.0,162.0857,162.1714,162.2571,162.3429,162.4286,162.5143,162.6,162.6857,162.7714,162.8571,162.9429,163.0286,163.1143,163.2,163.2857,163.3714,163.4571,163.5429,163.6286,163.7143,163.8,163.8857,163.9714,164.0571,164.1429,164.2286,164.3143,164.4,164.4857,164.5714,164.6571,164.7429,164.8286,164.9143,165.0,165.0857,165.1714,165.2571,165.3429,165.4286,165.5143,165.6,165.69,165.78,165.87,165.96,166.05,166.14,166.23,166.32,166.41,166.5,166.59,166.68,166.77,166.86,166.95,167.04,167.13,167.22,167.31,167.4,167.4857,167.5714,167.6571,167.7429,167.8286,167.9143,168.0,168.0857,168.1714,168.2571,168.3429,168.4286,168.5143,168.6,168.6857,168.7714,168.8571,168.9429,169.0286,169.1143,169.2,169.29,169.38,169.47,169.56,169.65,169.74,169.83,169.92,170.01,170.1,170.19,170.28,170.37,170.46,170.55,170.64,170.73,170.82,170.91,171.0,171.0857,171.1714,171.2571,171.3429,171.4286,171.5143,171.6,171.6857,171.7714,171.8571,171.9429,172.0286,172.1143,172.2,172.2857,172.3714,172.4571,172.5429,172.6286,172.7143,172.8,172.89,172.98,173.07,173.16,173.25,173.34,173.43,173.52,173.61,173.7,173.79,173.88,173.97,174.06,174.15,174.24,174.33,174.42,174.51,174.6,174.6857,174.7714,174.8571,174.9429,175.0286,175.1143,175.2,175.2857,175.3714,175.4571,175.5429,175.6286,175.7143,175.8,175.8857,175.9714,176.0571,176.1429,176.2286,176.3143,176.4,176.49,176.58,176.67,176.76,176.85,176.94,177.03,177.12,177.21,177.3,177.39,177.48,177.57,177.66,177.75,177.84,177.93,178.02,178.11,178.2,178.2857,178.3714,178.4571,178.5429,178.6286,178.7143,178.8,178.8857,178.9714,179.0571,179.1429,179.2286,179.3143,179.4,179.4857,179.5714,179.6571,179.7429,179.8286,179.9143,180.0,180.09,180.18,180.27,180.36,180.45,180.54,180.63,180.72,180.81,180.9,180.99,181.08,181.17,181.26,181.35,181.44,181.53,181.62,181.71,181.8,181.89,181.98,182.07,182.16,182.25,182.34,182.43,182.52,182.61,182.7,182.79,182.88,182.97,183.06,183.15,183.24,183.33,183.42,183.51,183.6,183.6818,183.7636,183.8455,183.9273,184.0091,184.0909,184.1727,184.2545,184.3364,184.4182,184.5,184.5818,184.6636,184.7455,184.8273,184.9091,184.9909,185.0727,185.1545,185.2364,185.3182,185.4,185.49,185.58,185.67,185.76,185.85,185.94,186.03,186.12,186.21,186.3,186.39,186.48,186.57,186.66,186.75,186.84,186.93,187.02,187.11,187.2,187.2947,187.3895,187.4842,187.5789,187.6737,187.7684,187.8632,187.9579,188.0526,188.1474,188.2421,188.3368,188.4316,188.5263,188.6211,188.7158,188.8105,188.9053,189.0,189.0818,189.1636,189.2455,189.3273,189.4091,189.4909,189.5727,189.6545,189.7364,189.8182,189.9,189.9818,190.0636,190.1455,190.2273,190.3091,190.3909,190.4727,190.5545,190.6364,190.7182,190.8,190.8857,190.9714,191.0571,191.1429,191.2286,191.3143,191.4,191.4857,191.5714,191.6571,191.7429,191.8286,191.9143,192.0,192.0857,192.1714,192.2571,192.3429,192.4286,192.5143,192.6,192.69,192.78,192.87,192.96,193.05,193.14,193.23,193.32,193.41,193.5,193.59,193.68,193.77,193.86,193.95,194.04,194.13,194.22,194.31,194.4,194.4947,194.5895,194.6842,194.7789,194.8737,194.9684,195.0632,195.1579,195.2526,195.3474,195.4421,195.5368,195.6316,195.7263,195.8211,195.9158,196.0105,196.1053,196.2,196.2857,196.3714,196.4571,196.5429,196.6286,196.7143,196.8,196.8857,196.9714,197.0571,197.1429,197.2286,197.3143,197.4,197.4857,197.5714,197.6571,197.7429,197.8286,197.9143,198.0,198.0857,198.1714,198.2571,198.3429,198.4286,198.5143,198.6,198.6857,198.7714,198.8571,198.9429,199.0286,199.1143,199.2,199.2857,199.3714,199.4571,199.5429,199.6286,199.7143,199.8,199.89,199.98,200.07,200.16,200.25,200.34,200.43,200.52,200.61,200.7,200.79,200.88,200.97,201.06,201.15,201.24,201.33,201.42,201.51,201.6,201.69,201.78,201.87,201.96,202.05,202.14,202.23,202.32,202.41,202.5,202.59,202.68,202.77,202.86,202.95,203.04,203.13,203.22,203.31,203.4,203.4857,203.5714,203.6571,203.7429,203.8286,203.9143,204.0,204.0857,204.1714,204.2571,204.3429,204.4286,204.5143,204.6,204.6857,204.7714,204.8571,204.9429,205.0286,205.1143,205.2,205.2857,205.3714,205.4571,205.5429,205.6286,205.7143,205.8,205.8857,205.9714,206.0571,206.1429,206.2286,206.3143,206.4,206.4857,206.5714,206.6571,206.7429,206.8286,206.9143,207.0,207.09,207.18,207.27,207.36,207.45,207.54,207.63,207.72,207.81,207.9,207.99,208.08,208.17,208.26,208.35,208.44,208.53,208.62,208.71,208.8,208.89,208.98,209.07,209.16,209.25,209.34,209.43,209.52,209.61,209.7,209.79,209.88,209.97,210.06,210.15,210.24,210.33,210.42,210.51,210.6,210.6857,210.7714,210.8571,210.9429,211.0286,211.1143,211.2,211.2857,211.3714,211.4571,211.5429,211.6286,211.7143,211.8,211.8857,211.9714,212.0571,212.1429,212.2286,212.3143,212.4,212.4857,212.5714,212.6571,212.7429,212.8286,212.9143,213.0,213.0857,213.1714,213.2571,213.3429,213.4286,213.5143,213.6,213.6857,213.7714,213.8571,213.9429,214.0286,214.1143,214.2,214.29,214.38,214.47,214.56,214.65,214.74,214.83,214.92,215.01,215.1,215.19,215.28,215.37,215.46,215.55,215.64,215.73,215.82,215.91,216.0,216.0947,216.1895,216.2842,216.3789,216.4737,216.5684,216.6632,216.7579,216.8526,216.9474,217.0421,217.1368,217.2316,217.3263,217.4211,217.5158,217.6105,217.7053,217.8,217.8857,217.9714,218.0571,218.1429,218.2286,218.3143,218.4,218.4857,218.5714,218.6571,218.7429,218.8286,218.9143,219.0,219.0857,219.1714,219.2571,219.3429,219.4286,219.5143,219.6,219.6818,219.7636,219.8455,219.9273,220.0091,220.0909,220.1727,220.2545,220.3364,220.4182,220.5,220.5818,220.6636,220.7455,220.8273,220.9091,220.9909,221.0727,221.1545,221.2364,221.3182,221.4,221.49,221.58,221.67,221.76,221.85,221.94,222.03,222.12,222.21,222.3,222.39,222.48,222.57,222.66,222.75,222.84,222.93,223.02,223.11,223.2,223.2947,223.3895,223.4842,223.5789,223.6737,223.7684,223.8632,223.9579,224.0526,224.1474,224.2421,224.3368,224.4316,224.5263,224.6211,224.7158,224.8105,224.9053,225.0,225.09,225.18,225.27,225.36,225.45,225.54,225.63,225.72,225.81,225.9,225.99,226.08,226.17,226.26,226.35,226.44,226.53,226.62,226.71,226.8,226.8818,226.9636,227.0455,227.1273,227.2091,227.2909,227.3727,227.4545,227.5364,227.6182,227.7,227.7818,227.8636,227.9455,228.0273,228.1091,228.1909,228.2727,228.3545,228.4364,228.5182,228.6,228.6857,228.7714,228.8571,228.9429,229.0286,229.1143,229.2,229.2857,229.3714,229.4571,229.5429,229.6286,229.7143,229.8,229.8857,229.9714,230.0571,230.1429,230.2286,230.3143,230.4,230.4947,230.5895,230.6842,230.7789,230.8737,230.9684,231.0632,231.1579,231.2526,231.3474,231.4421,231.5368,231.6316,231.7263,231.8211,231.9158,232.0105,232.1053,232.2,232.29,232.38,232.47,232.56,232.65,232.74,232.83,232.92,233.01,233.1,233.19,233.28,233.37,233.46,233.55,233.64,233.73,233.82,233.91,234.0,234.0818,234.1636,234.2455,234.3273,234.4091,234.4909,234.5727,234.6545,234.7364,234.8182,234.9,234.9818,235.0636,235.1455,235.2273,235.3091,235.3909,235.4727,235.5545,235.6364,235.7182,235.8,235.8857,235.9714,236.0571,236.1429,236.2286,236.3143,236.4,236.4857,236.5714,236.6571,236.7429,236.8286,236.9143,237.0,237.0857,237.1714,237.2571,237.3429,237.4286,237.5143,237.6,237.69,237.78,237.87,237.96,238.05,238.14,238.23,238.32,238.41,238.5,238.59,238.68,238.77,238.86,238.95,239.04,239.13,239.22,239.31,239.4,239.4947,239.5895,239.6842,239.7789,239.8737,239.9684,240.0632,240.1579,240.2526,240.3474,240.4421,240.5368,240.6316,240.7263,240.8211,240.9158,241.0105,241.1053,241.2,241.2818,241.3636,241.4455,241.5273,241.6091,241.6909,241.7727,241.8545,241.9364,242.0182,242.1,242.1818,242.2636,242.3455,242.4273,242.5091,242.5909,242.6727,242.7545,242.8364,242.9182,243.0,243.0857,243.1714,243.2571,243.3429,243.4286,243.5143,243.6,243.6857,243.7714,243.8571,243.9429,244.0286,244.1143,244.2,244.2857,244.3714,244.4571,244.5429,244.6286,244.7143,244.8,244.8947,244.9895,245.0842,245.1789,245.2737,245.3684,245.4632,245.5579,245.6526,245.7474,245.8421,245.9368,246.0316,246.1263,246.2211,246.3158,246.4105,246.5053,246.6,246.69,246.78,246.87,246.96,247.05,247.14,247.23,247.32,247.41,247.5,247.59,247.68,247.77,247.86,247.95,248.04,248.13,248.22,248.31,248.4,248.4818,248.5636,248.6455,248.7273,248.8091,248.8909,248.9727,249.0545,249.1364,249.2182,249.3,249.3818,249.4636,249.5455,249.6273,249.7091,249.7909,249.8727,249.9545,250.0364,250.1182,250.2,250.2857,250.3714,250.4571,250.5429,250.6286,250.7143,250.8,250.8857,250.9714,251.0571,251.1429,251.2286,251.3143,251.4,251.4857,251.5714,251.6571,251.7429,251.8286,251.9143,252.0,252.09,252.18,252.27,252.36,252.45,252.54,252.63,252.72,252.81,252.9,252.99,253.08,253.17,253.26,253.35,253.44,253.53,253.62,253.71,253.8,253.8947,253.9895,254.0842,254.1789,254.2737,254.3684,254.4632,254.5579,254.6526,254.7474,254.8421,254.9368,255.0316,255.1263,255.2211,255.3158,255.4105,255.5053,255.6,255.6783,255.7565,255.8348,255.913,255.9913,256.0696,256.1478,256.2261,256.3043,256.3826,256.4609,256.5391,256.6174,256.6957,256.7739,256.8522,256.9304,257.0087,257.087,257.1652,257.2435,257.3217,257.4,257.4857,257.5714,257.6571,257.7429,257.8286,257.9143,258.0,258.0857,258.1714,258.2571,258.3429,258.4286,258.5143,258.6,258.6857,258.7714,258.8571,258.9429,259.0286,259.1143,259.2,259.2947,259.3895,259.4842,259.5789,259.6737,259.7684,259.8632,259.9579,260.0526,260.1474,260.2421,260.3368,260.4316,260.5263,260.6211,260.7158,260.8105,260.9053,261.0,261.09,261.18,261.27,261.36,261.45,261.54,261.63,261.72,261.81,261.9,261.99,262.08,262.17,262.26,262.35,262.44,262.53,262.62,262.71,262.8,262.8818,262.9636,263.0455,263.1273,263.2091,263.2909,263.3727,263.4545,263.5364,263.6182,263.7,263.7818,263.8636,263.9455,264.0273,264.1091,264.1909,264.2727,264.3545,264.4364,264.5182,264.6,264.6857,264.7714,264.8571,264.9429,265.0286,265.1143,265.2,265.2857,265.3714,265.4571,265.5429,265.6286,265.7143,265.8,265.8857,265.9714,266.0571,266.1429,266.2286,266.3143,266.4,266.4947,266.5895,266.6842,266.7789,266.8737,266.9684,267.0632,267.1579,267.2526,267.3474,267.4421,267.5368,267.6316,267.7263,267.8211,267.9158,268.0105,268.1053,268.2,268.29,268.38,268.47,268.56,268.65,268.74,268.83,268.92,269.01,269.1,269.19,269.28,269.37,269.46,269.55,269.64,269.73,269.82,269.91,270.0,270.0818,270.1636,270.2455,270.3273,270.4091,270.4909,270.5727,270.6545,270.7364,270.8182,270.9,270.9818,271.0636,271.1455,271.2273,271.3091,271.3909,271.4727,271.5545,271.6364,271.7182,271.8,271.8857,271.9714,272.0571,272.1429,272.2286,272.3143,272.4,272.4857,272.5714,272.6571,272.7429,272.8286,272.9143,273.0,273.0857,273.1714,273.2571,273.3429,273.4286,273.5143,273.6,273.6857,273.7714,273.8571,273.9429,274.0286,274.1143,274.2,274.2857,274.3714,274.4571,274.5429,274.6286,274.7143,274.8,274.8857,274.9714,275.0571,275.1429,275.2286,275.3143,275.4,275.5,275.6,275.7,275.8,275.9,276.0,276.1,276.2,276.3,276.4,276.5,276.6,276.7,276.8,276.9,277.0,277.1,277.2,277.2783,277.3565,277.4348,277.513,277.5913,277.6696,277.7478,277.8261,277.9043,277.9826,278.0609,278.1391,278.2174,278.2957,278.3739,278.4522,278.5304,278.6087,278.687,278.7652,278.8435,278.9217,279.0,279.0857,279.1714,279.2571,279.3429,279.4286,279.5143,279.6,279.6857,279.7714,279.8571,279.9429,280.0286,280.1143,280.2,280.2857,280.3714,280.4571,280.5429,280.6286,280.7143,280.8,280.8947,280.9895,281.0842,281.1789,281.2737,281.3684,281.4632,281.5579,281.6526,281.7474,281.8421,281.9368,282.0316,282.1263,282.2211,282.3158,282.4105,282.5053,282.6,282.69,282.78,282.87,282.96,283.05,283.14,283.23,283.32,283.41,283.5,283.59,283.68,283.77,283.86,283.95,284.04,284.13,284.22,284.31,284.4,284.4818,284.5636,284.6455,284.7273,284.8091,284.8909,284.9727,285.0545,285.1364,285.2182,285.3,285.3818,285.4636,285.5455,285.6273,285.7091,285.7909,285.8727,285.9545,286.0364,286.1182,286.2,286.2857,286.3714,286.4571,286.5429,286.6286,286.7143,286.8,286.8857,286.9714,287.0571,287.1429,287.2286,287.3143,287.4,287.4857,287.5714,287.6571,287.7429,287.8286,287.9143,288.0,288.09,288.18,288.27,288.36,288.45,288.54,288.63,288.72,288.81,288.9,288.99,289.08,289.17,289.26,289.35,289.44,289.53,289.62,289.71,289.8,289.89,289.98,290.07,290.16,290.25,290.34,290.43,290.52,290.61,290.7,290.79,290.88,290.97,291.06,291.15,291.24,291.33,291.42,291.51,291.6,291.6857,291.7714,291.8571,291.9429,292.0286,292.1143,292.2,292.2857,292.3714,292.4571,292.5429,292.6286,292.7143,292.8,292.8857,292.9714,293.0571,293.1429,293.2286,293.3143,293.4,293.4818,293.5636,293.6455,293.7273,293.8091,293.8909,293.9727,294.0545,294.1364,294.2182,294.3,294.3818,294.4636,294.5455,294.6273,294.7091,294.7909,294.8727,294.9545,295.0364,295.1182,295.2,295.29,295.38,295.47,295.56,295.65,295.74,295.83,295.92,296.01,296.1,296.19,296.28,296.37,296.46,296.55,296.64,296.73,296.82,296.91,297.0,297.0947,297.1895,297.2842,297.3789,297.4737,297.5684,297.6632,297.7579,297.8526,297.9474,298.0421,298.1368,298.2316,298.3263,298.4211,298.5158,298.6105,298.7053,298.8,298.8783,298.9565,299.0348,299.113,299.1913,299.2696,299.3478,299.4261,299.5043,299.5826,299.6609,299.7391,299.8174,299.8957,299.9739,300.0522,300.1304,300.2087,300.287,300.3652,300.4435,300.5217,300.6,300.6857,300.7714,300.8571,300.9429,301.0286,301.1143,301.2,301.2857,301.3714,301.4571,301.5429,301.6286,301.7143,301.8,301.8857,301.9714,302.0571,302.1429,302.2286,302.3143,302.4,302.49,302.58,302.67,302.76,302.85,302.94,303.03,303.12,303.21,303.3,303.39,303.48,303.57,303.66,303.75,303.84,303.93,304.02,304.11,304.2,304.29,304.38,304.47,304.56,304.65,304.74,304.83,304.92,305.01,305.1,305.19,305.28,305.37,305.46,305.55,305.64,305.73,305.82,305.91,306.0,306.0857,306.1714,306.2571,306.3429,306.4286,306.5143,306.6,306.6857,306.7714,306.8571,306.9429,307.0286,307.1143,307.2,307.2857,307.3714,307.4571,307.5429,307.6286,307.7143,307.8,307.8818,307.9636,308.0455,308.1273,308.2091,308.2909,308.3727,308.4545,308.5364,308.6182,308.7,308.7818,308.8636,308.9455,309.0273,309.1091,309.1909,309.2727,309.3545,309.4364,309.5182,309.6,309.69,309.78,309.87,309.96,310.05,310.14,310.23,310.32,310.41,310.5,310.59,310.68,310.77,310.86,310.95,311.04,311.13,311.22,311.31,311.4,311.4947,311.5895,311.6842,311.7789,311.8737,311.9684,312.0632,312.1579,312.2526,312.3474,312.4421,312.5368,312.6316,312.7263,312.8211,312.9158,313.0105,313.1053,313.2,313.2818,313.3636,313.4455,313.5273,313.6091,313.6909,313.7727,313.8545,313.9364,314.0182,314.1,314.1818,314.2636,314.3455,314.4273,314.5091,314.5909,314.6727,314.7545,314.8364,314.9182,315.0,315.0857,315.1714,315.2571,315.3429,315.4286,315.5143,315.6,315.6857,315.7714,315.8571,315.9429,316.0286,316.1143,316.2,316.2857,316.3714,316.4571,316.5429,316.6286,316.7143,316.8,316.8857,316.9714,317.0571,317.1429,317.2286,317.3143,317.4,317.4857,317.5714,317.6571,317.7429,317.8286,317.9143,318.0,318.0857,318.1714,318.2571,318.3429,318.4286,318.5143,318.6,318.6947,318.7895,318.8842,318.9789,319.0737,319.1684,319.2632,319.3579,319.4526,319.5474,319.6421,319.7368,319.8316,319.9263,320.0211,320.1158,320.2105,320.3053,320.4,320.4818,320.5636,320.6455,320.7273,320.8091,320.8909,320.9727,321.0545,321.1364,321.2182,321.3,321.3818,321.4636,321.5455,321.6273,321.7091,321.7909,321.8727,321.9545,322.0364,322.1182,322.2,322.2857,322.3714,322.4571,322.5429,322.6286,322.7143,322.8,322.8857,322.9714,323.0571,323.1429,323.2286,323.3143,323.4,323.4857,323.5714,323.6571,323.7429,323.8286,323.9143,324.0,324.09,324.18,324.27,324.36,324.45,324.54,324.63,324.72,324.81,324.9,324.99,325.08,325.17,325.26,325.35,325.44,325.53,325.62,325.71,325.8,325.89,325.98,326.07,326.16,326.25,326.34,326.43,326.52,326.61,326.7,326.79,326.88,326.97,327.06,327.15,327.24,327.33,327.42,327.51,327.6,327.6857,327.7714,327.8571,327.9429,328.0286,328.1143,328.2,328.2857,328.3714,328.4571,328.5429,328.6286,328.7143,328.8,328.8857,328.9714,329.0571,329.1429,329.2286,329.3143,329.4,329.4857,329.5714,329.6571,329.7429,329.8286,329.9143,330.0,330.0857,330.1714,330.2571,330.3429,330.4286,330.5143,330.6,330.6857,330.7714,330.8571,330.9429,331.0286,331.1143,331.2,331.2857,331.3714,331.4571,331.5429,331.6286,331.7143,331.8,331.8857,331.9714,332.0571,332.1429,332.2286,332.3143,332.4,332.4857,332.5714,332.6571,332.7429,332.8286,332.9143,333.0,333.09,333.18,333.27,333.36,333.45,333.54,333.63,333.72,333.81,333.9,333.99,334.08,334.17,334.26,334.35,334.44,334.53,334.62,334.71,334.8,334.8857,334.9714,335.0571,335.1429,335.2286,335.3143,335.4,335.4857,335.5714,335.6571,335.7429,335.8286,335.9143,336.0,336.0857,336.1714,336.2571,336.3429,336.4286,336.5143,336.6,336.69,336.78,336.87,336.96,337.05,337.14,337.23,337.32,337.41,337.5,337.59,337.68,337.77,337.86,337.95,338.04,338.13,338.22,338.31,338.4,338.4857,338.5714,338.6571,338.7429,338.8286,338.9143,339.0,339.0857,339.1714,339.2571,339.3429,339.4286,339.5143,339.6,339.6857,339.7714,339.8571,339.9429,340.0286,340.1143,340.2,340.29,340.38,340.47,340.56,340.65,340.74,340.83,340.92,341.01,341.1,341.19,341.28,341.37,341.46,341.55,341.64,341.73,341.82,341.91,342.0,342.0857,342.1714,342.2571,342.3429,342.4286,342.5143,342.6,342.6857,342.7714,342.8571,342.9429,343.0286,343.1143,343.2,343.2857,343.3714,343.4571,343.5429,343.6286,343.7143,343.8,343.8857,343.9714,344.0571,344.1429,344.2286,344.3143,344.4,344.4857,344.5714,344.6571,344.7429,344.8286,344.9143,345.0,345.0857,345.1714,345.2571,345.3429,345.4286,345.5143,345.6,345.69,345.78,345.87,345.96,346.05,346.14,346.23,346.32,346.41,346.5,346.59,346.68,346.77,346.86,346.95,347.04,347.13,347.22,347.31,347.4,347.49,347.58,347.67,347.76,347.85,347.94,348.03,348.12,348.21,348.3,348.39,348.48,348.57,348.66,348.75,348.84,348.93,349.02,349.11,349.2,349.2857,349.3714,349.4571,349.5429,349.6286,349.7143,349.8,349.8857,349.9714,350.0571,350.1429,350.2286,350.3143,350.4,350.4857,350.5714,350.6571,350.7429,350.8286,350.9143,351.0,351.09,351.18,351.27,351.36,351.45,351.54,351.63,351.72,351.81,351.9,351.99,352.08,352.17,352.26,352.35,352.44,352.53,352.62,352.71,352.8,352.8857,352.9714,353.0571,353.1429,353.2286,353.3143,353.4,353.4857,353.5714,353.6571,353.7429,353.8286,353.9143,354.0,354.0857,354.1714,354.2571,354.3429,354.4286,354.5143,354.6,354.69,354.78,354.87,354.96,355.05,355.14,355.23,355.32,355.41,355.5,355.59,355.68,355.77,355.86,355.95,356.04,356.13,356.22,356.31,356.4,356.4857,356.5714,356.6571,356.7429,356.8286,356.9143,357.0,357.0857,357.1714,357.2571,357.3429,357.4286,357.5143,357.6,357.6857,357.7714,357.8571,357.9429,358.0286,358.1143,
};



void setup() {
  Serial.begin(250000);
  TCCR0B = (TCCR0B & 0b11111000) | 0x01;
  
  pinMode(VREF1, OUTPUT);
  pinMode(VREF2, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(pulse, OUTPUT);
  
  
  analogWrite(VREF1, 64);  
  analogWrite(VREF2, 64);  

  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
 
  pinMode(ledPin, OUTPUT); // visual signal of I/O to chip
  pinMode(clockPin, OUTPUT); // SCK
  pinMode(CSnPin, OUTPUT); // CSn -- has to toggle high and low to signal chip to start data transfer
  pinMode(inputPin, INPUT); // SDA


  Serial.print("DDRB , ");
  Serial.println(DDRB,BIN);
  Serial.print("DDRD , ");
  Serial.println(DDRD,BIN);
 // TCCR0B = (TCCR0B & 0b11111000) | 0x02;
 
   
//   Serial.println(lookup_sine(-3140),DEC);
//   Serial.println(lookup_sine(-2360),DEC);
//   Serial.println(lookup_sine(-1570),DEC);
//   Serial.println(lookup_sine(-79),DEC);
//   Serial.println(lookup_sine(0),DEC);
//   Serial.println(lookup_sine(79),DEC);
//   Serial.println(lookup_sine(157),DEC);
//   Serial.println(lookup_sine(236),DEC);
//   Serial.println(lookup_sine(314),DEC);

  
}







void loop()
{
  while (
  Serial.available()) {

    char inChar = (char)Serial.read();
    
    if (inChar == 'p') {
      print_angle();
      delay(50);
    }
    
    else if (inChar == 's') {
      one_step();  
      print_angle();
    }
    
    else if (inChar == 'd') {
       if (dir == 1){
         dir = 0;
       }
       else {
         dir = 1;
       }
    }
    
    else if (inChar == 'c') {
       i_step = 0;
       i_w = 0;
    }
    
    else if (inChar == 'z') {
      a = readEncoder();
      anglefloat = a * 0.08789;
      while (anglefloat >= aps){//0.9)
        one_step();
        a = readEncoder();
        anglefloat = a * 0.08789;
        Serial.println(anglefloat,DEC);
      delay(10);//10);        
      }
      delay(100);
      offset = readEncoder();
      zero_state = step_state;
      Serial.println(zero_state,DEC);
     }
     else if (inChar == 'g') {
       for(int x = 0; x < spr; x++){
        one_step();
        a = readEncoder();
        anglefloat = a * 0.08789;
        //Serial.print(i_step,DEC);
        //Serial.print(" , ");
        //Serial.print(i_step*0.9,DEC);
        //Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        Serial.println(anglefloat, DEC);
       }
     } 
     
     else if (inChar == 'w') {
       for(int x = 0; x < spr; x++){
        a = readEncoder();
        
        i_w = 2*x;
        EEPROM.put(i_w,a);
        one_step();
        anglefloat = a * 0.08789;
        //Serial.print(i_step,DEC);
        //Serial.print(" , ");
        //Serial.print(i_step*0.9,DEC);
        //Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        Serial.println(anglefloat, DEC);
       delay(100);
       }
     }    
      else if (inChar == 'r') {
       for(int x = 0; x < spr; x++){
        i_r = 2*x;
       
        EEPROM.get(i_r,a);
        
        //anglefloat = a * 0.08789;
        //Serial.print(i_step,DEC);
        //Serial.print(" , ");
        //Serial.print(i_step*0.9,DEC);
        //Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        //Serial.println(anglefloat, DEC);
        Serial.println(a, DEC);
       }
     }
     
     
  else if (inChar == 'a')  {
     Serial.println("Enter angle:");      //Prompt User for input
     while (Serial.available()==0)  {     //Wait for new angle
    }   
     update_angle();
    }
  else if (inChar == 'l') {
     Serial.println("Enter encoder count:");      //Prompt User for input
     while (Serial.available()==0)  {     //Wait for new angle
    }   
     a=Serial.parseFloat();
     angle_out= lookup_angle(a);
     Serial.println(angle_out,DEC);
    }
  else if (inChar == 'f') {
  follow();
  }
  
  
  else if (inChar == 'x')  {
     Serial.println("Enter angle:");      //Prompt User for input
     while (Serial.available()==0)  {     //Wait for new angle
    }   
     setpoint();
    }
  
  }
    
       
     
     
}





float lookup_angle(int n)
{
   float a_out; 
   a_out = pgm_read_float_near(lookup+n);
  //Serial.println(angle_out,DEC);
    return a_out;
}

//float lookup_sine(int m)
//{
//   float b_out; 
//   
//    m = (((m% 628)+628)%628);
//   
//   if (m>314){
//   m =m-314;
//     b_out = -pgm_read_float_near(sine_lookup+m);
//  
//   }
//   else
//   {
//   b_out = pgm_read_float_near(sine_lookup+m);
//   }
//  //Serial.println(angle_out,DEC);
//    return b_out;
//}



//_____________________________________________________________________________


void follow()
{
  while (1) {
       a = readEncoder();
       current_angle= lookup_angle(a);
      
       digitalWrite(pulse, !digitalRead(pulse));
      
      val1 = 100*sin( ((spr/4.0)*(current_angle*pi)/180) + .45+((pi/4)*(3+ 2*zero_state)));
      analogWrite(VREF1, abs(val1));
      
      if (val1 >= 0)  {
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2,LOW);
      }
      else  {
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
      }
      val2 = 100*sin( ((spr/4.0)*(current_angle*pi)/180) + .45+(((pi/4)*(1+ 2*zero_state))));
      analogWrite(VREF2, abs(val2));  
      
      if (val2 >= 0)  {
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4,LOW);
      }
      else  {
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
      }
      
      
      //delay(1);
      Serial.print(current_angle);
      Serial.print(" , ");
      Serial.print(val1,DEC);
      Serial.print(" , ");
      Serial.println(val2,DEC);
    }

}



//_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________




void update_angle()
{
  int start =0;
  int finish = 0;
  static int U = 0;
  new_angle=Serial.parseFloat();     
  diff_angle =(new_angle-current_angle);

    
  if (abs(diff_angle) > 0.05)  {
    while (1) {//(abs(diff_angle) >= 0.05)  
      start=micros();
      a = readEncoder();
      finish = micros();
      current_angle = lookup_angle(a);
      
      //Serial.println(current_angle,DEC);
     // Serial.print(" , ");
      
      if (diff_angle>0){
        current_angle +=0.4;
      }
      else{
        current_angle -=0.6;
      }
              
      //Serial.print(current_angle,DEC);
      //Serial.print(" , ");
      //Serial.println(lookup_angle(a),DEC);
      //Serial.println(current_angle,DEC);
      
        U =abs(kp*diff_angle);                  //control effort
        if (U>64){                             //saturation limits max current command
          U = 64;
        }
      
      
       //digitalWrite(pulse, !digitalRead(pulse));
             PORTB ^= (B00010000);     //PULSE 
       
       output(current_angle,U);
       
      // Serial.println(finish-start,DEC);
       
           if (Serial.available() > 0) {
       new_angle=Serial.parseFloat();
    }

      diff_angle =(new_angle-current_angle);  
    }

  }

  a = readEncoder();
  Serial.println(a);

}


//-----------------------------------------------------------------------


void setpoint()
{ 
  
  static float ei =0.0; 
  int start =0;
  int finish = 0;
  static int U = 0;  //control effort
  static float r = 0.0;  //setpoint
  static float y = 0.0;  // measured angle
  static float e = 0.0;  // e = r-y (error)
  static float p = 0.0;  // proportional effort
  static float i = 0.0;  // integral effort
  static float PA = 0.0;  //
  
//  new_angle=Serial.parseFloat();     
 // diff_angle =(new_angle-current_angle);

    r=Serial.parseFloat();     
  e =(r-y);

    
  if (abs(e) > 0.05)  {
    while (1) {//(abs(diff_angle) >= 0.05)  
      
      a = readEncoder();
      y = lookup_angle(a);
      
      //Serial.print(current_angle,DEC);
     // Serial.print(" , ");
    //  Serial.println(y,DEC); 
      e =(r-y);  
//   if (e>0){
//        y +=0.9;
//      }
//      else{
//        y -=0.9;
//      }

      p=(kp*e);
      i = i+ki*e;
      if (i>1){
      i = 1;
      }
      else if (i <-1){
        i = -1;
      }



    PA =(e*KF)+i;
        if (PA>1.5){                          
          PA = 1.5;
        }
        else if (PA<-1.5){
          PA = -1.5;
        }
      //Serial.println(PA,DEC); 

      y += PA;

             
      //Serial.print(current_angle,DEC);
      //Serial.print(" , ");
      //Serial.println(lookup_angle(a),DEC);
      //  ei = 0.95*(ei+diff_angle);


      
      U =abs(p+i);
     
        if (U>200){                             //saturation limits max current command
          U = 200;
        }
        else if (U<-200){
          U = -200;
        }

      U = 200;
//      if (abs(e)<=0.1){
//        U = 100;
//      }


      
       //digitalWrite(pulse, !digitalRead(pulse));
             PORTB ^= (B00010000);     //PULSE 
       
       output(y,U);
           if (Serial.available() > 0) {
       r=Serial.parseFloat();
    }

      
    }

  }

  a = readEncoder();
  Serial.println(a);

}



//
//
//void setpoint()
//{ 
//  
//  static float ei =0.0; 
//  int start =0;
//  int finish = 0;
//  static int U = 0;
//  new_angle=Serial.parseFloat();     
//  diff_angle =(new_angle-current_angle);
//
//    
//  if (abs(diff_angle) > 0.05)  {
//    while (1) {//(abs(diff_angle) >= 0.05)  
//      
//      a = readEncoder();
//      current_angle = lookup_angle(a);
//      
//      //Serial.print(current_angle,DEC);
//     // Serial.print(" , ");
//      //Serial.println(current_angle,DEC); 
//      diff_angle =(new_angle-current_angle);  
//   if (diff_angle>0){
//        current_angle +=1.2;
//      }
//      else{
//        current_angle -=1.2;
//      }
//              
//      //Serial.print(current_angle,DEC);
//      //Serial.print(" , ");
//      //Serial.println(lookup_angle(a),DEC);
//        ei = 0.95*(ei+diff_angle);
//      ep=(kp*diff_angle);
//      U =abs(ep+ki*ei);
//        if (U>150){                             //saturation limits max current command
//          U = 150;
//        }
//      
//      
//       //digitalWrite(pulse, !digitalRead(pulse));
//             PORTB ^= (B00010000);     //PULSE 
//       
//       output(current_angle,U);
//           if (Serial.available() > 0) {
//       new_angle=Serial.parseFloat();
//    }
//
//      
//    }
//
//  }
//
//  a = readEncoder();
//  Serial.println(a);
//
//}


//
//void setpoint()
//{
//  static float ei =0.0;    
//  static int U = 0;
//  int start =0;
//  int finish = 0;
//
//  
//  static float FA = 0.15;
//  while(1){
//    
//    if (Serial.available() > 0) {
//       new_angle=Serial.parseFloat();
//    }
//    
//   start = micros();
//    a = readEncoder();
//finish = micros();
//    
//    
//       current_angle= lookup_angle(a);
//       ei = 0.95*(ei+diff_angle);
//  diff_angle = -(new_angle-current_angle);
//  Serial.println(current_angle,DEC);
// /*Serial.print(current_angle,DEC);
//  Serial.print("  |  ") ;
//  Serial.print(ei,DEC);
//  Serial.print("  |  ") ;
//  Serial.print(FA,DEC);
//  Serial.print("  |  ") ;  
//  Serial.println(diff_angle,DEC);
//  //delay(100);
//*/ 
//  ep=(kp*diff_angle);
//  U =abs(ep+ki*ei);
//  if (U>256){
//    U = 256;
//  }
// // else if (U<25){
// //   U = 25;
// // }
//  
//  //FA = abs(diff_angle*KF);
//  //if (FA>=0.1){
//   FA=0.3 ;
//  //}
// // Serial.println(current_angle);
//  
//  //digitalWrite(pulse, !digitalRead(pulse));
//  
// 
// // Serial.println(ep,DEC);
//  if (diff_angle > 0.05)  {
//    //while (diff_angle >= 0.05)  
//      current_angle -= FA;//0.15;
//      
//       //digitalWrite(pulse, !digitalRead(pulse));
//      PORTB ^= (B00010000); 
//      
//      ;
//      val1 = U*sin( ((spr/4.0)*(current_angle*pi)/180)+((pi/4)*(3+ 2*zero_state)));
//      //val1 = ep*sin( 1.74533*current_angle + 6.8562);
//      
//     
//      analogWrite(VREF1, abs(val1));
//
//      if (val1 >= 0)  {
//        //digitalWrite(IN1, HIGH);
//        PORTB |= (B00000001);
//        //digitalWrite(IN2,LOW);
//        PORTB &= ~(B00000010);
//      }
//      else  {
//        //digitalWrite(IN1, LOW);
//        PORTB &= ~(B00000001);
//        //digitalWrite(IN2, HIGH);
//        PORTB |= (B00000010);
//      }
//      val2 = U*sin( ((spr/4.0)*(current_angle*pi)/180) +((pi/4)*(1+ 2*zero_state)));
//     //val2 = ep*sin( 1.74533*current_angle + 5.2854);
//      analogWrite(VREF2, abs(val2));  
//      
//      if (val2 >= 0)  {
//        //digitalWrite(IN3, HIGH);
//        PORTB |= (B00000100);
//        //digitalWrite(IN4,LOW);
//        PORTB &= ~(B00001000);
//        
//      }
//      else  {
//        //digitalWrite(IN3, LOW);
//        PORTB &= ~(B00000100);
//        //digitalWrite(IN4, HIGH);
//        PORTB |= (B00001000);
//        
//      }
//      
//      
//      //delay(1);
//    //  Serial.print(current_angle);
//    //  Serial.print(" , ");
//    //  Serial.print(val1,DEC);
//    //  Serial.print(" , ");
//    //  Serial.println(val2,DEC);
//      //diff_angle =(new_angle-current_angle);  
//    
//
//  }
//  else if (diff_angle < -0.05)  {
//    //while (diff_angle <= 0.05)  
//      current_angle += FA;//.15;
//      
//       //digitalWrite(pulse, !digitalRead(pulse));
//      PORTB ^= (B00010000); 
//      
//      
//      val1 = U*sin( ((spr/4.0)*(current_angle*pi)/180) +((pi/4)*(3+ 2*zero_state)));
//      //val1 = ep*sin( 1.74533*current_angle + 6.8562);
//      analogWrite(VREF1, abs(val1));
//      
//      if (val1 >= 0)  {
//        //digitalWrite(IN1, HIGH);
//        PORTB |= (B00000001);
//        //digitalWrite(IN2,LOW);
//        PORTB &= ~(B00000010);
//      }
//      else  {
//        //digitalWrite(IN1, LOW);
//        PORTB &= ~(B00000001);
//        //digitalWrite(IN2, HIGH);
//        PORTB |= (B00000010);
//      }
//      val2 = U*sin( ((spr/4.0)*(current_angle*pi)/180) +((pi/4)*(1+ 2*zero_state)));
//      //val2 = ep*sin( 1.74533*current_angle + 5.2854);
//      analogWrite(VREF2, abs(val2));  
//      
//      if (val2 >= 0)  {
//        //digitalWrite(IN3, HIGH);
//        PORTB |= (B00000100);
//        //digitalWrite(IN4,LOW);
//        PORTB &= ~(B00001000);
//        
//      }
//      else  {
//        //digitalWrite(IN3, LOW);
//        PORTB &= ~(B00000100);
//        //digitalWrite(IN4, HIGH);
//        PORTB |= (B00001000);
//        
//      }
//      
//      
//      //delay(1);
//    //  Serial.print(current_angle);
//    //  Serial.print(" , ");
//    //  Serial.print(val1,DEC);
//    //  Serial.print(" , ");
//    //  Serial.println(val2,DEC);
//      //diff_angle =(new_angle-current_angle);  
//    
//
//  
//  }
//  else{
//  analogWrite(VREF1, 0); 
//  analogWrite(VREF2, 0);  
//  
//  }
// // Serial.println(finish-start,DEC);
//
//}
//
//}






void one_step(){

  if (dir == 0) {
        i_step += 1;     
  }
   else{
        i_step -= 1;      
  }
  step_state = ((((i_step+zero_state) % 4)+4)%4);   // arduino mod does not wrap for negative....

  
  
  Serial.println(dir,DEC);
  Serial.println(step_state,DEC);

  
      
  analogWrite(VREF1, 64);  
  analogWrite(VREF2, 64);  
    if (step_state == 0){
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4, LOW);
    }
    else if (step_state == 1){

        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4, LOW);
    }
    else if (step_state == 2){
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
    }
     else if (step_state == 3){
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
        
     }
      delay(10);
}


void print_angle()
{
        a = readEncoder();
        anglefloat = a * 0.08789;
        Serial.print(i_step,DEC);
        Serial.print(" , ");
        Serial.print(i_step*aps,DEC);
        Serial.print(" , ");
        Serial.print(a,DEC);
        Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        Serial.println(anglefloat, DEC);
}


void output(float theta,int effort){
      static int start = 0;
      static int finish = 0;
      static int intangle;
      static float floatangle;
      static int modangle;
  
       val1 = effort*sin( ((spr/4.0)*(theta*pi)/180) + ((pi/4)*(5+ 2*zero_state)));//3

      //val1 = effort*sin( 1.74533*current_angle +5.4978);

     // floatangle= (100*( 1.74533*current_angle + 5.4978) );
     // intangle = (int)floatangle;
     // modangle = (((intangle% 628)+628)%628);
    //val1 = effort*lookup_sine(intangle);

      analogWrite(VREF1, abs(val1));
      
      if (val1 >= 0)  {
        //digitalWrite(IN1, HIGH);
        PORTB |= (B00000001);
 
        //digitalWrite(IN2,LOW);
        PORTB &= ~(B00000010);

      }
      else  {
        //digitalWrite(IN1, LOW);
        PORTB &= ~(B00000001);
 
        //digitalWrite(IN2, HIGH);
        PORTB |= (B00000010);
 
      }
      
      
      val2 = effort*sin( ((spr/4.0)*(theta*pi)/180) + ((pi/4)*(3+ 2*zero_state))); //1
      //val2 = effort*sin( 1.74533*current_angle + 3.927);
      
 //     floatangle= (100*( 1.74533*current_angle + 3.927) );
    //  intangle = (int)floatangle;
     // modangle = (((intangle% 628)+628)%628);
    //val2 = effort*lookup_sine(intangle);

      analogWrite(VREF2, abs(val2));  
      
            if (val2 >= 0)  {
        //digitalWrite(IN3, HIGH);
        PORTB |= (B00000100);
        //digitalWrite(IN4,LOW);
        PORTB &= ~(B00001000);
        
      }
      else  {
        //digitalWrite(IN3, LOW);
        PORTB &= ~(B00000100);
        //digitalWrite(IN4, HIGH);
        PORTB |= (B00001000);
        
      } 
  
  
  
  
  
}
int readEncoder()
{
// CSn needs to cycle from high to low to initiate transfer. Then clock cycles. As it goes high
// again, data will appear on sda
  digitalWrite(CSnPin, HIGH); // CSn high
  //PORTD |= (B00001000);
  digitalWrite(clockPin, HIGH); // CLK high
  //PORTD |= (B00000100);
  //delay(longdelay);// time between readings
  delayMicroseconds(10);//10
  //digitalWrite(ledPin, HIGH); // signal start of transfer with LED
  digitalWrite(CSnPin, LOW); // CSn low: start of transfer
  //PORTD &= ~(B00001000);
  delayMicroseconds(shortdelay); // delay for chip initialization
  digitalWrite(clockPin, LOW); // CLK goes low: start clocking
  //PORTD &= ~(B00000100);
  delayMicroseconds(shortdelay); // hold low
 // for (int x=0; x <16; x++) // clock signal, 16 transitions, output to clock pin
 for (int x=0; x <18; x++) // clock signal, 16 transitions, output to clock pin
  {
    digitalWrite(clockPin, HIGH); //clock goes high
    // PORTD |= (B00000100);
    delayMicroseconds(shortdelay); //
    inputstream =digitalRead(inputPin); // read one bit of data from pin
//Serial.print(inputstream, DEC);
    packeddata = ((packeddata << 1) + inputstream);// left-shift summing variable, add pin value
    digitalWrite(clockPin, LOW);
   // PORTD &= ~(B00000100);
    delayMicroseconds(shortdelay); // end of one clock cycle
  }
// end of entire clock cycle
//Serial.println(" ");
 // digitalWrite(ledPin, LOW); // signal end of transmission
// lots of diagnostics for verifying bitwise operations
//Serial.print("packed:");
//Serial.println(packeddata,DEC);
//Serial.print("pack bin: ");
//Serial.println(packeddata,BIN);
  angle = packeddata & anglemask; // mask rightmost 6 digits of packeddata to zero, into angle.
//Serial.print("mask: ");
//Serial.println(anglemask, BIN);
//Serial.print("bin angle:");
//Serial.println(angle, BIN);
//Serial.print("angle: ");
//Serial.println(angle, DEC);
  angle = (angle >> 6); // shift 16-digit angle right 6 digits to form 10-digit value
//Serial.print("angleshft:");
//Serial.println(angle, BIN);
//Serial.print("angledec: ");
//Serial.println(angle, DEC);
//angle = angle * 0.3515; // angle * (360/1024) == actual degrees
  //anglefloat = angle * 0.08789; // angle * (360/4096) == actual degrees
  angletemp = angle;
  //Serial.print("angle: "); // and, finally, print it.
  
//  Serial.print(i_step,DEC);
//  Serial.print(" , ");
//  Serial.print(i_step*0.9,DEC);
//  Serial.print(" , ");
//  Serial.println(anglefloat-offset, DEC);
  
  
  
//Serial.println("--------------------");
//Serial.print("raw: "); // this was the prefix for the bit-by-bit diag output inside the loop.
  if (debug)
  {
    statusbits = packeddata & statusmask;
    DECn = statusbits & 2; // goes high if magnet moved away from IC
    INCn = statusbits & 4; // goes high if magnet moved towards IC
    LIN = statusbits & 8; // goes high for linearity alarm
    COF = statusbits & 16; // goes high for cordic overflow: data invalid
    OCF = statusbits & 32; // this is 1 when the chip startup is finished.
    if (DECn && INCn) { Serial.println("magnet moved out of range"); }
    else
    {
      if (DECn) { Serial.println("magnet moved away from chip"); }
      if (INCn) { Serial.println("magnet moved towards chip"); }
    }
    if (LIN) { Serial.println("linearity alarm: magnet misaligned? Data questionable."); }
    if (COF) { Serial.println("cordic overflow: magnet misaligned? Data invalid."); }
  }

  packeddata = 0; // reset both variables to zero so they don't just accumulate
  angle = 0;
  
//  return anglefloat;
return angletemp;
}

