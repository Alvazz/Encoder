/*


First attempt at closing the loop using AS5145 encoder, A4954 driver

Controlled via a serial terminal at 115200 baud.


____
    |
  13|-> LED 
  12|-> pulse         _
  11|-> clock          \
  10|->Chip Select      |---AS5145
   9|->data           _/
   8|->IN4             \
   7|->IN3              \
  ~6|->VREF2             \___A4954
  ~5|->VREF1             /           
   4|->IN2              /
  ~3|->IN1            _/
   2|
   1|
   0|
____|
  

Implemented commands are:

p  -  print [step count] , [assumed angle] , [encoder reading]

c  -  clear step count & assumed angle

s  -  step

d  -  dir toggle

z  -  seek zero position

g  -  Go! steps around 400 times

w  -  Same as go, but stores encoder angles to EEPROM

r  -  returns EEPROM contents

a  -  prompts user to enter angle 



*/


#include <EEPROM.h>
#include <math.h>
#include <avr/pgmspace.h>



float kp = 5.0;
float ep = 00.0;




int dir = 1;
int step_state = 1;



int inputstream = 0; //one bit read from pin
long packeddata = 0; //two bytes concatenated from inputstream
long angle = 0; //holds processed angle value
long angletemp;
float anglefloat = 0; 

int a = 0;  //angle value in zero routine
float offset = 0.000000000000000; //zero-offest of closest full step

//long anglemask = 65472; //0x1111111111000000: mask to obtain first 10 digits with position info
long anglemask = 262080; // 0x111111111111000000: mask to obtain first 12 digits with position info
long statusmask = 63; //0x000000000111111; mask to obtain last 6 digits containing status info
long statusbits; //holds status/error information
int DECn; //bit holding decreasing magnet field error data
int INCn; //bit holding increasing magnet field error data
int OCF; //bit holding startup-valid bit
int COF; //bit holding cordic DSP processing error data
int LIN; //bit holding magnet field displacement error data
int debug = 1; //SET THIS TO 0 TO DISABLE PRINTING OF ERROR CODES
int shortdelay = 100; // this is the microseconds of delay in the data clock
int longdelay = 10; // this is the milliseconds between readings


int i_step = 0; // step index
int i_w = 0;// write index
int i_r = 0; // read index

//___________________________________

const float pi = 3.14159;
const int  half = 134;//128;

float new_angle = 0.0; //input angle
float current_angle = 0.0; //current angle
float diff_angle = 0.0;
int val1 = 0;
int val2 = 0;

//////////////////////////////////////
//////////////////PINS////////////////
//////////////////////////////////////
int IN1 = 8;
int IN2 = 9;
int VREF1 = 5;
int VREF2 = 6;
int IN3 = 10;
int IN4 = 11;
int pulse = 12;


const int ledPin = 13; //LED connected to digital pin 13
const int clockPin = 2; //output to clock
const int CSnPin = 3; //output to chip select
const int inputPin = 7; //read AS5040


//////////////////////////////////////
//////////////////////////////////////
//////////////////////////////////////


float angle_out=0.0;
int zero_state =0;




const PROGMEM float lookup[] = {
0.7031,
0.7849,
0.8668,
0.9486,
1.0304,
1.1122,
1.194,
1.2759,
1.3577,
1.4395,
1.5213,
1.6699,
1.7599,
1.8499,
1.9399,
2.0299,
2.1199,
2.2099,
2.2999,
2.3899,
2.4799,
2.5488,
2.6488,
2.7488,
2.8488,
2.9488,
3.0488,
3.1488,
3.2488,
3.3488,
3.3398,
3.4217,
3.5035,
3.5853,
3.6671,
3.7489,
3.8308,
3.9126,
3.9944,
4.0762,
4.158,
4.3066,
4.3885,
4.4703,
4.5521,
4.6339,
4.7157,
4.7975,
4.8794,
4.9612,
5.043,
5.1248,
5.2734,
5.3634,
5.4534,
5.5434,
5.6334,
5.7234,
5.8134,
5.9034,
5.9934,
6.0834,
6.1523,
6.2423,
6.3323,
6.4223,
6.5123,
6.6023,
6.6923,
6.7823,
6.8723,
6.9623,
7.0313,
7.1212,
7.2112,
7.3012,
7.3913,
7.4813,
7.5713,
7.6612,
7.7512,
7.8412,
7.9102,
8.0002,
8.0902,
8.1802,
8.2702,
8.3602,
8.4502,
8.5402,
8.6302,
8.7202,
8.7891,
8.8791,
8.9691,
9.0591,
9.1491,
9.2391,
9.3291,
9.4191,
9.5091,
9.5991,
9.668,
9.7498,
9.8316,
9.9134,
9.9952,
10.0771,
10.1589,
10.2407,
10.3225,
10.4043,
10.4862,
10.6348,
10.7248,
10.8148,
10.9048,
10.9948,
11.0848,
11.1748,
11.2648,
11.3548,
11.4448,
11.5137,
11.6037,
11.6937,
11.7837,
11.8737,
11.9637,
12.0537,
12.1437,
12.2337,
12.3237,
12.3926,
12.4826,
12.5726,
12.6626,
12.7526,
12.8426,
12.9326,
13.0226,
13.1126,
13.2026,
13.2715,
13.3533,
13.4351,
13.5169,
13.5988,
13.6806,
13.7624,
13.8442,
13.926,
14.0078,
14.0897,
14.2383,
14.3283,
14.4183,
14.5083,
14.5983,
14.6883,
14.7783,
14.8683,
14.9583,
15.0483,
15.1172,
15.2172,
15.3172,
15.4172,
15.5172,
15.6172,
15.7172,
15.8172,
15.9172,
15.9082,
15.9982,
16.0882,
16.1782,
16.2682,
16.3582,
16.4482,
16.5382,
16.6282,
16.7182,
16.7871,
16.8621,
16.9371,
17.0121,
17.0871,
17.1621,
17.2371,
17.3121,
17.3871,
17.4621,
17.5371,
17.6121,
17.8418,
17.9418,
18.0418,
18.1418,
18.2418,
18.3418,
18.4418,
18.5418,
18.6418,
18.6328,
18.7228,
18.8128,
18.9028,
18.9928,
19.0828,
19.1728,
19.2628,
19.3528,
19.4428,
19.5117,
19.5935,
19.6754,
19.7572,
19.839,
19.9208,
20.0026,
20.0844,
20.1663,
20.2481,
20.3299,
20.4785,
20.5685,
20.6585,
20.7485,
20.8385,
20.9285,
21.0185,
21.1085,
21.1985,
21.2885,
21.3574,
21.4392,
21.5211,
21.6029,
21.6847,
21.7665,
21.8483,
21.9301,
22.012,
22.0938,
22.1756,
22.3242,
22.4242,
22.5242,
22.6242,
22.7242,
22.8242,
22.9242,
23.0242,
23.1242,
23.1152,
23.2052,
23.2952,
23.3852,
23.4752,
23.5652,
23.6552,
23.7452,
23.8352,
23.9252,
23.9941,
24.0841,
24.1741,
24.2641,
24.3541,
24.4441,
24.5341,
24.6241,
24.7141,
24.8041,
24.873,
24.9549,
25.0367,
25.1185,
25.2003,
25.2821,
25.364,
25.4458,
25.5276,
25.6094,
25.6912,
25.8398,
25.9298,
26.0198,
26.1098,
26.1998,
26.2898,
26.3798,
26.4698,
26.5598,
26.6498,
26.7188,
26.8087,
26.8987,
26.9887,
27.0787,
27.1687,
27.2587,
27.3487,
27.4387,
27.5287,
27.5977,
27.6795,
27.7613,
27.8431,
27.9249,
28.0067,
28.0886,
28.1704,
28.2522,
28.334,
28.4158,
28.5645,
28.6645,
28.7645,
28.8645,
28.9645,
29.0645,
29.1645,
29.2645,
29.3645,
29.3555,
29.4373,
29.5191,
29.6009,
29.6827,
29.7646,
29.8464,
29.9282,
30.01,
30.0918,
30.1737,
30.3223,
30.4223,
30.5223,
30.6223,
30.7223,
30.8223,
30.9223,
31.0223,
31.1223,
31.1133,
31.1951,
31.2769,
31.3587,
31.4406,
31.5224,
31.6042,
31.686,
31.7678,
31.8496,
31.9315,
32.0801,
32.1701,
32.2601,
32.3501,
32.4401,
32.5301,
32.6201,
32.7101,
32.8001,
32.8901,
32.959,
33.0408,
33.1226,
33.2044,
33.2863,
33.3681,
33.4499,
33.5317,
33.6135,
33.6953,
33.7772,
33.9258,
34.0258,
34.1258,
34.2258,
34.3258,
34.4258,
34.5258,
34.6258,
34.7258,
34.7168,
34.8068,
34.8968,
34.9868,
35.0768,
35.1668,
35.2568,
35.3468,
35.4368,
35.5268,
35.5957,
35.6857,
35.7757,
35.8657,
35.9557,
36.0457,
36.1357,
36.2257,
36.3157,
36.4057,
36.4746,
36.5564,
36.6382,
36.7201,
36.8019,
36.8837,
36.9655,
37.0473,
37.1292,
37.211,
37.2928,
37.4414,
37.5232,
37.605,
37.6869,
37.7687,
37.8505,
37.9323,
38.0141,
38.096,
38.1778,
38.2596,
38.4082,
38.5082,
38.6082,
38.7082,
38.8082,
38.9082,
39.0082,
39.1082,
39.2082,
39.1992,
39.2892,
39.3792,
39.4692,
39.5592,
39.6492,
39.7392,
39.8292,
39.9192,
40.0092,
40.0781,
40.1681,
40.2581,
40.3481,
40.4381,
40.5281,
40.6181,
40.7081,
40.7981,
40.8881,
40.957,
41.0388,
41.1207,
41.2025,
41.2843,
41.3661,
41.4479,
41.5298,
41.6116,
41.6934,
41.7752,
41.9238,
42.0138,
42.1038,
42.1938,
42.2838,
42.3738,
42.4638,
42.5538,
42.6438,
42.7338,
42.8027,
42.8927,
42.9827,
43.0727,
43.1627,
43.2527,
43.3427,
43.4327,
43.5227,
43.6127,
43.6816,
43.7635,
43.8453,
43.9271,
44.0089,
44.0907,
44.1725,
44.2544,
44.3362,
44.418,
44.4998,
44.6484,
44.7484,
44.8484,
44.9484,
45.0484,
45.1484,
45.2484,
45.3484,
45.4484,
45.4395,
45.5213,
45.6031,
45.6849,
45.7667,
45.8485,
45.9304,
46.0122,
46.094,
46.1758,
46.2576,
46.4063,
46.4963,
46.5862,
46.6763,
46.7662,
46.8563,
46.9462,
47.0363,
47.1262,
47.2163,
47.2852,
47.3752,
47.4652,
47.5552,
47.6452,
47.7352,
47.8252,
47.9152,
48.0052,
48.0952,
48.1641,
48.2541,
48.3441,
48.4341,
48.5241,
48.6141,
48.7041,
48.7941,
48.8841,
48.9741,
49.043,
49.1248,
49.2066,
49.2884,
49.3702,
49.4521,
49.5339,
49.6157,
49.6975,
49.7793,
49.8612,
50.0098,
50.0998,
50.1898,
50.2798,
50.3698,
50.4598,
50.5498,
50.6398,
50.7298,
50.8198,
50.8887,
50.9887,
51.0887,
51.1887,
51.2887,
51.3887,
51.4887,
51.5887,
51.6887,
51.6797,
51.7697,
51.8597,
51.9497,
52.0397,
52.1297,
52.2197,
52.3097,
52.3997,
52.4897,
52.5586,
52.6486,
52.7386,
52.8286,
52.9186,
53.0086,
53.0986,
53.1886,
53.2786,
53.3686,
53.4375,
53.5193,
53.6011,
53.683,
53.7648,
53.8466,
53.9284,
54.0102,
54.092,
54.1739,
54.2557,
54.4043,
54.4943,
54.5843,
54.6743,
54.7643,
54.8543,
54.9443,
55.0343,
55.1243,
55.2143,
55.2832,
55.3732,
55.4632,
55.5532,
55.6432,
55.7332,
55.8232,
55.9132,
56.0032,
56.0932,
56.1621,
56.2439,
56.3257,
56.4076,
56.4894,
56.5712,
56.653,
56.7348,
56.8167,
56.8985,
56.9803,
57.1289,
57.2189,
57.3089,
57.3989,
57.4889,
57.5789,
57.6689,
57.7589,
57.8489,
57.9389,
58.0078,
58.0978,
58.1878,
58.2778,
58.3678,
58.4578,
58.5478,
58.6378,
58.7278,
58.8178,
58.8867,
58.9867,
59.0867,
59.1867,
59.2867,
59.3867,
59.4867,
59.5867,
59.6867,
59.6777,
59.7596,
59.8414,
59.9232,
60.005,
60.0868,
60.1686,
60.2505,
60.3323,
60.4141,
60.4959,
60.6445,
60.7263,
60.8082,
60.89,
60.9718,
61.0536,
61.1354,
61.2173,
61.2991,
61.3809,
61.4627,
61.6113,
61.7113,
61.8113,
61.9113,
62.0113,
62.1113,
62.2113,
62.3113,
62.4113,
62.4023,
62.4923,
62.5823,
62.6723,
62.7623,
62.8523,
62.9423,
63.0323,
63.1223,
63.2123,
63.2813,
63.3631,
63.4449,
63.5267,
63.6085,
63.6903,
63.7722,
63.854,
63.9358,
64.0176,
64.0994,
64.248,
64.3299,
64.4117,
64.4935,
64.5753,
64.6571,
64.739,
64.8208,
64.9026,
64.9844,
65.0662,
65.2148,
65.3048,
65.3948,
65.4848,
65.5748,
65.6648,
65.7548,
65.8448,
65.9348,
66.0248,
66.0938,
66.1937,
66.2938,
66.3937,
66.4938,
66.5938,
66.6937,
66.7938,
66.8937,
66.8848,
66.9748,
67.0648,
67.1548,
67.2448,
67.3348,
67.4248,
67.5148,
67.6048,
67.6948,
67.7637,
67.8455,
67.9273,
68.0091,
68.0909,
68.1728,
68.2546,
68.3364,
68.4182,
68.5,
68.5819,
68.7305,
68.8205,
68.9105,
69.0005,
69.0905,
69.1805,
69.2705,
69.3605,
69.4505,
69.5405,
69.6094,
69.6994,
69.7894,
69.8794,
69.9694,
70.0594,
70.1494,
70.2394,
70.3294,
70.4194,
70.4883,
70.5783,
70.6683,
70.7583,
70.8483,
70.9383,
71.0283,
71.1183,
71.2083,
71.2983,
71.3672,
71.449,
71.5308,
71.6126,
71.6945,
71.7763,
71.8581,
71.9399,
72.0217,
72.1036,
72.1854,
72.334,
72.424,
72.514,
72.604,
72.694,
72.784,
72.874,
72.964,
73.054,
73.144,
73.2129,
73.3029,
73.3929,
73.4829,
73.5729,
73.6629,
73.7529,
73.8429,
73.9329,
74.0229,
74.0918,
74.1818,
74.2718,
74.3618,
74.4518,
74.5418,
74.6318,
74.7218,
74.8118,
74.9018,
74.9707,
75.0525,
75.1343,
75.2162,
75.298,
75.3798,
75.4616,
75.5434,
75.6252,
75.7071,
75.7889,
75.9375,
76.0275,
76.1175,
76.2075,
76.2975,
76.3875,
76.4775,
76.5675,
76.6575,
76.7475,
76.8164,
76.9064,
76.9964,
77.0864,
77.1764,
77.2664,
77.3564,
77.4464,
77.5364,
77.6264,
77.6953,
77.7853,
77.8753,
77.9653,
78.0553,
78.1453,
78.2353,
78.3253,
78.4153,
78.5053,
78.5742,
78.656,
78.7379,
78.8197,
78.9015,
78.9833,
79.0651,
79.1469,
79.2288,
79.3106,
79.3924,
79.541,
79.631,
79.721,
79.811,
79.901,
79.991,
80.081,
80.171,
80.261,
80.351,
80.4199,
80.5099,
80.5999,
80.6899,
80.7799,
80.8699,
80.9599,
81.0499,
81.1399,
81.2299,
81.2988,
81.3888,
81.4788,
81.5688,
81.6588,
81.7488,
81.8388,
81.9288,
82.0188,
82.1088,
82.1777,
82.2677,
82.3577,
82.4477,
82.5377,
82.6277,
82.7177,
82.8077,
82.8977,
82.9877,
83.0566,
83.1466,
83.2366,
83.3266,
83.4166,
83.5066,
83.5966,
83.6866,
83.7766,
83.8666,
83.9355,
84.0255,
84.1155,
84.2055,
84.2955,
84.3855,
84.4755,
84.5655,
84.6555,
84.7455,
84.8145,
84.8963,
84.9781,
85.0599,
85.1417,
85.2235,
85.3054,
85.3872,
85.469,
85.5508,
85.6326,
85.7813,
85.8631,
85.9449,
86.0267,
86.1085,
86.1903,
86.2722,
86.354,
86.4358,
86.5176,
86.5994,
86.748,
86.848,
86.948,
87.048,
87.148,
87.248,
87.348,
87.448,
87.548,
87.5391,
87.6209,
87.7027,
87.7845,
87.8663,
87.9482,
88.03,
88.1118,
88.1936,
88.2754,
88.3572,
88.5059,
88.5959,
88.6859,
88.7759,
88.8659,
88.9559,
89.0459,
89.1359,
89.2259,
89.3159,
89.3848,
89.4748,
89.5648,
89.6548,
89.7448,
89.8348,
89.9248,
90.0148,
90.1048,
90.1948,
90.2637,
90.3455,
90.4273,
90.5091,
90.5909,
90.6728,
90.7546,
90.8364,
90.9182,
91.0,
91.0819,
91.2305,
91.3205,
91.4105,
91.5005,
91.5905,
91.6805,
91.7705,
91.8605,
91.9505,
92.0405,
92.1094,
92.1994,
92.2894,
92.3794,
92.4694,
92.5594,
92.6494,
92.7394,
92.8294,
92.9194,
92.9883,
93.0783,
93.1683,
93.2583,
93.3483,
93.4383,
93.5283,
93.6183,
93.7083,
93.7983,
93.8672,
93.949,
94.0308,
94.1126,
94.1945,
94.2763,
94.3581,
94.4399,
94.5217,
94.6036,
94.6854,
94.834,
94.924,
95.014,
95.104,
95.194,
95.284,
95.374,
95.464,
95.554,
95.644,
95.7129,
95.8029,
95.8929,
95.9829,
96.0729,
96.1629,
96.2529,
96.3429,
96.4329,
96.5229,
96.5918,
96.6736,
96.7554,
96.8373,
96.9191,
97.0009,
97.0827,
97.1645,
97.2463,
97.3282,
97.41,
97.5586,
97.6486,
97.7386,
97.8286,
97.9186,
98.0086,
98.0986,
98.1886,
98.2786,
98.3686,
98.4375,
98.5275,
98.6175,
98.7075,
98.7975,
98.8875,
98.9775,
99.0675,
99.1575,
99.2475,
99.3164,
99.4064,
99.4964,
99.5864,
99.6764,
99.7664,
99.8564,
99.9464,
100.0364,
100.1264,
100.1953,
100.2771,
100.3589,
100.4408,
100.5226,
100.6044,
100.6862,
100.768,
100.8499,
100.9317,
101.0135,
101.1621,
101.2521,
101.3421,
101.4321,
101.5221,
101.6121,
101.7021,
101.7921,
101.8821,
101.9721,
102.041,
102.131,
102.221,
102.311,
102.401,
102.491,
102.581,
102.671,
102.761,
102.851,
102.9199,
103.0099,
103.0999,
103.1899,
103.2799,
103.3699,
103.4599,
103.5499,
103.6399,
103.7299,
103.7988,
103.8806,
103.9625,
104.0443,
104.1261,
104.2079,
104.2897,
104.3716,
104.4534,
104.5352,
104.617,
104.7656,
104.8556,
104.9456,
105.0356,
105.1256,
105.2156,
105.3056,
105.3956,
105.4856,
105.5756,
105.6445,
105.7345,
105.8245,
105.9145,
106.0045,
106.0945,
106.1845,
106.2745,
106.3645,
106.4545,
106.5234,
106.6053,
106.6871,
106.7689,
106.8507,
106.9325,
107.0143,
107.0962,
107.178,
107.2598,
107.3416,
107.4902,
107.5802,
107.6702,
107.7602,
107.8502,
107.9402,
108.0302,
108.1202,
108.2102,
108.3002,
108.3691,
108.451,
108.5328,
108.6146,
108.6964,
108.7782,
108.86,
108.9419,
109.0237,
109.1055,
109.1873,
109.3359,
109.4259,
109.5159,
109.6059,
109.6959,
109.7859,
109.8759,
109.9659,
110.0559,
110.1459,
110.2148,
110.3048,
110.3948,
110.4848,
110.5748,
110.6648,
110.7548,
110.8448,
110.9348,
111.0248,
111.0938,
111.1838,
111.2738,
111.3637,
111.4537,
111.5438,
111.6338,
111.7237,
111.8137,
111.9038,
111.9727,
112.0545,
112.1363,
112.2181,
112.2999,
112.3817,
112.4636,
112.5454,
112.6272,
112.709,
112.7908,
112.9395,
113.0295,
113.1195,
113.2095,
113.2995,
113.3895,
113.4795,
113.5695,
113.6595,
113.7495,
113.8184,
113.9084,
113.9984,
114.0884,
114.1784,
114.2684,
114.3584,
114.4484,
114.5384,
114.6284,
114.6973,
114.7791,
114.8609,
114.9427,
115.0245,
115.1064,
115.1882,
115.27,
115.3518,
115.4336,
115.5154,
115.6641,
115.7541,
115.8441,
115.9341,
116.0241,
116.1141,
116.2041,
116.2941,
116.3841,
116.4741,
116.543,
116.633,
116.723,
116.813,
116.903,
116.993,
117.083,
117.173,
117.263,
117.353,
117.4219,
117.5037,
117.5855,
117.6673,
117.7491,
117.831,
117.9128,
117.9946,
118.0764,
118.1582,
118.2401,
118.3887,
118.4787,
118.5687,
118.6587,
118.7487,
118.8387,
118.9287,
119.0187,
119.1087,
119.1987,
119.2676,
119.3576,
119.4476,
119.5376,
119.6276,
119.7176,
119.8076,
119.8976,
119.9876,
120.0776,
120.1465,
120.2283,
120.3101,
120.3919,
120.4738,
120.5556,
120.6374,
120.7192,
120.801,
120.8828,
120.9647,
121.1133,
121.2033,
121.2933,
121.3833,
121.4733,
121.5633,
121.6533,
121.7433,
121.8333,
121.9233,
121.9922,
122.074,
122.1558,
122.2376,
122.3195,
122.4013,
122.4831,
122.5649,
122.6467,
122.7286,
122.8104,
122.959,
123.049,
123.139,
123.229,
123.319,
123.409,
123.499,
123.589,
123.679,
123.769,
123.8379,
123.9279,
124.0179,
124.1079,
124.1979,
124.2879,
124.3779,
124.4679,
124.5579,
124.6479,
124.7168,
124.8068,
124.8968,
124.9868,
125.0768,
125.1668,
125.2568,
125.3468,
125.4368,
125.5268,
125.5957,
125.6775,
125.7593,
125.8412,
125.923,
126.0048,
126.0866,
126.1684,
126.2502,
126.3321,
126.4139,
126.5625,
126.6525,
126.7425,
126.8325,
126.9225,
127.0125,
127.1025,
127.1925,
127.2825,
127.3725,
127.4414,
127.5232,
127.605,
127.6869,
127.7687,
127.8505,
127.9323,
128.0141,
128.096,
128.1778,
128.2596,
128.4082,
128.4982,
128.5882,
128.6782,
128.7682,
128.8582,
128.9482,
129.0382,
129.1282,
129.2182,
129.2871,
129.3771,
129.4671,
129.5571,
129.6471,
129.7371,
129.8271,
129.9171,
130.0071,
130.0971,
130.166,
130.2478,
130.3297,
130.4115,
130.4933,
130.5751,
130.6569,
130.7387,
130.8206,
130.9024,
130.9842,
131.1328,
131.2228,
131.3128,
131.4028,
131.4928,
131.5828,
131.6728,
131.7628,
131.8528,
131.9428,
132.0117,
132.1017,
132.1917,
132.2817,
132.3717,
132.4617,
132.5517,
132.6417,
132.7317,
132.8217,
132.8906,
132.9724,
133.0543,
133.1361,
133.2179,
133.2997,
133.3815,
133.4634,
133.5452,
133.627,
133.7088,
133.8574,
133.9474,
134.0374,
134.1274,
134.2174,
134.3074,
134.3974,
134.4874,
134.5774,
134.6674,
134.7363,
134.8263,
134.9163,
135.0063,
135.0963,
135.1863,
135.2763,
135.3663,
135.4563,
135.5463,
135.6152,
135.6971,
135.7789,
135.8607,
135.9425,
136.0243,
136.1061,
136.188,
136.2698,
136.3516,
136.4334,
136.582,
136.682,
136.782,
136.882,
136.982,
137.082,
137.182,
137.282,
137.382,
137.373,
137.4549,
137.5367,
137.6185,
137.7003,
137.7821,
137.864,
137.9458,
138.0276,
138.1094,
138.1912,
138.3398,
138.4217,
138.5035,
138.5853,
138.6671,
138.7489,
138.8308,
138.9126,
138.9944,
139.0762,
139.158,
139.3066,
139.3966,
139.4866,
139.5766,
139.6666,
139.7566,
139.8466,
139.9366,
140.0266,
140.1166,
140.1855,
140.2755,
140.3655,
140.4555,
140.5455,
140.6355,
140.7255,
140.8155,
140.9055,
140.9955,
141.0645,
141.1463,
141.2281,
141.3099,
141.3917,
141.4735,
141.5554,
141.6372,
141.719,
141.8008,
141.8826,
142.0313,
142.1213,
142.2113,
142.3013,
142.3913,
142.4812,
142.5712,
142.6612,
142.7512,
142.8413,
142.9102,
143.0002,
143.0902,
143.1802,
143.2702,
143.3602,
143.4502,
143.5402,
143.6302,
143.7202,
143.7891,
143.8791,
143.9691,
144.0591,
144.1491,
144.2391,
144.3291,
144.4191,
144.5091,
144.5991,
144.668,
144.7498,
144.8316,
144.9134,
144.9952,
145.0771,
145.1589,
145.2407,
145.3225,
145.4043,
145.4862,
145.6348,
145.7248,
145.8148,
145.9048,
145.9948,
146.0848,
146.1748,
146.2648,
146.3548,
146.4448,
146.5137,
146.6037,
146.6937,
146.7837,
146.8737,
146.9637,
147.0537,
147.1437,
147.2337,
147.3237,
147.3926,
147.4826,
147.5726,
147.6626,
147.7526,
147.8426,
147.9326,
148.0226,
148.1126,
148.2026,
148.2715,
148.3533,
148.4351,
148.5169,
148.5988,
148.6806,
148.7624,
148.8442,
148.926,
149.0078,
149.0897,
149.2383,
149.3201,
149.4019,
149.4837,
149.5656,
149.6474,
149.7292,
149.811,
149.8928,
149.9746,
150.0565,
150.2051,
150.3051,
150.4051,
150.5051,
150.6051,
150.7051,
150.8051,
150.9051,
151.0051,
150.9961,
151.0861,
151.1761,
151.2661,
151.3561,
151.4461,
151.5361,
151.6261,
151.7161,
151.8061,
151.875,
151.9568,
152.0386,
152.1205,
152.2023,
152.2841,
152.3659,
152.4477,
152.5295,
152.6114,
152.6932,
152.8418,
152.9318,
153.0218,
153.1118,
153.2018,
153.2918,
153.3818,
153.4718,
153.5618,
153.6518,
153.7207,
153.8025,
153.8843,
153.9662,
154.048,
154.1298,
154.2116,
154.2934,
154.3752,
154.4571,
154.5389,
154.6875,
154.7775,
154.8675,
154.9575,
155.0475,
155.1375,
155.2275,
155.3175,
155.4075,
155.4975,
155.5664,
155.6564,
155.7464,
155.8364,
155.9264,
156.0164,
156.1064,
156.1964,
156.2864,
156.3764,
156.4453,
156.5353,
156.6253,
156.7153,
156.8053,
156.8953,
156.9853,
157.0753,
157.1653,
157.2553,
157.3242,
157.406,
157.4879,
157.5697,
157.6515,
157.7333,
157.8151,
157.8969,
157.9788,
158.0606,
158.1424,
158.291,
158.381,
158.471,
158.561,
158.651,
158.741,
158.831,
158.921,
159.011,
159.101,
159.1699,
159.2599,
159.3499,
159.4399,
159.5299,
159.6199,
159.7099,
159.7999,
159.8899,
159.9799,
160.0488,
160.1388,
160.2288,
160.3188,
160.4088,
160.4988,
160.5888,
160.6788,
160.7688,
160.8588,
160.9277,
161.0096,
161.0914,
161.1732,
161.255,
161.3368,
161.4186,
161.5005,
161.5823,
161.6641,
161.7459,
161.8945,
161.9845,
162.0745,
162.1645,
162.2545,
162.3445,
162.4345,
162.5245,
162.6145,
162.7045,
162.7734,
162.8634,
162.9534,
163.0434,
163.1334,
163.2234,
163.3134,
163.4034,
163.4934,
163.5834,
163.6523,
163.7423,
163.8323,
163.9223,
164.0123,
164.1023,
164.1923,
164.2823,
164.3723,
164.4623,
164.5313,
164.6131,
164.6949,
164.7767,
164.8585,
164.9403,
165.0222,
165.104,
165.1858,
165.2676,
165.3494,
165.498,
165.588,
165.678,
165.768,
165.858,
165.948,
166.038,
166.128,
166.218,
166.308,
166.377,
166.467,
166.557,
166.647,
166.737,
166.827,
166.917,
167.007,
167.097,
167.187,
167.2559,
167.3459,
167.4359,
167.5259,
167.6159,
167.7059,
167.7959,
167.8859,
167.9759,
168.0659,
168.1348,
168.2166,
168.2984,
168.3802,
168.462,
168.5439,
168.6257,
168.7075,
168.7893,
168.8711,
168.9529,
169.1016,
169.1916,
169.2816,
169.3716,
169.4616,
169.5516,
169.6416,
169.7316,
169.8216,
169.9116,
169.9805,
170.0705,
170.1605,
170.2505,
170.3405,
170.4305,
170.5205,
170.6105,
170.7005,
170.7905,
170.8594,
170.9594,
171.0594,
171.1594,
171.2594,
171.3594,
171.4594,
171.5594,
171.6594,
171.6504,
171.7254,
171.8004,
171.8754,
171.9504,
172.0254,
172.1004,
172.1754,
172.2504,
172.3254,
172.4004,
172.4754,
172.7051,
172.7951,
172.8851,
172.9751,
173.0651,
173.1551,
173.2451,
173.3351,
173.4251,
173.5151,
173.584,
173.674,
173.764,
173.854,
173.944,
174.034,
174.124,
174.214,
174.304,
174.394,
174.4629,
174.5529,
174.6429,
174.7329,
174.8229,
174.9129,
175.0029,
175.0929,
175.1829,
175.2729,
175.3418,
175.4318,
175.5218,
175.6118,
175.7018,
175.7918,
175.8818,
175.9718,
176.0618,
176.1518,
176.2207,
176.3107,
176.4007,
176.4907,
176.5807,
176.6707,
176.7607,
176.8507,
176.9407,
177.0307,
177.0996,
177.1814,
177.2632,
177.3451,
177.4269,
177.5087,
177.5905,
177.6723,
177.7542,
177.836,
177.9178,
178.0664,
178.1564,
178.2464,
178.3364,
178.4264,
178.5164,
178.6064,
178.6964,
178.7864,
178.8764,
178.9453,
179.0271,
179.1089,
179.1908,
179.2726,
179.3544,
179.4362,
179.518,
179.5999,
179.6817,
179.7635,
179.9121,
180.0121,
180.1121,
180.2121,
180.3121,
180.4121,
180.5121,
180.6121,
180.7121,
180.7031,
180.7931,
180.8831,
180.9731,
181.0631,
181.1531,
181.2431,
181.3331,
181.4231,
181.5131,
181.582,
181.6638,
181.7457,
181.8275,
181.9093,
181.9911,
182.0729,
182.1548,
182.2366,
182.3184,
182.4002,
182.5488,
182.6306,
182.7125,
182.7943,
182.8761,
182.9579,
183.0397,
183.1216,
183.2034,
183.2852,
183.367,
183.5156,
183.6056,
183.6956,
183.7856,
183.8756,
183.9656,
184.0556,
184.1456,
184.2356,
184.3256,
184.3945,
184.4945,
184.5945,
184.6945,
184.7945,
184.8945,
184.9945,
185.0945,
185.1945,
185.1855,
185.2755,
185.3655,
185.4555,
185.5455,
185.6355,
185.7255,
185.8155,
185.9055,
185.9955,
186.0645,
186.1395,
186.2145,
186.2895,
186.3645,
186.4395,
186.5145,
186.5895,
186.6645,
186.7395,
186.8145,
186.8895,
187.1191,
187.2091,
187.2991,
187.3891,
187.4791,
187.5691,
187.6591,
187.7491,
187.8391,
187.9291,
187.998,
188.098,
188.198,
188.298,
188.398,
188.498,
188.598,
188.698,
188.798,
188.7891,
188.8791,
188.9691,
189.0591,
189.1491,
189.2391,
189.3291,
189.4191,
189.5091,
189.5991,
189.668,
189.7498,
189.8316,
189.9134,
189.9952,
190.0771,
190.1589,
190.2407,
190.3225,
190.4043,
190.4862,
190.6348,
190.7248,
190.8148,
190.9048,
190.9948,
191.0848,
191.1748,
191.2648,
191.3548,
191.4448,
191.5137,
191.6037,
191.6937,
191.7837,
191.8737,
191.9637,
192.0537,
192.1437,
192.2337,
192.3237,
192.3926,
192.4826,
192.5726,
192.6626,
192.7526,
192.8426,
192.9326,
193.0226,
193.1126,
193.2026,
193.2715,
193.3533,
193.4351,
193.5169,
193.5988,
193.6806,
193.7624,
193.8442,
193.926,
194.0078,
194.0897,
194.2383,
194.3283,
194.4183,
194.5083,
194.5983,
194.6883,
194.7783,
194.8683,
194.9583,
195.0483,
195.1172,
195.2072,
195.2972,
195.3872,
195.4772,
195.5672,
195.6572,
195.7472,
195.8372,
195.9272,
195.9961,
196.0861,
196.1761,
196.2661,
196.3561,
196.4461,
196.5361,
196.6261,
196.7161,
196.8061,
196.875,
196.9568,
197.0386,
197.1205,
197.2023,
197.2841,
197.3659,
197.4477,
197.5295,
197.6114,
197.6932,
197.8418,
197.9418,
198.0418,
198.1418,
198.2418,
198.3418,
198.4418,
198.5418,
198.6418,
198.6328,
198.7228,
198.8128,
198.9028,
198.9928,
199.0828,
199.1728,
199.2628,
199.3528,
199.4428,
199.5117,
199.5935,
199.6754,
199.7572,
199.839,
199.9208,
200.0026,
200.0844,
200.1663,
200.2481,
200.3299,
200.4785,
200.5685,
200.6585,
200.7485,
200.8385,
200.9285,
201.0185,
201.1085,
201.1985,
201.2885,
201.3574,
201.4392,
201.5211,
201.6029,
201.6847,
201.7665,
201.8483,
201.9301,
202.012,
202.0938,
202.1756,
202.3242,
202.4242,
202.5242,
202.6242,
202.7242,
202.8242,
202.9242,
203.0242,
203.1242,
203.1152,
203.2052,
203.2952,
203.3852,
203.4752,
203.5652,
203.6552,
203.7452,
203.8352,
203.9252,
203.9941,
204.076,
204.1578,
204.2396,
204.3214,
204.4032,
204.485,
204.5669,
204.6487,
204.7305,
204.8123,
204.9609,
205.0609,
205.1609,
205.2609,
205.3609,
205.4609,
205.5609,
205.6609,
205.7609,
205.752,
205.8338,
205.9156,
205.9974,
206.0792,
206.161,
206.2429,
206.3247,
206.4065,
206.4883,
206.5701,
206.7188,
206.8088,
206.8988,
206.9888,
207.0788,
207.1687,
207.2587,
207.3487,
207.4387,
207.5288,
207.5977,
207.6877,
207.7777,
207.8677,
207.9577,
208.0477,
208.1377,
208.2277,
208.3177,
208.4077,
208.4766,
208.5666,
208.6566,
208.7466,
208.8366,
208.9266,
209.0166,
209.1066,
209.1966,
209.2866,
209.3555,
209.4373,
209.5191,
209.6009,
209.6827,
209.7646,
209.8464,
209.9282,
210.01,
210.0918,
210.1737,
210.3223,
210.4123,
210.5023,
210.5923,
210.6823,
210.7723,
210.8623,
210.9523,
211.0423,
211.1323,
211.2012,
211.2912,
211.3812,
211.4712,
211.5612,
211.6512,
211.7412,
211.8312,
211.9212,
212.0112,
212.0801,
212.1701,
212.2601,
212.3501,
212.4401,
212.5301,
212.6201,
212.7101,
212.8001,
212.8901,
212.959,
213.049,
213.139,
213.229,
213.319,
213.409,
213.499,
213.589,
213.679,
213.769,
213.8379,
213.9197,
214.0015,
214.0833,
214.1652,
214.247,
214.3288,
214.4106,
214.4924,
214.5743,
214.6561,
214.8047,
214.8947,
214.9847,
215.0747,
215.1647,
215.2547,
215.3447,
215.4347,
215.5247,
215.6147,
215.6836,
215.7836,
215.8836,
215.9836,
216.0836,
216.1836,
216.2836,
216.3836,
216.4836,
216.4746,
216.5564,
216.6382,
216.7201,
216.8019,
216.8837,
216.9655,
217.0473,
217.1292,
217.211,
217.2928,
217.4414,
217.5314,
217.6214,
217.7114,
217.8014,
217.8914,
217.9814,
218.0714,
218.1614,
218.2514,
218.3203,
218.4021,
218.4839,
218.5658,
218.6476,
218.7294,
218.8112,
218.893,
218.9749,
219.0567,
219.1385,
219.2871,
219.3871,
219.4871,
219.5871,
219.6871,
219.7871,
219.8871,
219.9871,
220.0871,
220.0781,
220.1681,
220.2581,
220.3481,
220.4381,
220.5281,
220.6181,
220.7081,
220.7981,
220.8881,
220.957,
221.0388,
221.1207,
221.2025,
221.2843,
221.3661,
221.4479,
221.5298,
221.6116,
221.6934,
221.7752,
221.9238,
222.0138,
222.1038,
222.1938,
222.2838,
222.3738,
222.4638,
222.5538,
222.6438,
222.7338,
222.8027,
222.8927,
222.9827,
223.0727,
223.1627,
223.2527,
223.3427,
223.4327,
223.5227,
223.6127,
223.6816,
223.7716,
223.8616,
223.9516,
224.0416,
224.1316,
224.2216,
224.3116,
224.4016,
224.4916,
224.5605,
224.6605,
224.7605,
224.8605,
224.9605,
225.0605,
225.1605,
225.2605,
225.3605,
225.3516,
225.4334,
225.5152,
225.597,
225.6788,
225.7607,
225.8425,
225.9243,
226.0061,
226.0879,
226.1697,
226.3184,
226.4002,
226.482,
226.5638,
226.6456,
226.7275,
226.8093,
226.8911,
226.9729,
227.0547,
227.1365,
227.2852,
227.3852,
227.4852,
227.5852,
227.6852,
227.7852,
227.8852,
227.9852,
228.0852,
228.0762,
228.1662,
228.2562,
228.3462,
228.4362,
228.5262,
228.6162,
228.7062,
228.7962,
228.8862,
228.9551,
229.0369,
229.1187,
229.2005,
229.2824,
229.3642,
229.446,
229.5278,
229.6096,
229.6914,
229.7733,
229.9219,
230.0119,
230.1019,
230.1919,
230.2819,
230.3719,
230.4619,
230.5519,
230.6419,
230.7319,
230.8008,
230.8908,
230.9808,
231.0708,
231.1608,
231.2508,
231.3408,
231.4308,
231.5208,
231.6108,
231.6797,
231.7697,
231.8597,
231.9497,
232.0397,
232.1297,
232.2197,
232.3097,
232.3997,
232.4897,
232.5586,
232.6486,
232.7386,
232.8286,
232.9186,
233.0086,
233.0986,
233.1886,
233.2786,
233.3686,
233.4375,
233.5275,
233.6175,
233.7075,
233.7975,
233.8875,
233.9775,
234.0675,
234.1575,
234.2475,
234.3164,
234.3982,
234.48,
234.5619,
234.6437,
234.7255,
234.8073,
234.8891,
234.971,
235.0528,
235.1346,
235.2832,
235.3732,
235.4632,
235.5532,
235.6432,
235.7332,
235.8232,
235.9132,
236.0032,
236.0932,
236.1621,
236.2439,
236.3257,
236.4076,
236.4894,
236.5712,
236.653,
236.7348,
236.8167,
236.8985,
236.9803,
237.1289,
237.2189,
237.3089,
237.3989,
237.4889,
237.5789,
237.6689,
237.7589,
237.8489,
237.9389,
238.0078,
238.1078,
238.2078,
238.3078,
238.4078,
238.5078,
238.6078,
238.7078,
238.8078,
238.7988,
238.8888,
238.9788,
239.0688,
239.1588,
239.2488,
239.3388,
239.4288,
239.5188,
239.6088,
239.6777,
239.7596,
239.8414,
239.9232,
240.005,
240.0868,
240.1686,
240.2505,
240.3323,
240.4141,
240.4959,
240.6445,
240.7345,
240.8245,
240.9145,
241.0045,
241.0945,
241.1845,
241.2745,
241.3645,
241.4545,
241.5234,
241.6134,
241.7034,
241.7934,
241.8834,
241.9734,
242.0634,
242.1534,
242.2434,
242.3334,
242.4023,
242.5023,
242.6023,
242.7023,
242.8023,
242.9023,
243.0023,
243.1023,
243.2023,
243.1934,
243.2684,
243.3434,
243.4184,
243.4934,
243.5684,
243.6434,
243.7184,
243.7934,
243.8684,
243.9434,
244.0184,
244.248,
244.3299,
244.4117,
244.4935,
244.5753,
244.6571,
244.739,
244.8208,
244.9026,
244.9844,
245.0662,
245.2148,
245.3148,
245.4148,
245.5148,
245.6148,
245.7148,
245.8148,
245.9148,
246.0148,
246.0059,
246.0959,
246.1859,
246.2759,
246.3659,
246.4559,
246.5459,
246.6359,
246.7259,
246.8159,
246.8848,
246.9748,
247.0648,
247.1548,
247.2448,
247.3348,
247.4248,
247.5148,
247.6048,
247.6948,
247.7637,
247.8537,
247.9437,
248.0337,
248.1237,
248.2137,
248.3037,
248.3937,
248.4837,
248.5737,
248.6426,
248.7244,
248.8062,
248.888,
248.9699,
249.0517,
249.1335,
249.2153,
249.2971,
249.3789,
249.4608,
249.6094,
249.6994,
249.7894,
249.8794,
249.9694,
250.0594,
250.1494,
250.2394,
250.3294,
250.4194,
250.4883,
250.5783,
250.6683,
250.7583,
250.8483,
250.9383,
251.0283,
251.1183,
251.2083,
251.2983,
251.3672,
251.449,
251.5308,
251.6126,
251.6945,
251.7763,
251.8581,
251.9399,
252.0217,
252.1036,
252.1854,
252.334,
252.434,
252.534,
252.634,
252.734,
252.834,
252.934,
253.034,
253.134,
253.125,
253.2068,
253.2886,
253.3705,
253.4523,
253.5341,
253.6159,
253.6977,
253.7795,
253.8614,
253.9432,
254.0918,
254.1818,
254.2718,
254.3618,
254.4518,
254.5418,
254.6318,
254.7218,
254.8118,
254.9018,
254.9707,
255.0607,
255.1507,
255.2407,
255.3307,
255.4207,
255.5107,
255.6007,
255.6907,
255.7807,
255.8496,
255.9396,
256.0296,
256.1196,
256.2096,
256.2996,
256.3896,
256.4796,
256.5696,
256.6596,
256.7285,
256.8103,
256.8922,
256.974,
257.0558,
257.1376,
257.2194,
257.3012,
257.3831,
257.4649,
257.5467,
257.6953,
257.7853,
257.8753,
257.9653,
258.0553,
258.1453,
258.2353,
258.3253,
258.4153,
258.5053,
258.5742,
258.6642,
258.7542,
258.8442,
258.9342,
259.0242,
259.1142,
259.2042,
259.2942,
259.3842,
259.4531,
259.5431,
259.6331,
259.7231,
259.8131,
259.9031,
259.9931,
260.0831,
260.1731,
260.2631,
260.332,
260.422,
260.512,
260.602,
260.692,
260.782,
260.872,
260.962,
261.052,
261.142,
261.2109,
261.2928,
261.3746,
261.4564,
261.5382,
261.62,
261.7018,
261.7837,
261.8655,
261.9473,
262.0291,
262.1777,
262.2677,
262.3577,
262.4477,
262.5377,
262.6277,
262.7177,
262.8077,
262.8977,
262.9877,
263.0566,
263.1466,
263.2366,
263.3266,
263.4166,
263.5066,
263.5966,
263.6866,
263.7766,
263.8666,
263.9355,
264.0255,
264.1155,
264.2055,
264.2955,
264.3855,
264.4755,
264.5655,
264.6555,
264.7455,
264.8145,
264.8963,
264.9781,
265.0599,
265.1417,
265.2235,
265.3054,
265.3872,
265.469,
265.5508,
265.6326,
265.7813,
265.8712,
265.9613,
266.0512,
266.1413,
266.2312,
266.3213,
266.4112,
266.5013,
266.5913,
266.6602,
266.7502,
266.8402,
266.9302,
267.0202,
267.1102,
267.2002,
267.2902,
267.3802,
267.4702,
267.5391,
267.6291,
267.7191,
267.8091,
267.8991,
267.9891,
268.0791,
268.1691,
268.2591,
268.3491,
268.418,
268.508,
268.598,
268.688,
268.778,
268.868,
268.958,
269.048,
269.138,
269.228,
269.2969,
269.3787,
269.4605,
269.5423,
269.6241,
269.706,
269.7878,
269.8696,
269.9514,
270.0332,
270.1151,
270.2637,
270.3537,
270.4437,
270.5337,
270.6237,
270.7137,
270.8037,
270.8937,
270.9837,
271.0737,
271.1426,
271.2326,
271.3226,
271.4126,
271.5026,
271.5926,
271.6826,
271.7726,
271.8626,
271.9526,
272.0215,
272.1115,
272.2015,
272.2915,
272.3815,
272.4715,
272.5615,
272.6515,
272.7415,
272.8315,
272.9004,
272.9822,
273.064,
273.1458,
273.2277,
273.3095,
273.3913,
273.4731,
273.5549,
273.6368,
273.7186,
273.8672,
273.9572,
274.0472,
274.1372,
274.2272,
274.3172,
274.4072,
274.4972,
274.5872,
274.6772,
274.7461,
274.8279,
274.9097,
274.9915,
275.0734,
275.1552,
275.237,
275.3188,
275.4006,
275.4825,
275.5643,
275.7129,
275.8029,
275.8929,
275.9829,
276.0729,
276.1629,
276.2529,
276.3429,
276.4329,
276.5229,
276.5918,
276.6818,
276.7718,
276.8618,
276.9518,
277.0418,
277.1318,
277.2218,
277.3118,
277.4018,
277.4707,
277.5525,
277.6343,
277.7162,
277.798,
277.8798,
277.9616,
278.0434,
278.1252,
278.2071,
278.2889,
278.4375,
278.5275,
278.6175,
278.7075,
278.7975,
278.8875,
278.9775,
279.0675,
279.1575,
279.2475,
279.3164,
279.4064,
279.4964,
279.5864,
279.6764,
279.7664,
279.8564,
279.9464,
280.0364,
280.1264,
280.1953,
280.2853,
280.3753,
280.4653,
280.5553,
280.6453,
280.7353,
280.8253,
280.9153,
281.0053,
281.0742,
281.156,
281.2379,
281.3197,
281.4015,
281.4833,
281.5651,
281.6469,
281.7288,
281.8106,
281.8924,
282.041,
282.131,
282.221,
282.311,
282.401,
282.491,
282.581,
282.671,
282.761,
282.851,
282.9199,
283.0099,
283.0999,
283.1899,
283.2799,
283.3699,
283.4599,
283.5499,
283.6399,
283.7299,
283.7988,
283.8806,
283.9625,
284.0443,
284.1261,
284.2079,
284.2897,
284.3716,
284.4534,
284.5352,
284.617,
284.7656,
284.8556,
284.9456,
285.0356,
285.1256,
285.2156,
285.3056,
285.3956,
285.4856,
285.5756,
285.6445,
285.7345,
285.8245,
285.9145,
286.0045,
286.0945,
286.1845,
286.2745,
286.3645,
286.4545,
286.5234,
286.6134,
286.7034,
286.7934,
286.8834,
286.9734,
287.0634,
287.1534,
287.2434,
287.3334,
287.4023,
287.4842,
287.566,
287.6478,
287.7296,
287.8114,
287.8933,
287.9751,
288.0569,
288.1387,
288.2205,
288.3691,
288.4591,
288.5491,
288.6391,
288.7291,
288.8191,
288.9091,
288.9991,
289.0891,
289.1791,
289.248,
289.338,
289.428,
289.518,
289.608,
289.698,
289.788,
289.878,
289.968,
290.058,
290.127,
290.2088,
290.2906,
290.3724,
290.4542,
290.536,
290.6179,
290.6997,
290.7815,
290.8633,
290.9451,
291.0938,
291.1837,
291.2738,
291.3637,
291.4538,
291.5437,
291.6338,
291.7237,
291.8138,
291.9038,
291.9727,
292.0545,
292.1363,
292.2181,
292.2999,
292.3817,
292.4636,
292.5454,
292.6272,
292.709,
292.7908,
292.9395,
293.0295,
293.1195,
293.2095,
293.2995,
293.3895,
293.4795,
293.5695,
293.6595,
293.7495,
293.8184,
293.9084,
293.9984,
294.0884,
294.1784,
294.2684,
294.3584,
294.4484,
294.5384,
294.6284,
294.6973,
294.7791,
294.8609,
294.9427,
295.0245,
295.1064,
295.1882,
295.27,
295.3518,
295.4336,
295.5154,
295.6641,
295.7541,
295.8441,
295.9341,
296.0241,
296.1141,
296.2041,
296.2941,
296.3841,
296.4741,
296.543,
296.633,
296.723,
296.813,
296.903,
296.993,
297.083,
297.173,
297.263,
297.353,
297.4219,
297.5037,
297.5855,
297.6673,
297.7491,
297.831,
297.9128,
297.9946,
298.0764,
298.1582,
298.2401,
298.3887,
298.4787,
298.5687,
298.6587,
298.7487,
298.8387,
298.9287,
299.0187,
299.1087,
299.1987,
299.2676,
299.3576,
299.4476,
299.5376,
299.6276,
299.7176,
299.8076,
299.8976,
299.9876,
300.0776,
300.1465,
300.2283,
300.3101,
300.3919,
300.4738,
300.5556,
300.6374,
300.7192,
300.801,
300.8828,
300.9647,
301.1133,
301.2033,
301.2933,
301.3833,
301.4733,
301.5633,
301.6533,
301.7433,
301.8333,
301.9233,
301.9922,
302.074,
302.1558,
302.2376,
302.3195,
302.4013,
302.4831,
302.5649,
302.6467,
302.7286,
302.8104,
302.959,
303.059,
303.159,
303.259,
303.359,
303.459,
303.559,
303.659,
303.759,
303.75,
303.84,
303.93,
304.02,
304.11,
304.2,
304.29,
304.38,
304.47,
304.56,
304.6289,
304.7107,
304.7925,
304.8744,
304.9562,
305.038,
305.1198,
305.2016,
305.2835,
305.3653,
305.4471,
305.5957,
305.6775,
305.7593,
305.8412,
305.923,
306.0048,
306.0866,
306.1684,
306.2502,
306.3321,
306.4139,
306.5625,
306.6525,
306.7425,
306.8325,
306.9225,
307.0125,
307.1025,
307.1925,
307.2825,
307.3725,
307.4414,
307.5314,
307.6214,
307.7114,
307.8014,
307.8914,
307.9814,
308.0714,
308.1614,
308.2514,
308.3203,
308.4021,
308.4839,
308.5658,
308.6476,
308.7294,
308.8112,
308.893,
308.9749,
309.0567,
309.1385,
309.2871,
309.3771,
309.4671,
309.5571,
309.6471,
309.7371,
309.8271,
309.9171,
310.0071,
310.0971,
310.166,
310.256,
310.346,
310.436,
310.526,
310.616,
310.706,
310.796,
310.886,
310.976,
311.0449,
311.1349,
311.2249,
311.3149,
311.4049,
311.4949,
311.5849,
311.6749,
311.7649,
311.8549,
311.9238,
312.0056,
312.0875,
312.1693,
312.2511,
312.3329,
312.4147,
312.4966,
312.5784,
312.6602,
312.742,
312.8906,
312.9806,
313.0706,
313.1606,
313.2506,
313.3406,
313.4306,
313.5206,
313.6106,
313.7006,
313.7695,
313.8595,
313.9495,
314.0395,
314.1295,
314.2195,
314.3095,
314.3995,
314.4895,
314.5795,
314.6484,
314.7303,
314.8121,
314.8939,
314.9757,
315.0575,
315.1393,
315.2212,
315.303,
315.3848,
315.4666,
315.6152,
315.7052,
315.7952,
315.8852,
315.9752,
316.0652,
316.1552,
316.2452,
316.3352,
316.4252,
316.4941,
316.576,
316.6578,
316.7396,
316.8214,
316.9032,
316.985,
317.0669,
317.1487,
317.2305,
317.3123,
317.4609,
317.5509,
317.6409,
317.7309,
317.8209,
317.9109,
318.0009,
318.0909,
318.1809,
318.2709,
318.3398,
318.4298,
318.5198,
318.6098,
318.6998,
318.7898,
318.8798,
318.9698,
319.0598,
319.1498,
319.2188,
319.3006,
319.3824,
319.4642,
319.546,
319.6278,
319.7097,
319.7915,
319.8733,
319.9551,
320.0369,
320.1855,
320.2755,
320.3655,
320.4555,
320.5455,
320.6355,
320.7255,
320.8155,
320.9055,
320.9955,
321.0645,
321.1545,
321.2445,
321.3345,
321.4245,
321.5145,
321.6045,
321.6945,
321.7845,
321.8745,
321.9434,
322.0252,
322.107,
322.1888,
322.2706,
322.3525,
322.4343,
322.5161,
322.5979,
322.6797,
322.7615,
322.9102,
323.0002,
323.0902,
323.1802,
323.2702,
323.3602,
323.4502,
323.5402,
323.6302,
323.7202,
323.7891,
323.8791,
323.9691,
324.0591,
324.1491,
324.2391,
324.3291,
324.4191,
324.5091,
324.5991,
324.668,
324.758,
324.848,
324.938,
325.028,
325.118,
325.208,
325.298,
325.388,
325.478,
325.5469,
325.6287,
325.7105,
325.7923,
325.8741,
325.956,
326.0378,
326.1196,
326.2014,
326.2832,
326.3651,
326.5137,
326.6037,
326.6937,
326.7837,
326.8737,
326.9637,
327.0537,
327.1437,
327.2337,
327.3237,
327.3926,
327.4826,
327.5726,
327.6626,
327.7526,
327.8426,
327.9326,
328.0226,
328.1126,
328.2026,
328.2715,
328.3615,
328.4515,
328.5415,
328.6315,
328.7215,
328.8115,
328.9015,
328.9915,
329.0815,
329.1504,
329.2322,
329.314,
329.3958,
329.4777,
329.5595,
329.6413,
329.7231,
329.8049,
329.8868,
329.9686,
330.1172,
330.199,
330.2808,
330.3626,
330.4445,
330.5263,
330.6081,
330.6899,
330.7717,
330.8536,
330.9354,
331.084,
331.184,
331.284,
331.384,
331.484,
331.584,
331.684,
331.784,
331.884,
331.875,
331.965,
332.055,
332.145,
332.235,
332.325,
332.415,
332.505,
332.595,
332.685,
332.7539,
332.8357,
332.9175,
332.9994,
333.0812,
333.163,
333.2448,
333.3266,
333.4085,
333.4903,
333.5721,
333.7207,
333.8025,
333.8843,
333.9662,
334.048,
334.1298,
334.2116,
334.2934,
334.3752,
334.4571,
334.5389,
334.6875,
334.7775,
334.8675,
334.9575,
335.0475,
335.1375,
335.2275,
335.3175,
335.4075,
335.4975,
335.5664,
335.6664,
335.7664,
335.8664,
335.9664,
336.0664,
336.1664,
336.2664,
336.3664,
336.3574,
336.4324,
336.5074,
336.5824,
336.6574,
336.7324,
336.8074,
336.8824,
336.9574,
337.0324,
337.1074,
337.1824,
337.4121,
337.5021,
337.5921,
337.6821,
337.7721,
337.8621,
337.9521,
338.0421,
338.1321,
338.2221,
338.291,
338.381,
338.471,
338.561,
338.651,
338.741,
338.831,
338.921,
339.011,
339.101,
339.1699,
339.2599,
339.3499,
339.4399,
339.5299,
339.6199,
339.7099,
339.7999,
339.8899,
339.9799,
340.0488,
340.1388,
340.2288,
340.3188,
340.4088,
340.4988,
340.5888,
340.6788,
340.7688,
340.8588,
340.9277,
341.0096,
341.0914,
341.1732,
341.255,
341.3368,
341.4186,
341.5005,
341.5823,
341.6641,
341.7459,
341.8945,
341.9845,
342.0745,
342.1645,
342.2545,
342.3445,
342.4345,
342.5245,
342.6145,
342.7045,
342.7734,
342.8553,
342.9371,
343.0189,
343.1007,
343.1825,
343.2643,
343.3462,
343.428,
343.5098,
343.5916,
343.7402,
343.8402,
343.9402,
344.0402,
344.1402,
344.2402,
344.3402,
344.4402,
344.5402,
344.5313,
344.6131,
344.6949,
344.7767,
344.8585,
344.9403,
345.0222,
345.104,
345.1858,
345.2676,
345.3494,
345.498,
345.588,
345.678,
345.768,
345.858,
345.948,
346.038,
346.128,
346.218,
346.308,
346.377,
346.4588,
346.5406,
346.6224,
346.7042,
346.786,
346.8679,
346.9497,
347.0315,
347.1133,
347.1951,
347.3438,
347.4438,
347.5437,
347.6438,
347.7437,
347.8438,
347.9438,
348.0437,
348.1438,
348.1348,
348.2248,
348.3148,
348.4048,
348.4948,
348.5848,
348.6748,
348.7648,
348.8548,
348.9448,
349.0137,
349.0955,
349.1773,
349.2591,
349.3409,
349.4228,
349.5046,
349.5864,
349.6682,
349.75,
349.8319,
349.9805,
350.0705,
350.1605,
350.2505,
350.3405,
350.4305,
350.5205,
350.6105,
350.7005,
350.7905,
350.8594,
350.9494,
351.0394,
351.1294,
351.2194,
351.3094,
351.3994,
351.4894,
351.5794,
351.6694,
351.7383,
351.8283,
351.9183,
352.0083,
352.0983,
352.1883,
352.2783,
352.3683,
352.4583,
352.5483,
352.6172,
352.699,
352.7808,
352.8626,
352.9445,
353.0263,
353.1081,
353.1899,
353.2717,
353.3536,
353.4354,
353.584,
353.674,
353.764,
353.854,
353.944,
354.034,
354.124,
354.214,
354.304,
354.394,
354.4629,
354.5529,
354.6429,
354.7329,
354.8229,
354.9129,
355.0029,
355.0929,
355.1829,
355.2729,
355.3418,
355.4318,
355.5218,
355.6118,
355.7018,
355.7918,
355.8818,
355.9718,
356.0618,
356.1518,
356.2207,
356.3025,
356.3843,
356.4662,
356.548,
356.6298,
356.7116,
356.7934,
356.8752,
356.9571,
357.0389,
357.1875,
357.2775,
357.3675,
357.4575,
357.5475,
357.6375,
357.7275,
357.8175,
357.9075,
357.9975,
358.0664,
358.1564,
358.2464,
358.3364,
358.4264,
358.5164,
358.6064,
358.6964,
358.7864,
358.8764,
358.9453,
359.0453,
359.1453,
359.2453,
359.3453,
359.4453,
359.5453,
359.6453,
359.7453
};



void setup() {
  Serial.begin(115200);
  
  pinMode(VREF1, OUTPUT);
  pinMode(VREF2, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(pulse, OUTPUT);
  
  
  analogWrite(VREF1, 217);  
  analogWrite(VREF2, 217);  

  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
 
  pinMode(ledPin, OUTPUT); // visual signal of I/O to chip
  pinMode(clockPin, OUTPUT); // SCK
  pinMode(CSnPin, OUTPUT); // CSn -- has to toggle high and low to signal chip to start data transfer
  pinMode(inputPin, INPUT); // SDA


  Serial.print("DDRB , ");
  Serial.println(DDRB,BIN);
  Serial.print("DDRD , ");
  Serial.println(DDRD,BIN);
  
}







void loop()
{
  while (Serial.available()) {

    char inChar = (char)Serial.read();
    
    if (inChar == 'p') {
      print_angle();
      delay(50);
    }
    
    else if (inChar == 's') {
      one_step();  
      print_angle();
    }
    
    else if (inChar == 'd') {
       if (dir == 1){
         dir = 0;
       }
       else {
         dir = 1;
       }
    }
    
    else if (inChar == 'c') {
       i_step = 0;
       i_w = 0;
    }
    
    else if (inChar == 'z') {
      a = readEncoder();
      anglefloat = a * 0.08789;
      while (anglefloat >= 0.9) {
        one_step();
        a = readEncoder();
        anglefloat = a * 0.08789;
        Serial.println(anglefloat,DEC);
      delay(50);        
      }
      delay(100);
      offset = readEncoder();
      zero_state = step_state;
      Serial.println(zero_state,DEC);
     }
     else if (inChar == 'g') {
       for(int x = 0; x < 400; x++){
        one_step();
        a = readEncoder();
        anglefloat = a * 0.08789;
        //Serial.print(i_step,DEC);
        //Serial.print(" , ");
        //Serial.print(i_step*0.9,DEC);
        //Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        Serial.println(anglefloat, DEC);
       }
     } 
     
     else if (inChar == 'w') {
       for(int x = 0; x < 400; x++){
        a = readEncoder();
        one_step();
        i_w = 2*x;
        EEPROM.put(i_w,a);
        
        anglefloat = a * 0.08789;
        //Serial.print(i_step,DEC);
        //Serial.print(" , ");
        //Serial.print(i_step*0.9,DEC);
        //Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        Serial.println(anglefloat, DEC);
       }
     }    
      else if (inChar == 'r') {
       for(int x = 0; x < 400; x++){
        i_r = 2*x;
       
        EEPROM.get(i_r,a);
        
        //anglefloat = a * 0.08789;
        //Serial.print(i_step,DEC);
        //Serial.print(" , ");
        //Serial.print(i_step*0.9,DEC);
        //Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        //Serial.println(anglefloat, DEC);
        Serial.println(a, DEC);
       }
     }
     
     
  else if (inChar == 'a')  {
     Serial.println("Enter angle:");      //Prompt User for input
     while (Serial.available()==0)  {     //Wait for new angle
    }   
     update_angle();
    }
  else if (inChar == 'l') {
     Serial.println("Enter encoder count:");      //Prompt User for input
     while (Serial.available()==0)  {     //Wait for new angle
    }   
     a=Serial.parseFloat();
     angle_out= lookup_angle(a);
     Serial.println(angle_out,DEC);
    }
  else if (inChar == 'f') {
  follow();
  }
  
  
  else if (inChar == 'x')  {
     Serial.println("Enter angle:");      //Prompt User for input
     while (Serial.available()==0)  {     //Wait for new angle
    }   
     setpoint();
    }
  
  }
    
       
     
     
}





float lookup_angle(int n)
{
   float a_out; 
   a_out = pgm_read_float_near(lookup+n);
  //Serial.println(angle_out,DEC);
    return a_out;
}



//_____________________________________________________________________________


void follow()
{
  while (1) {
       a = readEncoder();
       current_angle= lookup_angle(a);
      
       digitalWrite(pulse, !digitalRead(pulse));
      
      val1 = 100*sin( (100*(current_angle*pi)/180) + .45+((pi/4)*(3+ 2*zero_state)));
      analogWrite(VREF1, abs(val1));
      
      if (val1 >= 0)  {
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2,LOW);
      }
      else  {
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
      }
      val2 = 100*sin( (100*(current_angle*pi)/180) + .45+(((pi/4)*(1+ 2*zero_state))));
      analogWrite(VREF2, abs(val2));  
      
      if (val2 >= 0)  {
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4,LOW);
      }
      else  {
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
      }
      
      
      //delay(1);
      Serial.print(current_angle);
      Serial.print(" , ");
      Serial.print(val1,DEC);
      Serial.print(" , ");
      Serial.println(val2,DEC);
    }

}












//__________________________________________________________________________


void update_angle()
{
  new_angle=Serial.parseFloat();     
  diff_angle =(new_angle-current_angle);
  
  
  
  if (diff_angle > 0.05)  {
    while (diff_angle >= 0.05)  {
      current_angle +=0.1;
      
       digitalWrite(pulse, !digitalRead(pulse));
      
      val1 = 200*sin( (100*(current_angle*pi)/180) + ((pi/4)*(3+ 2*zero_state)));
      analogWrite(VREF1, abs(val1));
      
      if (val1 >= 0)  {
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2,LOW);
      }
      else  {
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
      }
      val2 = 200*sin( (100*(current_angle*pi)/180) + ((pi/4)*(1+ 2*zero_state)));
      analogWrite(VREF2, abs(val2));  
      
      if (val2 >= 0)  {
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4,LOW);
      }
      else  {
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
      }
      
      
      //delay(1);
      Serial.print(current_angle);
      Serial.print(" , ");
      Serial.print(val1,DEC);
      Serial.print(" , ");
      Serial.println(val2,DEC);
      diff_angle =(new_angle-current_angle);  
    }

  }
  else if (diff_angle <= -0.05) {
        while (diff_angle <= -0.05)  {
      current_angle -=0.1;
       
       digitalWrite(pulse, !digitalRead(pulse));
      
      val1 = 200*sin( (100*(current_angle*pi)/180) + ((pi/4)*(3+ 2*zero_state)));
      analogWrite(VREF1, abs(val1));
      
      if (val1 >= 0)  {
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2,LOW);
      }
      else  {
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
      }

      
      val2 = 200*sin( (100*(current_angle*pi)/180) + ((pi/4)*(1+ 2*zero_state)));
      analogWrite(VREF2, abs(val2));  
      
      if (val2 >= 0)  {
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4,LOW);
      }
      else  {
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
      }
      
      //delay(1);
      Serial.print(current_angle);
      Serial.print(" , ");
      Serial.print(val1,DEC);
      Serial.print(" , ");
      Serial.println(val2,DEC);
      diff_angle =(new_angle-current_angle);  
    }

    
    
  }

}


//-----------------------------------------------------------------------

void setpoint()
{
      
  while(1){
    if (Serial.available() > 0) {
       new_angle=Serial.parseFloat();
    }
    
    int start = micros();
    a = readEncoder();
    int finish = micros();
    
    
       current_angle= lookup_angle(a);
  diff_angle =(new_angle-current_angle);
  
  ep=abs(kp*diff_angle);
  if (ep>256){
    ep = 256;
  }
 // Serial.println(current_angle);
  
  //digitalWrite(pulse, !digitalRead(pulse));
  
 
 // Serial.println(ep,DEC);
  if (diff_angle > 0.05)  {
    //while (diff_angle >= 0.05)  
      current_angle +=0.1;
      
       //digitalWrite(pulse, !digitalRead(pulse));
      PORTB ^= (B00010000); 
      
      
      val1 = ep*sin( (100*(current_angle*pi)/180) + .45+((pi/4)*(3+ 2*zero_state)));
      analogWrite(VREF1, abs(val1));
      
      if (val1 >= 0)  {
        //digitalWrite(IN1, HIGH);
        PORTB |= (B00000001);
        //digitalWrite(IN2,LOW);
        PORTB &= ~(B00000010);
      }
      else  {
        //digitalWrite(IN1, LOW);
        PORTB &= ~(B00000001);
        //digitalWrite(IN2, HIGH);
        PORTB |= (B00000010);
      }
      val2 = ep*sin( (100*(current_angle*pi)/180) + .45+((pi/4)*(1+ 2*zero_state)));
      analogWrite(VREF2, abs(val2));  
      
      if (val2 >= 0)  {
        //digitalWrite(IN3, HIGH);
        PORTB |= (B00000100);
        //digitalWrite(IN4,LOW);
        PORTB &= ~(B00001000);
        
      }
      else  {
        //digitalWrite(IN3, LOW);
        PORTB &= ~(B00000100);
        //digitalWrite(IN4, HIGH);
        PORTB |= (B00001000);
        
      }
      
      
      //delay(1);
    //  Serial.print(current_angle);
    //  Serial.print(" , ");
    //  Serial.print(val1,DEC);
    //  Serial.print(" , ");
    //  Serial.println(val2,DEC);
      //diff_angle =(new_angle-current_angle);  
    

  }
  else if (diff_angle <= -0.05) {
        //while (diff_angle <= -0.05)  
      current_angle -=0.1;
       
      // digitalWrite(pulse, !digitalRead(pulse));
      
      PORTB ^= (B00010000); 
      
      val1 = ep*sin( (100*(current_angle*pi)/180) + .45+((pi/4)*(3+ 2*zero_state)));
      analogWrite(VREF1, abs(val1));
      
      if (val1 >= 0)  {
        //digitalWrite(IN1, HIGH);
        PORTB |= (B00000001);
        //digitalWrite(IN2,LOW);
        PORTB &= ~(B00000010);
      }
      else  {
        //digitalWrite(IN1, LOW);
        PORTB &= ~(B00000001);
        //digitalWrite(IN2, HIGH);
        PORTB |= (B00000010);
      }

      
      val2 = ep*sin( (100*(current_angle*pi)/180) + .45+((pi/4)*(1+ 2*zero_state)));
      analogWrite(VREF2, abs(val2));  
      
      if (val2 >= 0)  {
        //digitalWrite(IN3, HIGH);
        PORTB |= (B00000100);
        //digitalWrite(IN4,LOW);
        PORTB &= ~(B00001000);
        
      }
      else  {
        //digitalWrite(IN3, LOW);
        PORTB &= ~(B00000100);
        //digitalWrite(IN4, HIGH);
        PORTB |= (B00001000);
        
      }
      
      //delay(1);
    //  Serial.print(current_angle);
    //  Serial.print(" , ");
    //  Serial.print(val1,DEC);
    //  Serial.print(" , ");
    //  Serial.println(val2,DEC);
      //diff_angle =(new_angle-current_angle);  
    

    
         
  }
  else{
  analogWrite(VREF1, 0); 
  analogWrite(VREF2, 0);  
  
  }
  //Serial.println(finish-start,DEC);

}

}






void one_step(){

  if (dir == 0) {
        i_step += 1;     
  }
   else{
        i_step -= 1;      
  }
  step_state = ((((i_step+zero_state) % 4)+4)%4);   // arduino mod does not wrap for negative....

  
  
  Serial.println(dir,DEC);
  Serial.println(step_state,DEC);

  
      
  analogWrite(VREF1, 144);  
  analogWrite(VREF2, 144);  
    if (step_state == 0){
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4, LOW);
    }
    else if (step_state == 1){

        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4, LOW);
    }
    else if (step_state == 2){
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
    }
     else if (step_state == 3){
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
        
     }
      delay(10);
}


void print_angle()
{
        a = readEncoder();
        anglefloat = a * 0.08789;
        Serial.print(i_step,DEC);
        Serial.print(" , ");
        Serial.print(i_step*0.9,DEC);
        Serial.print(" , ");
        Serial.print(a,DEC);
        Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        Serial.println(anglefloat, DEC);
}

int readEncoder()
{
// CSn needs to cycle from high to low to initiate transfer. Then clock cycles. As it goes high
// again, data will appear on sda
  digitalWrite(CSnPin, HIGH); // CSn high
  digitalWrite(clockPin, HIGH); // CLK high
  delay(longdelay);// time between readings
  digitalWrite(ledPin, HIGH); // signal start of transfer with LED
  digitalWrite(CSnPin, LOW); // CSn low: start of transfer
  delayMicroseconds(shortdelay); // delay for chip initialization
  digitalWrite(clockPin, LOW); // CLK goes low: start clocking
  delayMicroseconds(shortdelay); // hold low
 // for (int x=0; x <16; x++) // clock signal, 16 transitions, output to clock pin
 for (int x=0; x <18; x++) // clock signal, 16 transitions, output to clock pin
  {
    digitalWrite(clockPin, HIGH); //clock goes high
    delayMicroseconds(shortdelay); //
    inputstream =digitalRead(inputPin); // read one bit of data from pin
//Serial.print(inputstream, DEC);
    packeddata = ((packeddata << 1) + inputstream);// left-shift summing variable, add pin value
    digitalWrite(clockPin, LOW);
    delayMicroseconds(shortdelay); // end of one clock cycle
  }
// end of entire clock cycle
//Serial.println(" ");
  digitalWrite(ledPin, LOW); // signal end of transmission
// lots of diagnostics for verifying bitwise operations
//Serial.print("packed:");
//Serial.println(packeddata,DEC);
//Serial.print("pack bin: ");
//Serial.println(packeddata,BIN);
  angle = packeddata & anglemask; // mask rightmost 6 digits of packeddata to zero, into angle.
//Serial.print("mask: ");
//Serial.println(anglemask, BIN);
//Serial.print("bin angle:");
//Serial.println(angle, BIN);
//Serial.print("angle: ");
//Serial.println(angle, DEC);
  angle = (angle >> 6); // shift 16-digit angle right 6 digits to form 10-digit value
//Serial.print("angleshft:");
//Serial.println(angle, BIN);
//Serial.print("angledec: ");
//Serial.println(angle, DEC);
//angle = angle * 0.3515; // angle * (360/1024) == actual degrees
  //anglefloat = angle * 0.08789; // angle * (360/4096) == actual degrees
  angletemp = angle;
  //Serial.print("angle: "); // and, finally, print it.
  
//  Serial.print(i_step,DEC);
//  Serial.print(" , ");
//  Serial.print(i_step*0.9,DEC);
//  Serial.print(" , ");
//  Serial.println(anglefloat-offset, DEC);
  
  
  
//Serial.println("--------------------");
//Serial.print("raw: "); // this was the prefix for the bit-by-bit diag output inside the loop.
  if (debug)
  {
    statusbits = packeddata & statusmask;
    DECn = statusbits & 2; // goes high if magnet moved away from IC
    INCn = statusbits & 4; // goes high if magnet moved towards IC
    LIN = statusbits & 8; // goes high for linearity alarm
    COF = statusbits & 16; // goes high for cordic overflow: data invalid
    OCF = statusbits & 32; // this is 1 when the chip startup is finished.
    if (DECn && INCn) { Serial.println("magnet moved out of range"); }
    else
    {
      if (DECn) { Serial.println("magnet moved away from chip"); }
      if (INCn) { Serial.println("magnet moved towards chip"); }
    }
    if (LIN) { Serial.println("linearity alarm: magnet misaligned? Data questionable."); }
    if (COF) { Serial.println("cordic overflow: magnet misaligned? Data invalid."); }
  }

  packeddata = 0; // reset both variables to zero so they don't just accumulate
  angle = 0;
  
//  return anglefloat;
return angletemp;
}

