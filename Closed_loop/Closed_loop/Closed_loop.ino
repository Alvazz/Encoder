/*


First attempt at closing the loop using AS5145 encoder, A4954 driver

Controlled via a serial terminal at 115200 baud.


____
    |
  13|-> LED 
  12|-> pulse         _
  11|-> clock          \
  10|->Chip Select      |---AS5145
   9|->data           _/
   8|->IN4             \
   7|->IN3              \
  ~6|->VREF2             \___A4954
  ~5|->VREF1             /           
   4|->IN2              /
  ~3|->IN1            _/
   2|
   1|
   0|
____|
  

Implemented commands are:

p  -  print [step count] , [assumed angle] , [encoder reading]

c  -  clear step count & assumed angle

s  -  step

d  -  dir toggle

z  -  seek zero position

g  -  Go! steps around 400 times

w  -  Same as go, but stores encoder angles to EEPROM

r  -  returns EEPROM contents

a  -  prompts user to enter angle 



*/


#include <EEPROM.h>
#include <math.h>
#include <avr/pgmspace.h>



float kp = 20.0;
int ep = 0;
float ki = 2.0;
float KF = 1.0;


int dir = 1;
int step_state = 1;



int inputstream = 0; //one bit read from pin
long packeddata = 0; //two bytes concatenated from inputstream
long angle = 0; //holds processed angle value
long angletemp;
float anglefloat = 0; 

int a = 0;  //angle value in zero routine
float offset = 0.000000000000000; //zero-offest of closest full step

//long anglemask = 65472; //0x1111111111000000: mask to obtain first 10 digits with position info
long anglemask = 262080; // 0x111111111111000000: mask to obtain first 12 digits with position info
long statusmask = 63; //0x000000000111111; mask to obtain last 6 digits containing status info
long statusbits; //holds status/error information
int DECn; //bit holding decreasing magnet field error data
int INCn; //bit holding increasing magnet field error data
int OCF; //bit holding startup-valid bit
int COF; //bit holding cordic DSP processing error data
int LIN; //bit holding magnet field displacement error data
int debug = 1; //SET THIS TO 0 TO DISABLE PRINTING OF ERROR CODES
int shortdelay = 5; // this is the microseconds of delay in the data clock
int longdelay = 1; // this is the milliseconds between readings


int i_step = 0; // step index
int i_w = 0;// write index
int i_r = 0; // read index

//___________________________________

const float pi = 3.14159;
const int  half = 134;//128;

float new_angle = 0.0; //input angle
float current_angle = 0.0; //current angle
float diff_angle = 0.0;
int val1 = 0;
int val2 = 0;

//////////////////////////////////////
//////////////////PINS////////////////
//////////////////////////////////////
int IN1 = 8;
int IN2 = 9;
int VREF1 = 5;
int VREF2 = 6;
int IN3 = 10;
int IN4 = 11;
int pulse = 12;


const int ledPin = 13; //LED connected to digital pin 13
const int clockPin = 2; //output to clock
const int CSnPin = 3; //output to chip select
const int inputPin = 7; //read AS5040


//////////////////////////////////////
//////////////////////////////////////
//////////////////////////////////////


float angle_out=0.0;
int zero_state =0;




const PROGMEM float lookup[] = {
 0.4395,0.5295,0.6195,0.7095,0.7995,0.8895,0.9795,1.0695,1.1595,1.2495,1.3184,1.4084,1.4984,1.5884,1.6784,1.7684,1.8584,1.9484,2.0384,2.1284,2.1973,2.2873,2.3773,2.4673,2.5573,2.6473,2.7373,2.8273,2.9173,3.0073,3.0762,3.158,3.2398,3.3216,3.4034,3.4853,3.5671,3.6489,3.7307,3.8125,3.8944,4.043,4.133,4.223,4.313,4.403,4.493,4.583,4.673,4.763,4.853,4.9219,5.0119,5.1019,5.1919,5.2819,5.3719,5.4619,5.5519,5.6419,5.7319,5.8008,5.8826,5.9644,6.0462,6.1281,6.2099,6.2917,6.3735,6.4553,6.5371,6.619,6.7676,6.8494,6.9312,7.013,7.0949,7.1767,7.2585,7.3403,7.4221,7.5039,7.5858,7.7344,7.8344,7.9344,8.0344,8.1344,8.2344,8.3344,8.4344,8.5344,8.5254,8.6154,8.7054,8.7954,8.8854,8.9754,9.0654,9.1554,9.2454,9.3354,9.4043,9.4861,9.5679,9.6498,9.7316,9.8134,9.8952,9.977,10.0588,10.1407,10.2225,10.3711,10.4529,10.5347,10.6165,10.6984,10.7802,10.862,10.9438,11.0256,11.1075,11.1893,11.3379,11.4379,11.5379,11.6379,11.7379,11.8379,11.9379,12.0379,12.1379,12.1289,12.2289,12.3289,12.4289,12.5289,12.6289,12.7289,12.8289,12.9289,12.9199,13.0017,13.0836,13.1654,13.2472,13.329,13.4108,13.4926,13.5745,13.6563,13.7381,13.8867,13.9617,14.0367,14.1117,14.1867,14.2617,14.3367,14.4117,14.4867,14.5617,14.6367,14.7117,14.9414,15.0414,15.1414,15.2414,15.3414,15.4414,15.5414,15.6414,15.7414,15.7324,15.8324,15.9324,16.0324,16.1324,16.2324,16.3324,16.4324,16.5324,16.5234,16.6053,16.6871,16.7689,16.8507,16.9325,17.0143,17.0962,17.178,17.2598,17.3416,17.4902,17.5721,17.6539,17.7357,17.8175,17.8993,17.9811,18.063,18.1448,18.2266,18.3084,18.457,18.557,18.657,18.757,18.857,18.957,19.057,19.157,19.257,19.248,19.338,19.428,19.518,19.608,19.698,19.788,19.878,19.968,20.058,20.127,20.2088,20.2906,20.3724,20.4542,20.536,20.6179,20.6997,20.7815,20.8633,20.9451,21.0938,21.1837,21.2737,21.3637,21.4537,21.5437,21.6337,21.7237,21.8137,21.9037,21.9727,22.0545,22.1363,22.2181,22.2999,22.3817,22.4636,22.5454,22.6272,22.709,22.7908,22.9395,23.0395,23.1395,23.2395,23.3395,23.4395,23.5395,23.6395,23.7395,23.7305,23.8123,23.8941,23.9759,24.0577,24.1396,24.2214,24.3032,24.385,24.4668,24.5487,24.6973,24.7873,24.8773,24.9673,25.0573,25.1473,25.2373,25.3273,25.4173,25.5073,25.5762,25.6662,25.7562,25.8462,25.9362,26.0262,26.1162,26.2062,26.2962,26.3862,26.4551,26.5369,26.6187,26.7005,26.7824,26.8642,26.946,27.0278,27.1096,27.1914,27.2733,27.4219,27.5119,27.6019,27.6919,27.7819,27.8719,27.9619,28.0519,28.1419,28.2319,28.3008,28.3908,28.4808,28.5708,28.6608,28.7508,28.8408,28.9308,29.0208,29.1108,29.1797,29.2697,29.3597,29.4497,29.5397,29.6297,29.7197,29.8097,29.8997,29.9897,30.0586,30.1486,30.2386,30.3286,30.4186,30.5086,30.5986,30.6886,30.7786,30.8686,30.9375,31.0275,31.1175,31.2075,31.2975,31.3875,31.4775,31.5675,31.6575,31.7475,31.8164,31.8982,31.98,32.0619,32.1437,32.2255,32.3073,32.3891,32.471,32.5528,32.6346,32.7832,32.8832,32.9832,33.0832,33.1832,33.2832,33.3832,33.4832,33.5832,33.5742,33.656,33.7379,33.8197,33.9015,33.9833,34.0651,34.1469,34.2288,34.3106,34.3924,34.541,34.631,34.721,34.811,34.901,34.991,35.081,35.171,35.261,35.351,35.4199,35.5099,35.5999,35.6899,35.7799,35.8699,35.9599,36.0499,36.1399,36.2299,36.2988,36.3806,36.4625,36.5443,36.6261,36.7079,36.7897,36.8716,36.9534,37.0352,37.117,37.2656,37.3656,37.4656,37.5656,37.6656,37.7656,37.8656,37.9656,38.0656,38.0566,38.1385,38.2203,38.3021,38.3839,38.4657,38.5475,38.6294,38.7112,38.793,38.8748,39.0234,39.1134,39.2034,39.2934,39.3834,39.4734,39.5634,39.6534,39.7434,39.8334,39.9023,39.9923,40.0823,40.1723,40.2623,40.3523,40.4423,40.5323,40.6223,40.7123,40.7813,40.8713,40.9612,41.0513,41.1412,41.2313,41.3212,41.4113,41.5012,41.5913,41.6602,41.7502,41.8402,41.9302,42.0202,42.1102,42.2002,42.2902,42.3802,42.4702,42.5391,42.6209,42.7027,42.7845,42.8663,42.9482,43.03,43.1118,43.1936,43.2754,43.3572,43.5059,43.5959,43.6859,43.7759,43.8659,43.9559,44.0459,44.1359,44.2259,44.3159,44.3848,44.4748,44.5648,44.6548,44.7448,44.8348,44.9248,45.0148,45.1048,45.1948,45.2637,45.3637,45.4637,45.5637,45.6637,45.7637,45.8637,45.9637,46.0637,46.0547,46.1297,46.2047,46.2797,46.3547,46.4297,46.5047,46.5797,46.6547,46.7297,46.8047,46.8797,47.1094,47.1994,47.2894,47.3794,47.4694,47.5594,47.6494,47.7394,47.8294,47.9194,47.9883,48.0883,48.1883,48.2883,48.3883,48.4883,48.5883,48.6883,48.7883,48.7793,48.8693,48.9593,49.0493,49.1393,49.2293,49.3193,49.4093,49.4993,49.5893,49.6582,49.74,49.8218,49.9037,49.9855,50.0673,50.1491,50.2309,50.3127,50.3946,50.4764,50.625,50.7068,50.7886,50.8705,50.9523,51.0341,51.1159,51.1977,51.2795,51.3614,51.4432,51.5918,51.6918,51.7918,51.8918,51.9918,52.0918,52.1918,52.2918,52.3918,52.3828,52.4728,52.5628,52.6528,52.7428,52.8328,52.9228,53.0128,53.1028,53.1928,53.2617,53.3517,53.4417,53.5317,53.6217,53.7117,53.8017,53.8917,53.9817,54.0717,54.1406,54.2224,54.3043,54.3861,54.4679,54.5497,54.6315,54.7134,54.7952,54.877,54.9588,55.1074,55.2074,55.3074,55.4074,55.5074,55.6074,55.7074,55.8074,55.9074,55.8984,55.9884,56.0784,56.1684,56.2584,56.3484,56.4384,56.5284,56.6184,56.7084,56.7773,56.8592,56.941,57.0228,57.1046,57.1864,57.2683,57.3501,57.4319,57.5137,57.5955,57.7441,57.826,57.9078,57.9896,58.0714,58.1532,58.235,58.3169,58.3987,58.4805,58.5623,58.7109,58.8109,58.9109,59.0109,59.1109,59.2109,59.3109,59.4109,59.5109,59.502,59.592,59.682,59.772,59.862,59.952,60.042,60.132,60.222,60.312,60.3809,60.4627,60.5445,60.6263,60.7081,60.79,60.8718,60.9536,61.0354,61.1172,61.199,61.3477,61.4377,61.5277,61.6177,61.7077,61.7977,61.8877,61.9777,62.0677,62.1577,62.2266,62.3166,62.4066,62.4966,62.5866,62.6766,62.7666,62.8566,62.9466,63.0366,63.1055,63.2055,63.3055,63.4055,63.5055,63.6055,63.7055,63.8055,63.9055,63.8965,63.9783,64.0601,64.1419,64.2238,64.3056,64.3874,64.4692,64.551,64.6328,64.7147,64.8633,64.9451,65.0269,65.1087,65.1906,65.2724,65.3542,65.436,65.5178,65.5996,65.6815,65.8301,65.9301,66.0301,66.1301,66.2301,66.3301,66.4301,66.5301,66.6301,66.6211,66.7111,66.8011,66.8911,66.9811,67.0711,67.1611,67.2511,67.3411,67.4311,67.5,67.59,67.68,67.77,67.86,67.95,68.04,68.13,68.22,68.31,68.3789,68.4607,68.5425,68.6244,68.7062,68.788,68.8698,68.9516,69.0335,69.1153,69.1971,69.3457,69.4457,69.5457,69.6457,69.7457,69.8457,69.9457,70.0457,70.1457,70.1367,70.2185,70.3004,70.3822,70.464,70.5458,70.6276,70.7094,70.7913,70.8731,70.9549,71.1035,71.1853,71.2672,71.349,71.4308,71.5126,71.5944,71.6762,71.7581,71.8399,71.9217,72.0703,72.1603,72.2503,72.3403,72.4303,72.5203,72.6103,72.7003,72.7903,72.8803,72.9492,73.0492,73.1492,73.2492,73.3492,73.4492,73.5492,73.6492,73.7492,73.7402,73.8302,73.9202,74.0102,74.1002,74.1902,74.2802,74.3702,74.4602,74.5502,74.6191,74.701,74.7828,74.8646,74.9464,75.0282,75.11,75.1919,75.2737,75.3555,75.4373,75.5859,75.6759,75.7659,75.8559,75.9459,76.0359,76.1259,76.2159,76.3059,76.3959,76.4648,76.5548,76.6448,76.7348,76.8248,76.9148,77.0048,77.0948,77.1848,77.2748,77.3438,77.4338,77.5238,77.6137,77.7037,77.7938,77.8838,77.9737,78.0637,78.1538,78.2227,78.3045,78.3863,78.4681,78.5499,78.6317,78.7136,78.7954,78.8772,78.959,79.0408,79.1895,79.2795,79.3695,79.4595,79.5495,79.6395,79.7295,79.8195,79.9095,79.9995,80.0684,80.1584,80.2484,80.3384,80.4284,80.5184,80.6084,80.6984,80.7884,80.8784,80.9473,81.0373,81.1273,81.2173,81.3073,81.3973,81.4873,81.5773,81.6673,81.7573,81.8262,81.908,81.9898,82.0716,82.1534,82.2353,82.3171,82.3989,82.4807,82.5625,82.6444,82.793,82.883,82.973,83.063,83.153,83.243,83.333,83.423,83.513,83.603,83.6719,83.7719,83.8719,83.9719,84.0719,84.1719,84.2719,84.3719,84.4719,84.4629,84.5447,84.6265,84.7083,84.7902,84.872,84.9538,85.0356,85.1174,85.1993,85.2811,85.4297,85.5115,85.5933,85.6751,85.757,85.8388,85.9206,86.0024,86.0842,86.1661,86.2479,86.3965,86.4965,86.5965,86.6965,86.7965,86.8965,86.9965,87.0965,87.1965,87.1875,87.2775,87.3675,87.4575,87.5475,87.6375,87.7275,87.8175,87.9075,87.9975,88.0664,88.1564,88.2464,88.3364,88.4264,88.5164,88.6064,88.6964,88.7864,88.8764,88.9453,89.0271,89.1089,89.1908,89.2726,89.3544,89.4362,89.518,89.5999,89.6817,89.7635,89.9121,89.9939,90.0757,90.1576,90.2394,90.3212,90.403,90.4848,90.5667,90.6485,90.7303,90.8789,90.9689,91.0589,91.1489,91.2389,91.3289,91.4189,91.5089,91.5989,91.6889,91.7578,91.8578,91.9578,92.0578,92.1578,92.2578,92.3578,92.4578,92.5578,92.5488,92.6306,92.7125,92.7943,92.8761,92.9579,93.0397,93.1216,93.2034,93.2852,93.367,93.5156,93.5974,93.6793,93.7611,93.8429,93.9247,94.0065,94.0884,94.1702,94.252,94.3338,94.4824,94.5724,94.6624,94.7524,94.8424,94.9324,95.0224,95.1124,95.2024,95.2924,95.3613,95.4613,95.5613,95.6613,95.7613,95.8613,95.9613,96.0613,96.1613,96.1523,96.2342,96.316,96.3978,96.4796,96.5614,96.6433,96.7251,96.8069,96.8887,96.9705,97.1191,97.201,97.2828,97.3646,97.4464,97.5282,97.61,97.6919,97.7737,97.8555,97.9373,98.0859,98.1759,98.2659,98.3559,98.4459,98.5359,98.6259,98.7159,98.8059,98.8959,98.9648,99.0648,99.1648,99.2648,99.3648,99.4648,99.5648,99.6648,99.7648,99.7559,99.8459,99.9359,100.0259,100.1159,100.2059,100.2959,100.3859,100.4759,100.5659,100.6348,100.7098,100.7848,100.8598,100.9348,101.0098,101.0848,101.1598,101.2348,101.3098,101.3848,101.4598,101.6895,101.7795,101.8695,101.9595,102.0495,102.1395,102.2295,102.3195,102.4095,102.4995,102.5684,102.6684,102.7684,102.8684,102.9684,103.0684,103.1684,103.2684,103.3684,103.3594,103.4412,103.523,103.6048,103.6866,103.7685,103.8503,103.9321,104.0139,104.0957,104.1776,104.3262,104.408,104.4898,104.5716,104.6534,104.7353,104.8171,104.8989,104.9807,105.0625,105.1444,105.293,105.383,105.473,105.563,105.653,105.743,105.833,105.923,106.013,106.103,106.1719,106.2719,106.3719,106.4719,106.5719,106.6719,106.7719,106.8719,106.9719,106.9629,107.0379,107.1129,107.1879,107.2629,107.3379,107.4129,107.4879,107.5629,107.6379,107.7129,107.7879,108.0176,108.1076,108.1976,108.2876,108.3776,108.4676,108.5576,108.6476,108.7376,108.8276,108.8965,108.9865,109.0765,109.1665,109.2565,109.3465,109.4365,109.5265,109.6165,109.7065,109.7754,109.8654,109.9554,110.0454,110.1354,110.2254,110.3154,110.4054,110.4954,110.5854,110.6543,110.7361,110.8179,110.8998,110.9816,111.0634,111.1452,111.227,111.3088,111.3907,111.4725,111.6211,111.7111,111.8011,111.8911,111.9811,112.0711,112.1611,112.2511,112.3411,112.4311,112.5,112.59,112.68,112.77,112.86,112.95,113.04,113.13,113.22,113.31,113.3789,113.4607,113.5425,113.6244,113.7062,113.788,113.8698,113.9516,114.0335,114.1153,114.1971,114.3457,114.4357,114.5257,114.6157,114.7057,114.7957,114.8857,114.9757,115.0657,115.1557,115.2246,115.3146,115.4046,115.4946,115.5846,115.6746,115.7646,115.8546,115.9446,116.0346,116.1035,116.1935,116.2835,116.3735,116.4635,116.5535,116.6435,116.7335,116.8235,116.9135,116.9824,117.0642,117.1461,117.2279,117.3097,117.3915,117.4733,117.5551,117.637,117.7188,117.8006,117.9492,118.0392,118.1292,118.2192,118.3092,118.3992,118.4892,118.5792,118.6692,118.7592,118.8281,118.9099,118.9918,119.0736,119.1554,119.2372,119.319,119.4009,119.4827,119.5645,119.6463,119.7949,119.8949,119.9949,120.0949,120.1949,120.2949,120.3949,120.4949,120.5949,120.5859,120.6678,120.7496,120.8314,120.9132,120.995,121.0768,121.1587,121.2405,121.3223,121.4041,121.5527,121.6427,121.7327,121.8227,121.9127,122.0027,122.0927,122.1827,122.2727,122.3627,122.4316,122.5135,122.5953,122.6771,122.7589,122.8407,122.9225,123.0044,123.0862,123.168,123.2498,123.3984,123.4884,123.5784,123.6684,123.7584,123.8484,123.9384,124.0284,124.1184,124.2084,124.2773,124.3592,124.441,124.5228,124.6046,124.6864,124.7683,124.8501,124.9319,125.0137,125.0955,125.2441,125.3341,125.4241,125.5141,125.6041,125.6941,125.7841,125.8741,125.9641,126.0541,126.123,126.213,126.303,126.393,126.483,126.573,126.663,126.753,126.843,126.933,127.002,127.0838,127.1656,127.2474,127.3292,127.411,127.4929,127.5747,127.6565,127.7383,127.8201,127.9688,128.0687,128.1687,128.2688,128.3688,128.4688,128.5687,128.6687,128.7688,128.7598,128.8416,128.9234,129.0052,129.087,129.1689,129.2507,129.3325,129.4143,129.4961,129.5779,129.7266,129.8084,129.8902,129.972,130.0538,130.1357,130.2175,130.2993,130.3811,130.4629,130.5447,130.6934,130.7834,130.8734,130.9634,131.0534,131.1434,131.2334,131.3234,131.4134,131.5034,131.5723,131.6623,131.7523,131.8423,131.9323,132.0223,132.1123,132.2023,132.2923,132.3823,132.4512,132.5412,132.6312,132.7212,132.8112,132.9012,132.9912,133.0812,133.1712,133.2612,133.3301,133.4119,133.4937,133.5755,133.6574,133.7392,133.821,133.9028,133.9846,134.0664,134.1483,134.2969,134.3869,134.4769,134.5669,134.6569,134.7469,134.8369,134.9269,135.0169,135.1069,135.1758,135.2576,135.3394,135.4212,135.5031,135.5849,135.6667,135.7485,135.8303,135.9121,135.994,136.1426,136.2326,136.3226,136.4126,136.5026,136.5926,136.6826,136.7726,136.8626,136.9526,137.0215,137.1115,137.2015,137.2915,137.3815,137.4715,137.5615,137.6515,137.7415,137.8315,137.9004,137.9822,138.064,138.1458,138.2277,138.3095,138.3913,138.4731,138.5549,138.6368,138.7186,138.8672,138.9572,139.0472,139.1372,139.2272,139.3172,139.4072,139.4972,139.5872,139.6772,139.7461,139.8361,139.9261,140.0161,140.1061,140.1961,140.2861,140.3761,140.4661,140.5561,140.625,140.715,140.805,140.895,140.985,141.075,141.165,141.255,141.345,141.435,141.5039,141.5857,141.6675,141.7494,141.8312,141.913,141.9948,142.0766,142.1585,142.2403,142.3221,142.4707,142.5525,142.6343,142.7162,142.798,142.8798,142.9616,143.0434,143.1252,143.2071,143.2889,143.4375,143.5375,143.6375,143.7375,143.8375,143.9375,144.0375,144.1375,144.2375,144.2285,144.3185,144.4085,144.4985,144.5885,144.6785,144.7685,144.8585,144.9485,145.0385,145.1074,145.1892,145.2711,145.3529,145.4347,145.5165,145.5983,145.6801,145.762,145.8438,145.9256,146.0742,146.156,146.2379,146.3197,146.4015,146.4833,146.5651,146.6469,146.7288,146.8106,146.8924,147.041,147.141,147.241,147.341,147.441,147.541,147.641,147.741,147.841,147.832,147.9138,147.9957,148.0775,148.1593,148.2411,148.3229,148.4048,148.4866,148.5684,148.6502,148.7988,148.8888,148.9788,149.0688,149.1588,149.2488,149.3388,149.4288,149.5188,149.6088,149.6777,149.7596,149.8414,149.9232,150.005,150.0868,150.1686,150.2505,150.3323,150.4141,150.4959,150.6445,150.7345,150.8245,150.9145,151.0045,151.0945,151.1845,151.2745,151.3645,151.4545,151.5234,151.6134,151.7034,151.7934,151.8834,151.9734,152.0634,152.1534,152.2434,152.3334,152.4023,152.4923,152.5823,152.6723,152.7623,152.8523,152.9423,153.0323,153.1223,153.2123,153.2813,153.3631,153.4449,153.5267,153.6085,153.6903,153.7722,153.854,153.9358,154.0176,154.0994,154.248,154.338,154.428,154.518,154.608,154.698,154.788,154.878,154.968,155.058,155.127,155.217,155.307,155.397,155.487,155.577,155.667,155.757,155.847,155.937,156.0059,156.0959,156.1859,156.2759,156.3659,156.4559,156.5459,156.6359,156.7259,156.8159,156.8848,156.9666,157.0484,157.1302,157.212,157.2939,157.3757,157.4575,157.5393,157.6211,157.7029,157.8516,157.9416,158.0316,158.1216,158.2116,158.3016,158.3916,158.4816,158.5716,158.6616,158.7305,158.8205,158.9105,159.0005,159.0905,159.1805,159.2705,159.3605,159.4505,159.5405,159.6094,159.6994,159.7894,159.8794,159.9694,160.0594,160.1494,160.2394,160.3294,160.4194,160.4883,160.5783,160.6683,160.7583,160.8483,160.9383,161.0283,161.1183,161.2083,161.2983,161.3672,161.449,161.5308,161.6126,161.6945,161.7763,161.8581,161.9399,162.0217,162.1036,162.1854,162.334,162.4158,162.4976,162.5794,162.6613,162.7431,162.8249,162.9067,162.9885,163.0703,163.1522,163.3008,163.4008,163.5008,163.6008,163.7008,163.8008,163.9008,164.0008,164.1008,164.0918,164.1818,164.2718,164.3618,164.4518,164.5418,164.6318,164.7218,164.8118,164.9018,164.9707,165.0525,165.1343,165.2162,165.298,165.3798,165.4616,165.5434,165.6252,165.7071,165.7889,165.9375,166.0275,166.1175,166.2075,166.2975,166.3875,166.4775,166.5675,166.6575,166.7475,166.8164,166.8982,166.98,167.0619,167.1437,167.2255,167.3073,167.3891,167.471,167.5528,167.6346,167.7832,167.8832,167.9832,168.0832,168.1832,168.2832,168.3832,168.4832,168.5832,168.5742,168.656,168.7379,168.8197,168.9015,168.9833,169.0651,169.1469,169.2288,169.3106,169.3924,169.541,169.6228,169.7047,169.7865,169.8683,169.9501,170.0319,170.1137,170.1956,170.2774,170.3592,170.5078,170.6078,170.7078,170.8078,170.9078,171.0078,171.1078,171.2078,171.3078,171.2988,171.3888,171.4788,171.5688,171.6588,171.7488,171.8388,171.9288,172.0188,172.1088,172.1777,172.2596,172.3414,172.4232,172.505,172.5868,172.6686,172.7505,172.8323,172.9141,172.9959,173.1445,173.2345,173.3245,173.4145,173.5045,173.5945,173.6845,173.7745,173.8645,173.9545,174.0234,174.1134,174.2034,174.2934,174.3834,174.4734,174.5634,174.6534,174.7434,174.8334,174.9023,174.9923,175.0823,175.1723,175.2623,175.3523,175.4423,175.5323,175.6223,175.7123,175.7813,175.8631,175.9449,176.0267,176.1085,176.1903,176.2722,176.354,176.4358,176.5176,176.5994,176.748,176.838,176.928,177.018,177.108,177.198,177.288,177.378,177.468,177.558,177.627,177.717,177.807,177.897,177.987,178.077,178.167,178.257,178.347,178.437,178.5059,178.5877,178.6695,178.7513,178.8331,178.915,178.9968,179.0786,179.1604,179.2422,179.324,179.4727,179.5627,179.6527,179.7427,179.8327,179.9227,180.0127,180.1027,180.1927,180.2827,180.3516,180.4416,180.5316,180.6216,180.7116,180.8016,180.8916,180.9816,181.0716,181.1616,181.2305,181.3205,181.4105,181.5005,181.5905,181.6805,181.7705,181.8605,181.9505,182.0405,182.1094,182.1912,182.273,182.3548,182.4366,182.5185,182.6003,182.6821,182.7639,182.8457,182.9276,183.0762,183.158,183.2398,183.3216,183.4034,183.4853,183.5671,183.6489,183.7307,183.8125,183.8944,184.043,184.143,184.243,184.343,184.443,184.543,184.643,184.743,184.843,184.834,184.924,185.014,185.104,185.194,185.284,185.374,185.464,185.554,185.644,185.7129,185.8029,185.8929,185.9829,186.0729,186.1629,186.2529,186.3429,186.4329,186.5229,186.5918,186.6668,186.7418,186.8168,186.8918,186.9668,187.0418,187.1168,187.1918,187.2668,187.3418,187.4168,187.6465,187.7465,187.8465,187.9465,188.0465,188.1465,188.2465,188.3465,188.4465,188.4375,188.5375,188.6375,188.7375,188.8375,188.9375,189.0375,189.1375,189.2375,189.2285,189.3035,189.3785,189.4535,189.5285,189.6035,189.6785,189.7535,189.8285,189.9035,189.9785,190.0535,190.2832,190.3732,190.4632,190.5532,190.6432,190.7332,190.8232,190.9132,191.0032,191.0932,191.1621,191.2521,191.3421,191.4321,191.5221,191.6121,191.7021,191.7921,191.8821,191.9721,192.041,192.141,192.241,192.341,192.441,192.541,192.641,192.741,192.841,192.832,192.907,192.982,193.057,193.132,193.207,193.282,193.357,193.432,193.507,193.582,193.657,193.8867,193.9767,194.0667,194.1567,194.2467,194.3367,194.4267,194.5167,194.6067,194.6967,194.7656,194.8656,194.9656,195.0656,195.1656,195.2656,195.3656,195.4656,195.5656,195.5566,195.6466,195.7366,195.8266,195.9166,196.0066,196.0966,196.1866,196.2766,196.3666,196.4355,196.5174,196.5992,196.681,196.7628,196.8446,196.9265,197.0083,197.0901,197.1719,197.2537,197.4023,197.4842,197.566,197.6478,197.7296,197.8114,197.8933,197.9751,198.0569,198.1387,198.2205,198.3691,198.4591,198.5491,198.6391,198.7291,198.8191,198.9091,198.9991,199.0891,199.1791,199.248,199.348,199.448,199.548,199.648,199.748,199.848,199.948,200.048,200.0391,200.1209,200.2027,200.2845,200.3663,200.4482,200.53,200.6118,200.6936,200.7754,200.8572,201.0059,201.0959,201.1859,201.2759,201.3659,201.4559,201.5459,201.6359,201.7259,201.8159,201.8848,201.9748,202.0648,202.1548,202.2448,202.3348,202.4248,202.5148,202.6048,202.6948,202.7637,202.8455,202.9273,203.0091,203.0909,203.1728,203.2546,203.3364,203.4182,203.5,203.5819,203.7305,203.8205,203.9105,204.0005,204.0905,204.1805,204.2705,204.3605,204.4505,204.5405,204.6094,204.7094,204.8094,204.9094,205.0094,205.1094,205.2094,205.3094,205.4094,205.4004,205.4822,205.564,205.6458,205.7277,205.8095,205.8913,205.9731,206.0549,206.1368,206.2186,206.3672,206.4572,206.5472,206.6372,206.7272,206.8172,206.9072,206.9972,207.0872,207.1772,207.2461,207.3361,207.4261,207.5161,207.6061,207.6961,207.7861,207.8761,207.9661,208.0561,208.125,208.215,208.305,208.395,208.485,208.575,208.665,208.755,208.845,208.935,209.0039,209.0857,209.1675,209.2494,209.3312,209.413,209.4948,209.5766,209.6585,209.7403,209.8221,209.9707,210.0607,210.1507,210.2407,210.3307,210.4207,210.5107,210.6007,210.6907,210.7807,210.8496,210.9396,211.0296,211.1196,211.2096,211.2996,211.3896,211.4796,211.5696,211.6596,211.7285,211.8185,211.9085,211.9985,212.0885,212.1785,212.2685,212.3585,212.4485,212.5385,212.6074,212.6892,212.7711,212.8529,212.9347,213.0165,213.0983,213.1801,213.262,213.3438,213.4256,213.5742,213.6642,213.7542,213.8442,213.9342,214.0242,214.1142,214.2042,214.2942,214.3842,214.4531,214.5431,214.6331,214.7231,214.8131,214.9031,214.9931,215.0831,215.1731,215.2631,215.332,215.422,215.512,215.602,215.692,215.782,215.872,215.962,216.052,216.142,216.2109,216.2928,216.3746,216.4564,216.5382,216.62,216.7018,216.7837,216.8655,216.9473,217.0291,217.1777,217.2777,217.3777,217.4777,217.5777,217.6777,217.7777,217.8777,217.9777,217.9688,218.0588,218.1488,218.2388,218.3288,218.4187,218.5087,218.5987,218.6887,218.7788,218.8477,218.9295,219.0113,219.0931,219.1749,219.2567,219.3386,219.4204,219.5022,219.584,219.6658,219.8145,219.9045,219.9945,220.0845,220.1745,220.2645,220.3545,220.4445,220.5345,220.6245,220.6934,220.7834,220.8734,220.9634,221.0534,221.1434,221.2334,221.3234,221.4134,221.5034,221.5723,221.6623,221.7523,221.8423,221.9323,222.0223,222.1123,222.2023,222.2923,222.3823,222.4512,222.5412,222.6312,222.7212,222.8112,222.9012,222.9912,223.0812,223.1712,223.2612,223.3301,223.4119,223.4937,223.5755,223.6574,223.7392,223.821,223.9028,223.9846,224.0664,224.1483,224.2969,224.3969,224.4969,224.5969,224.6969,224.7969,224.8969,224.9969,225.0969,225.0879,225.1779,225.2679,225.3579,225.4479,225.5379,225.6279,225.7179,225.8079,225.8979,225.9668,226.0486,226.1304,226.2123,226.2941,226.3759,226.4577,226.5395,226.6213,226.7032,226.785,226.9336,227.0154,227.0972,227.179,227.2609,227.3427,227.4245,227.5063,227.5881,227.67,227.7518,227.9004,228.0004,228.1004,228.2004,228.3004,228.4004,228.5004,228.6004,228.7004,228.6914,228.7814,228.8714,228.9614,229.0514,229.1414,229.2314,229.3214,229.4114,229.5014,229.5703,229.6521,229.7339,229.8158,229.8976,229.9794,230.0612,230.143,230.2249,230.3067,230.3885,230.5371,230.6189,230.7007,230.7826,230.8644,230.9462,231.028,231.1098,231.1917,231.2735,231.3553,231.5039,231.6164,231.7289,231.8414,231.9539,232.0664,232.1789,232.2914,232.207,232.297,232.387,232.477,232.567,232.657,232.747,232.837,232.927,233.017,233.0859,233.1609,233.2359,233.3109,233.3859,233.4609,233.5359,233.6109,233.6859,233.7609,233.8359,233.9109,234.1406,234.2306,234.3206,234.4106,234.5006,234.5906,234.6806,234.7706,234.8606,234.9506,235.0195,235.1195,235.2195,235.3195,235.4195,235.5195,235.6195,235.7195,235.8195,235.8105,235.9005,235.9905,236.0805,236.1705,236.2605,236.3505,236.4405,236.5305,236.6205,236.6895,236.7713,236.8531,236.9349,237.0167,237.0985,237.1804,237.2622,237.344,237.4258,237.5076,237.6563,237.7381,237.8199,237.9017,237.9835,238.0653,238.1472,238.229,238.3108,238.3926,238.4744,238.623,238.7355,238.848,238.9605,239.073,239.1855,239.298,239.4105,239.3262,239.4162,239.5062,239.5962,239.6862,239.7762,239.8662,239.9562,240.0462,240.1362,240.2051,240.2801,240.3551,240.4301,240.5051,240.5801,240.6551,240.7301,240.8051,240.8801,240.9551,241.0301,241.2598,241.3498,241.4398,241.5298,241.6198,241.7098,241.7998,241.8898,241.9798,242.0698,242.1387,242.2387,242.3387,242.4387,242.5387,242.6387,242.7387,242.8387,242.9387,242.9297,243.0197,243.1097,243.1997,243.2897,243.3797,243.4697,243.5597,243.6497,243.7397,243.8086,243.8904,243.9722,244.054,244.1359,244.2177,244.2995,244.3813,244.4631,244.545,244.6268,244.7754,244.8654,244.9554,245.0454,245.1354,245.2254,245.3154,245.4054,245.4954,245.5854,245.6543,245.7443,245.8343,245.9243,246.0143,246.1043,246.1943,246.2843,246.3743,246.4643,246.5332,246.6232,246.7132,246.8032,246.8932,246.9832,247.0732,247.1632,247.2532,247.3432,247.4121,247.4939,247.5757,247.6576,247.7394,247.8212,247.903,247.9848,248.0667,248.1485,248.2303,248.3789,248.4689,248.5589,248.6489,248.7389,248.8289,248.9189,249.0089,249.0989,249.1889,249.2578,249.3578,249.4578,249.5578,249.6578,249.7578,249.8578,249.9578,250.0578,250.0488,250.1306,250.2125,250.2943,250.3761,250.4579,250.5397,250.6216,250.7034,250.7852,250.867,251.0156,251.0974,251.1793,251.2611,251.3429,251.4247,251.5065,251.5884,251.6702,251.752,251.8338,251.9824,252.0824,252.1824,252.2824,252.3824,252.4824,252.5824,252.6824,252.7824,252.7734,252.8634,252.9534,253.0434,253.1334,253.2234,253.3134,253.4034,253.4934,253.5834,253.6523,253.7342,253.816,253.8978,253.9796,254.0614,254.1433,254.2251,254.3069,254.3887,254.4705,254.6191,254.7091,254.7991,254.8891,254.9791,255.0691,255.1591,255.2491,255.3391,255.4291,255.498,255.588,255.678,255.768,255.858,255.948,256.038,256.128,256.218,256.308,256.377,256.467,256.557,256.647,256.737,256.827,256.917,257.007,257.097,257.187,257.2559,257.3377,257.4195,257.5013,257.5831,257.665,257.7468,257.8286,257.9104,257.9922,258.074,258.2227,258.3127,258.4027,258.4927,258.5827,258.6727,258.7627,258.8527,258.9427,259.0327,259.1016,259.1916,259.2816,259.3716,259.4616,259.5516,259.6416,259.7316,259.8216,259.9116,259.9805,260.0805,260.1805,260.2805,260.3805,260.4805,260.5805,260.6805,260.7805,260.7715,260.8465,260.9215,260.9965,261.0715,261.1465,261.2215,261.2965,261.3715,261.4465,261.5215,261.5965,261.8262,261.9162,262.0062,262.0962,262.1862,262.2762,262.3662,262.4562,262.5462,262.6362,262.7051,262.7951,262.8851,262.9751,263.0651,263.1551,263.2451,263.3351,263.4251,263.5151,263.584,263.684,263.784,263.884,263.984,264.084,264.184,264.284,264.384,264.375,264.45,264.525,264.6,264.675,264.75,264.825,264.9,264.975,265.05,265.125,265.2,265.4297,265.5297,265.6297,265.7297,265.8297,265.9297,266.0297,266.1297,266.2297,266.2207,266.3025,266.3843,266.4662,266.548,266.6298,266.7116,266.7934,266.8752,266.9571,267.0389,267.1875,267.2775,267.3675,267.4575,267.5475,267.6375,267.7275,267.8175,267.9075,267.9975,268.0664,268.1564,268.2464,268.3364,268.4264,268.5164,268.6064,268.6964,268.7864,268.8764,268.9453,269.0271,269.1089,269.1908,269.2726,269.3544,269.4362,269.518,269.5999,269.6817,269.7635,269.9121,270.0021,270.0921,270.1821,270.2721,270.3621,270.4521,270.5421,270.6321,270.7221,270.791,270.881,270.971,271.061,271.151,271.241,271.331,271.421,271.511,271.601,271.6699,271.7599,271.8499,271.9399,272.0299,272.1199,272.2099,272.2999,272.3899,272.4799,272.5488,272.6306,272.7125,272.7943,272.8761,272.9579,273.0397,273.1216,273.2034,273.2852,273.367,273.5156,273.6056,273.6956,273.7856,273.8756,273.9656,274.0556,274.1456,274.2356,274.3256,274.3945,274.4845,274.5745,274.6645,274.7545,274.8445,274.9345,275.0245,275.1145,275.2045,275.2734,275.3634,275.4534,275.5434,275.6334,275.7234,275.8134,275.9034,275.9934,276.0834,276.1523,276.2423,276.3323,276.4223,276.5123,276.6023,276.6923,276.7823,276.8723,276.9623,277.0313,277.1131,277.1949,277.2767,277.3585,277.4403,277.5222,277.604,277.6858,277.7676,277.8494,277.998,278.0799,278.1617,278.2435,278.3253,278.4071,278.489,278.5708,278.6526,278.7344,278.8162,278.9648,279.0648,279.1648,279.2648,279.3648,279.4648,279.5648,279.6648,279.7648,279.7559,279.8459,279.9359,280.0259,280.1159,280.2059,280.2959,280.3859,280.4759,280.5659,280.6348,280.7166,280.7984,280.8802,280.962,281.0439,281.1257,281.2075,281.2893,281.3711,281.4529,281.6016,281.6834,281.7652,281.847,281.9288,282.0107,282.0925,282.1743,282.2561,282.3379,282.4197,282.5684,282.6684,282.7684,282.8684,282.9684,283.0684,283.1684,283.2684,283.3684,283.3594,283.4494,283.5394,283.6294,283.7194,283.8094,283.8994,283.9894,284.0794,284.1694,284.2383,284.3201,284.4019,284.4837,284.5656,284.6474,284.7292,284.811,284.8928,284.9746,285.0565,285.2051,285.2951,285.3851,285.4751,285.5651,285.6551,285.7451,285.8351,285.9251,286.0151,286.084,286.174,286.264,286.354,286.444,286.534,286.624,286.714,286.804,286.894,286.9629,287.0529,287.1429,287.2329,287.3229,287.4129,287.5029,287.5929,287.6829,287.7729,287.8418,287.9168,287.9918,288.0668,288.1418,288.2168,288.2918,288.3668,288.4418,288.5168,288.5918,288.6668,288.8965,288.9965,289.0965,289.1965,289.2965,289.3965,289.4965,289.5965,289.6965,289.6875,289.7693,289.8511,289.933,290.0148,290.0966,290.1784,290.2602,290.342,290.4239,290.5057,290.6543,290.7443,290.8343,290.9243,291.0143,291.1043,291.1943,291.2843,291.3743,291.4643,291.5332,291.615,291.6968,291.7787,291.8605,291.9423,292.0241,292.1059,292.1877,292.2696,292.3514,292.5,292.59,292.68,292.77,292.86,292.95,293.04,293.13,293.22,293.31,293.3789,293.4689,293.5589,293.6489,293.7389,293.8289,293.9189,294.0089,294.0989,294.1889,294.2578,294.3396,294.4214,294.5033,294.5851,294.6669,294.7487,294.8305,294.9124,294.9942,295.076,295.2246,295.3146,295.4046,295.4946,295.5846,295.6746,295.7646,295.8546,295.9446,296.0346,296.1035,296.1935,296.2835,296.3735,296.4635,296.5535,296.6435,296.7335,296.8235,296.9135,296.9824,297.0642,297.1461,297.2279,297.3097,297.3915,297.4733,297.5551,297.637,297.7188,297.8006,297.9492,298.0392,298.1292,298.2192,298.3092,298.3992,298.4892,298.5792,298.6692,298.7592,298.8281,298.9099,298.9918,299.0736,299.1554,299.2372,299.319,299.4009,299.4827,299.5645,299.6463,299.7949,299.8949,299.9949,300.0949,300.1949,300.2949,300.3949,300.4949,300.5949,300.5859,300.6678,300.7496,300.8314,300.9132,300.995,301.0768,301.1587,301.2405,301.3223,301.4041,301.5527,301.6346,301.7164,301.7982,301.88,301.9618,302.0436,302.1255,302.2073,302.2891,302.3709,302.5195,302.6095,302.6995,302.7895,302.8795,302.9695,303.0595,303.1495,303.2395,303.3295,303.3984,303.4884,303.5784,303.6684,303.7584,303.8484,303.9384,304.0284,304.1184,304.2084,304.2773,304.3673,304.4573,304.5473,304.6373,304.7273,304.8173,304.9073,304.9973,305.0873,305.1563,305.2312,305.3062,305.3813,305.4563,305.5313,305.6062,305.6812,305.7563,305.8313,305.9063,305.9812,306.2109,306.3009,306.3909,306.4809,306.5709,306.6609,306.7509,306.8409,306.9309,307.0209,307.0898,307.1898,307.2898,307.3898,307.4898,307.5898,307.6898,307.7898,307.8898,307.8809,307.9709,308.0609,308.1509,308.2409,308.3309,308.4209,308.5109,308.6009,308.6909,308.7598,308.8348,308.9098,308.9848,309.0598,309.1348,309.2098,309.2848,309.3598,309.4348,309.5098,309.5848,309.8145,309.9045,309.9945,310.0845,310.1745,310.2645,310.3545,310.4445,310.5345,310.6245,310.6934,310.7934,310.8934,310.9934,311.0934,311.1934,311.2934,311.3934,311.4934,311.4844,311.5662,311.648,311.7298,311.8116,311.8935,311.9753,312.0571,312.1389,312.2207,312.3026,312.4512,312.533,312.6148,312.6966,312.7784,312.8603,312.9421,313.0239,313.1057,313.1875,313.2694,313.418,313.508,313.598,313.688,313.778,313.868,313.958,314.048,314.138,314.228,314.2969,314.3869,314.4769,314.5669,314.6569,314.7469,314.8369,314.9269,315.0169,315.1069,315.1758,315.2576,315.3394,315.4212,315.5031,315.5849,315.6667,315.7485,315.8303,315.9121,315.994,316.1426,316.2326,316.3226,316.4126,316.5026,316.5926,316.6826,316.7726,316.8626,316.9526,317.0215,317.1115,317.2015,317.2915,317.3815,317.4715,317.5615,317.6515,317.7415,317.8315,317.9004,317.9822,318.064,318.1458,318.2277,318.3095,318.3913,318.4731,318.5549,318.6368,318.7186,318.8672,318.949,319.0308,319.1126,319.1945,319.2763,319.3581,319.4399,319.5217,319.6036,319.6854,319.834,319.924,320.014,320.104,320.194,320.284,320.374,320.464,320.554,320.644,320.7129,320.8029,320.8929,320.9829,321.0729,321.1629,321.2529,321.3429,321.4329,321.5229,321.5918,321.6818,321.7718,321.8618,321.9518,322.0418,322.1318,322.2218,322.3118,322.4018,322.4707,322.5525,322.6343,322.7162,322.798,322.8798,322.9616,323.0434,323.1252,323.2071,323.2889,323.4375,323.5275,323.6175,323.7075,323.7975,323.8875,323.9775,324.0675,324.1575,324.2475,324.3164,324.4164,324.5164,324.6164,324.7164,324.8164,324.9164,325.0164,325.1164,325.1074,325.1892,325.2711,325.3529,325.4347,325.5165,325.5983,325.6801,325.762,325.8438,325.9256,326.0742,326.156,326.2379,326.3197,326.4015,326.4833,326.5651,326.6469,326.7288,326.8106,326.8924,327.041,327.131,327.221,327.311,327.401,327.491,327.581,327.671,327.761,327.851,327.9199,328.0099,328.0999,328.1899,328.2799,328.3699,328.4599,328.5499,328.6399,328.7299,328.7988,328.8888,328.9788,329.0688,329.1588,329.2488,329.3388,329.4288,329.5188,329.6088,329.6777,329.7596,329.8414,329.9232,330.005,330.0868,330.1686,330.2505,330.3323,330.4141,330.4959,330.6445,330.7345,330.8245,330.9145,331.0045,331.0945,331.1845,331.2745,331.3645,331.4545,331.5234,331.6053,331.6871,331.7689,331.8507,331.9325,332.0143,332.0962,332.178,332.2598,332.3416,332.4902,332.5902,332.6902,332.7902,332.8902,332.9902,333.0902,333.1902,333.2902,333.2813,333.3631,333.4449,333.5267,333.6085,333.6903,333.7722,333.854,333.9358,334.0176,334.0994,334.248,334.3299,334.4117,334.4935,334.5753,334.6571,334.739,334.8208,334.9026,334.9844,335.0662,335.2148,335.3048,335.3948,335.4848,335.5748,335.6648,335.7548,335.8448,335.9348,336.0248,336.0938,336.1837,336.2738,336.3637,336.4538,336.5437,336.6338,336.7237,336.8138,336.9038,336.9727,337.0545,337.1363,337.2181,337.2999,337.3817,337.4636,337.5454,337.6272,337.709,337.7908,337.9395,338.0295,338.1195,338.2095,338.2995,338.3895,338.4795,338.5695,338.6595,338.7495,338.8184,338.9084,338.9984,339.0884,339.1784,339.2684,339.3584,339.4484,339.5384,339.6284,339.6973,339.7873,339.8773,339.9673,340.0573,340.1473,340.2373,340.3273,340.4173,340.5073,340.5762,340.6662,340.7562,340.8462,340.9362,341.0262,341.1162,341.2062,341.2962,341.3862,341.4551,341.5451,341.6351,341.7251,341.8151,341.9051,341.9951,342.0851,342.1751,342.2651,342.334,342.4158,342.4976,342.5794,342.6613,342.7431,342.8249,342.9067,342.9885,343.0703,343.1522,343.3008,343.3908,343.4808,343.5708,343.6608,343.7508,343.8408,343.9308,344.0208,344.1108,344.1797,344.2697,344.3597,344.4497,344.5397,344.6297,344.7197,344.8097,344.8997,344.9897,345.0586,345.1404,345.2222,345.304,345.3859,345.4677,345.5495,345.6313,345.7131,345.795,345.8768,346.0254,346.1072,346.189,346.2708,346.3527,346.4345,346.5163,346.5981,346.6799,346.7618,346.8436,346.9922,347.0922,347.1922,347.2922,347.3922,347.4922,347.5922,347.6922,347.7922,347.7832,347.8732,347.9632,348.0532,348.1432,348.2332,348.3232,348.4132,348.5032,348.5932,348.6621,348.7439,348.8257,348.9076,348.9894,349.0712,349.153,349.2348,349.3167,349.3985,349.4803,349.6289,349.7107,349.7925,349.8744,349.9562,350.038,350.1198,350.2016,350.2835,350.3653,350.4471,350.5957,350.6957,350.7957,350.8957,350.9957,351.0957,351.1957,351.2957,351.3957,351.3867,351.4767,351.5667,351.6567,351.7467,351.8367,351.9267,352.0167,352.1067,352.1967,352.2656,352.3474,352.4293,352.5111,352.5929,352.6747,352.7565,352.8384,352.9202,353.002,353.0838,353.2324,353.3142,353.3961,353.4779,353.5597,353.6415,353.7233,353.8051,353.887,353.9688,354.0506,354.1992,354.2992,354.3992,354.4992,354.5992,354.6992,354.7992,354.8992,354.9992,354.9902,355.0802,355.1702,355.2602,355.3502,355.4402,355.5302,355.6202,355.7102,355.8002,355.8691,355.951,356.0328,356.1146,356.1964,356.2782,356.36,356.4419,356.5237,356.6055,356.6873,356.8359,356.9259,357.0159,357.1059,357.1959,357.2859,357.3759,357.4659,357.5559,357.6459,357.7148,357.8048,357.8948,357.9848,358.0748,358.1648,358.2548,358.3448,358.4348,358.5248,358.5938,358.6837,358.7738,358.8637,358.9538,359.0437,359.1338,359.2237,359.3138,359.4038,

};



void setup() {
  Serial.begin(115200);
  
  pinMode(VREF1, OUTPUT);
  pinMode(VREF2, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(pulse, OUTPUT);
  
  
  analogWrite(VREF1, 217);  
  analogWrite(VREF2, 217);  

  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
 
  pinMode(ledPin, OUTPUT); // visual signal of I/O to chip
  pinMode(clockPin, OUTPUT); // SCK
  pinMode(CSnPin, OUTPUT); // CSn -- has to toggle high and low to signal chip to start data transfer
  pinMode(inputPin, INPUT); // SDA


  Serial.print("DDRB , ");
  Serial.println(DDRB,BIN);
  Serial.print("DDRD , ");
  Serial.println(DDRD,BIN);
  
}







void loop()
{
  while (Serial.available()) {

    char inChar = (char)Serial.read();
    
    if (inChar == 'p') {
      print_angle();
      delay(50);
    }
    
    else if (inChar == 's') {
      one_step();  
      print_angle();
    }
    
    else if (inChar == 'd') {
       if (dir == 1){
         dir = 0;
       }
       else {
         dir = 1;
       }
    }
    
    else if (inChar == 'c') {
       i_step = 0;
       i_w = 0;
    }
    
    else if (inChar == 'z') {
      a = readEncoder();
      anglefloat = a * 0.08789;
      while (anglefloat >= 0.9) {
        one_step();
        a = readEncoder();
        anglefloat = a * 0.08789;
        Serial.println(anglefloat,DEC);
      delay(50);        
      }
      delay(100);
      offset = readEncoder();
      zero_state = step_state;
      Serial.println(zero_state,DEC);
     }
     else if (inChar == 'g') {
       for(int x = 0; x < 400; x++){
        one_step();
        a = readEncoder();
        anglefloat = a * 0.08789;
        //Serial.print(i_step,DEC);
        //Serial.print(" , ");
        //Serial.print(i_step*0.9,DEC);
        //Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        Serial.println(anglefloat, DEC);
       }
     } 
     
     else if (inChar == 'w') {
       for(int x = 0; x < 400; x++){
        a = readEncoder();
        one_step();
        i_w = 2*x;
        EEPROM.put(i_w,a);
        
        anglefloat = a * 0.08789;
        //Serial.print(i_step,DEC);
        //Serial.print(" , ");
        //Serial.print(i_step*0.9,DEC);
        //Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        Serial.println(anglefloat, DEC);
       }
     }    
      else if (inChar == 'r') {
       for(int x = 0; x < 400; x++){
        i_r = 2*x;
       
        EEPROM.get(i_r,a);
        
        //anglefloat = a * 0.08789;
        //Serial.print(i_step,DEC);
        //Serial.print(" , ");
        //Serial.print(i_step*0.9,DEC);
        //Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        //Serial.println(anglefloat, DEC);
        Serial.println(a, DEC);
       }
     }
     
     
  else if (inChar == 'a')  {
     Serial.println("Enter angle:");      //Prompt User for input
     while (Serial.available()==0)  {     //Wait for new angle
    }   
     update_angle();
    }
  else if (inChar == 'l') {
     Serial.println("Enter encoder count:");      //Prompt User for input
     while (Serial.available()==0)  {     //Wait for new angle
    }   
     a=Serial.parseFloat();
     angle_out= lookup_angle(a);
     Serial.println(angle_out,DEC);
    }
  else if (inChar == 'f') {
  follow();
  }
  
  
  else if (inChar == 'x')  {
     Serial.println("Enter angle:");      //Prompt User for input
     while (Serial.available()==0)  {     //Wait for new angle
    }   
     setpoint();
    }
  
  }
    
       
     
     
}





float lookup_angle(int n)
{
   float a_out; 
   a_out = pgm_read_float_near(lookup+n);
  //Serial.println(angle_out,DEC);
    return a_out;
}



//_____________________________________________________________________________


void follow()
{
  while (1) {
       a = readEncoder();
       current_angle= lookup_angle(a);
      
       digitalWrite(pulse, !digitalRead(pulse));
      
      val1 = 100*sin( (100*(current_angle*pi)/180) + .45+((pi/4)*(3+ 2*zero_state)));
      analogWrite(VREF1, abs(val1));
      
      if (val1 >= 0)  {
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2,LOW);
      }
      else  {
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
      }
      val2 = 100*sin( (100*(current_angle*pi)/180) + .45+(((pi/4)*(1+ 2*zero_state))));
      analogWrite(VREF2, abs(val2));  
      
      if (val2 >= 0)  {
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4,LOW);
      }
      else  {
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
      }
      
      
      //delay(1);
      Serial.print(current_angle);
      Serial.print(" , ");
      Serial.print(val1,DEC);
      Serial.print(" , ");
      Serial.println(val2,DEC);
    }

}












//__________________________________________________________________________


void update_angle()
{
  new_angle=Serial.parseFloat();     
  diff_angle =(new_angle-current_angle);
  
  
  
  if (diff_angle > 0.05)  {
    while (diff_angle >= 0.05)  {
      current_angle +=0.1;
      
       digitalWrite(pulse, !digitalRead(pulse));
      
      val1 = 200*sin( (100*(current_angle*pi)/180) + ((pi/4)*(3+ 2*zero_state)));
      analogWrite(VREF1, abs(val1));
      
      if (val1 >= 0)  {
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2,LOW);
      }
      else  {
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
      }
      val2 = 200*sin( (100*(current_angle*pi)/180) + ((pi/4)*(1+ 2*zero_state)));
      analogWrite(VREF2, abs(val2));  
      
      if (val2 >= 0)  {
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4,LOW);
      }
      else  {
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
      }
      
      
      //delay(1);
      Serial.print(current_angle);
      Serial.print(" , ");
      Serial.print(val1,DEC);
      Serial.print(" , ");
      Serial.println(val2,DEC);
      diff_angle =(new_angle-current_angle);  
    }

  }
  else if (diff_angle <= -0.05) {
        while (diff_angle <= -0.05)  {
      current_angle -=0.1;
       
       digitalWrite(pulse, !digitalRead(pulse));
      
      val1 = 200*sin( (100*(current_angle*pi)/180) + ((pi/4)*(3+ 2*zero_state)));
      analogWrite(VREF1, abs(val1));
      
      if (val1 >= 0)  {
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2,LOW);
      }
      else  {
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
      }

      
      val2 = 200*sin( (100*(current_angle*pi)/180) + ((pi/4)*(1+ 2*zero_state)));
      analogWrite(VREF2, abs(val2));  
      
      if (val2 >= 0)  {
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4,LOW);
      }
      else  {
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
      }
      
      //delay(1);
      Serial.print(current_angle);
      Serial.print(" , ");
      Serial.print(val1,DEC);
      Serial.print(" , ");
      Serial.println(val2,DEC);
      diff_angle =(new_angle-current_angle);  
    }

    
    
  }

}


//-----------------------------------------------------------------------

void setpoint()
{
  static float ei =0.0;    
  static int U = 0;
  int start =0;
  int finish = 0;

  
  static float FA = 0.0;
  while(1){
    
    if (Serial.available() > 0) {
       new_angle=Serial.parseFloat();
    }
    
   start = micros();
    a = readEncoder();
finish = micros();
    
    
       current_angle= lookup_angle(a);
       ei = 0.95*(ei+diff_angle);
  diff_angle = -(new_angle-current_angle);
  Serial.println(current_angle,DEC);
 /*Serial.print(current_angle,DEC);
  Serial.print("  |  ") ;
  Serial.print(ei,DEC);
  Serial.print("  |  ") ;
  Serial.print(FA,DEC);
  Serial.print("  |  ") ;  
  Serial.println(diff_angle,DEC);
  //delay(100);
*/ 
  ep=(kp*diff_angle);
  U =abs(ep+ki*ei);
  if (U>256){
    U = 256;
  }
 // else if (U<25){
 //   U = 25;
 // }
  
  //FA = abs(diff_angle*KF);
  //if (FA>=0.1){
   FA=0.3 ;
  //}
 // Serial.println(current_angle);
  
  //digitalWrite(pulse, !digitalRead(pulse));
  
 
 // Serial.println(ep,DEC);
  if (diff_angle > 0.05)  {
    //while (diff_angle >= 0.05)  
      current_angle -= FA;//0.15;
      
       //digitalWrite(pulse, !digitalRead(pulse));
      PORTB ^= (B00010000); 
      
      ;
      val1 = U*sin( (100*(current_angle*pi)/180) + 4.5+((pi/4)*(3+ 2*zero_state)));
      //val1 = ep*sin( 1.74533*current_angle + 6.8562);
      
     
      analogWrite(VREF1, abs(val1));

      if (val1 >= 0)  {
        //digitalWrite(IN1, HIGH);
        PORTB |= (B00000001);
        //digitalWrite(IN2,LOW);
        PORTB &= ~(B00000010);
      }
      else  {
        //digitalWrite(IN1, LOW);
        PORTB &= ~(B00000001);
        //digitalWrite(IN2, HIGH);
        PORTB |= (B00000010);
      }
      val2 = U*sin( (100*(current_angle*pi)/180) + 4.5+((pi/4)*(1+ 2*zero_state)));
     //val2 = ep*sin( 1.74533*current_angle + 5.2854);
      analogWrite(VREF2, abs(val2));  
      
      if (val2 >= 0)  {
        //digitalWrite(IN3, HIGH);
        PORTB |= (B00000100);
        //digitalWrite(IN4,LOW);
        PORTB &= ~(B00001000);
        
      }
      else  {
        //digitalWrite(IN3, LOW);
        PORTB &= ~(B00000100);
        //digitalWrite(IN4, HIGH);
        PORTB |= (B00001000);
        
      }
      
      
      //delay(1);
    //  Serial.print(current_angle);
    //  Serial.print(" , ");
    //  Serial.print(val1,DEC);
    //  Serial.print(" , ");
    //  Serial.println(val2,DEC);
      //diff_angle =(new_angle-current_angle);  
    

  }
  else if (diff_angle < -0.05)  {
    //while (diff_angle <= 0.05)  
      current_angle += FA;//.15;
      
       //digitalWrite(pulse, !digitalRead(pulse));
      PORTB ^= (B00010000); 
      
      
      val1 = U*sin( (100*(current_angle*pi)/180) + .45+((pi/4)*(3+ 2*zero_state)));
      //val1 = ep*sin( 1.74533*current_angle + 6.8562);
      analogWrite(VREF1, abs(val1));
      
      if (val1 >= 0)  {
        //digitalWrite(IN1, HIGH);
        PORTB |= (B00000001);
        //digitalWrite(IN2,LOW);
        PORTB &= ~(B00000010);
      }
      else  {
        //digitalWrite(IN1, LOW);
        PORTB &= ~(B00000001);
        //digitalWrite(IN2, HIGH);
        PORTB |= (B00000010);
      }
      val2 = U*sin( (100*(current_angle*pi)/180) + .45+((pi/4)*(1+ 2*zero_state)));
      //val2 = ep*sin( 1.74533*current_angle + 5.2854);
      analogWrite(VREF2, abs(val2));  
      
      if (val2 >= 0)  {
        //digitalWrite(IN3, HIGH);
        PORTB |= (B00000100);
        //digitalWrite(IN4,LOW);
        PORTB &= ~(B00001000);
        
      }
      else  {
        //digitalWrite(IN3, LOW);
        PORTB &= ~(B00000100);
        //digitalWrite(IN4, HIGH);
        PORTB |= (B00001000);
        
      }
      
      
      //delay(1);
    //  Serial.print(current_angle);
    //  Serial.print(" , ");
    //  Serial.print(val1,DEC);
    //  Serial.print(" , ");
    //  Serial.println(val2,DEC);
      //diff_angle =(new_angle-current_angle);  
    

  
  }
  else{
  analogWrite(VREF1, 0); 
  analogWrite(VREF2, 0);  
  
  }
 // Serial.println(finish-start,DEC);

}

}






void one_step(){

  if (dir == 0) {
        i_step += 1;     
  }
   else{
        i_step -= 1;      
  }
  step_state = ((((i_step+zero_state) % 4)+4)%4);   // arduino mod does not wrap for negative....

  
  
  Serial.println(dir,DEC);
  Serial.println(step_state,DEC);

  
      
  analogWrite(VREF1, 144);  
  analogWrite(VREF2, 144);  
    if (step_state == 0){
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4, LOW);
    }
    else if (step_state == 1){

        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4, LOW);
    }
    else if (step_state == 2){
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
    }
     else if (step_state == 3){
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
        
     }
      delay(10);
}


void print_angle()
{
        a = readEncoder();
        anglefloat = a * 0.08789;
        Serial.print(i_step,DEC);
        Serial.print(" , ");
        Serial.print(i_step*0.9,DEC);
        Serial.print(" , ");
        Serial.print(a,DEC);
        Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        Serial.println(anglefloat, DEC);
}

int readEncoder()
{
// CSn needs to cycle from high to low to initiate transfer. Then clock cycles. As it goes high
// again, data will appear on sda
  digitalWrite(CSnPin, HIGH); // CSn high
  digitalWrite(clockPin, HIGH); // CLK high
  //delay(longdelay);// time between readings
  delayMicroseconds(10);
  digitalWrite(ledPin, HIGH); // signal start of transfer with LED
  digitalWrite(CSnPin, LOW); // CSn low: start of transfer
  delayMicroseconds(shortdelay); // delay for chip initialization
  digitalWrite(clockPin, LOW); // CLK goes low: start clocking
  delayMicroseconds(shortdelay); // hold low
 // for (int x=0; x <16; x++) // clock signal, 16 transitions, output to clock pin
 for (int x=0; x <18; x++) // clock signal, 16 transitions, output to clock pin
  {
    digitalWrite(clockPin, HIGH); //clock goes high
    delayMicroseconds(shortdelay); //
    inputstream =digitalRead(inputPin); // read one bit of data from pin
//Serial.print(inputstream, DEC);
    packeddata = ((packeddata << 1) + inputstream);// left-shift summing variable, add pin value
    digitalWrite(clockPin, LOW);
    delayMicroseconds(shortdelay); // end of one clock cycle
  }
// end of entire clock cycle
//Serial.println(" ");
  digitalWrite(ledPin, LOW); // signal end of transmission
// lots of diagnostics for verifying bitwise operations
//Serial.print("packed:");
//Serial.println(packeddata,DEC);
//Serial.print("pack bin: ");
//Serial.println(packeddata,BIN);
  angle = packeddata & anglemask; // mask rightmost 6 digits of packeddata to zero, into angle.
//Serial.print("mask: ");
//Serial.println(anglemask, BIN);
//Serial.print("bin angle:");
//Serial.println(angle, BIN);
//Serial.print("angle: ");
//Serial.println(angle, DEC);
  angle = (angle >> 6); // shift 16-digit angle right 6 digits to form 10-digit value
//Serial.print("angleshft:");
//Serial.println(angle, BIN);
//Serial.print("angledec: ");
//Serial.println(angle, DEC);
//angle = angle * 0.3515; // angle * (360/1024) == actual degrees
  //anglefloat = angle * 0.08789; // angle * (360/4096) == actual degrees
  angletemp = angle;
  //Serial.print("angle: "); // and, finally, print it.
  
//  Serial.print(i_step,DEC);
//  Serial.print(" , ");
//  Serial.print(i_step*0.9,DEC);
//  Serial.print(" , ");
//  Serial.println(anglefloat-offset, DEC);
  
  
  
//Serial.println("--------------------");
//Serial.print("raw: "); // this was the prefix for the bit-by-bit diag output inside the loop.
  if (debug)
  {
    statusbits = packeddata & statusmask;
    DECn = statusbits & 2; // goes high if magnet moved away from IC
    INCn = statusbits & 4; // goes high if magnet moved towards IC
    LIN = statusbits & 8; // goes high for linearity alarm
    COF = statusbits & 16; // goes high for cordic overflow: data invalid
    OCF = statusbits & 32; // this is 1 when the chip startup is finished.
    if (DECn && INCn) { Serial.println("magnet moved out of range"); }
    else
    {
      if (DECn) { Serial.println("magnet moved away from chip"); }
      if (INCn) { Serial.println("magnet moved towards chip"); }
    }
    if (LIN) { Serial.println("linearity alarm: magnet misaligned? Data questionable."); }
    if (COF) { Serial.println("cordic overflow: magnet misaligned? Data invalid."); }
  }

  packeddata = 0; // reset both variables to zero so they don't just accumulate
  angle = 0;
  
//  return anglefloat;
return angletemp;
}

