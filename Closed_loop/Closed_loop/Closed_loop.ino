/*


First attempt at closing the loop using AS5145 encoder, A4954 driver

Controlled via a serial terminal at 115200 baud.


____
    |
  13|-> LED 
  12|-> pulse         _
  11|-> clock          \
  10|->Chip Select      |---AS5145
   9|->data           _/
   8|->IN4             \
   7|->IN3              \
  ~6|->VREF2             \___A4954
  ~5|->VREF1             /           
   4|->IN2              /
  ~3|->IN1            _/
   2|
   1|
   0|
____|
  

Implemented commands are:

p  -  print [step count] , [assumed angle] , [encoder reading]

c  -  clear step count & assumed angle

s  -  step

d  -  dir toggle

z  -  seek zero position

g  -  Go! steps around 400 times

w  -  Same as go, but stores encoder angles to EEPROM

r  -  returns EEPROM contents

a  -  prompts user to enter angle 



*/


#include <EEPROM.h>
#include <math.h>
#include <avr/pgmspace.h>

const int spr = 400; // steps per revolution
const float aps = 360.0/spr;  // angle per step

float kp = 40.0;
int ep = 0;
float ki = 5.0;
float KF = 1.0;


int dir = 1;
int step_state = 1;



int inputstream = 0; //one bit read from pin
long packeddata = 0; //two bytes concatenated from inputstream
long angle = 0; //holds processed angle value
long angletemp;
float anglefloat = 0; 

int a = 0;  //angle value in zero routine
float offset = 0.000000000000000; //zero-offest of closest full step

//long anglemask = 65472; //0x1111111111000000: mask to obtain first 10 digits with position info
long anglemask = 262080; // 0x111111111111000000: mask to obtain first 12 digits with position info
long statusmask = 63; //0x000000000111111; mask to obtain last 6 digits containing status info
long statusbits; //holds status/error information
int DECn; //bit holding decreasing magnet field error data
int INCn; //bit holding increasing magnet field error data
int OCF; //bit holding startup-valid bit
int COF; //bit holding cordic DSP processing error data
int LIN; //bit holding magnet field displacement error data
int debug = 1; //SET THIS TO 0 TO DISABLE PRINTING OF ERROR CODES
int shortdelay = 5; // this is the microseconds of delay in the data clock
int longdelay = 1; // this is the milliseconds between readings


int i_step = 0; // step index
int i_w = 0;// write index
int i_r = 0; // read index

//___________________________________

const float pi = 3.14159;
const int  half = 134;//128;

float new_angle = 0.0; //input angle
float current_angle = 0.0; //current angle
float diff_angle = 0.0;
int val1 = 0;
int val2 = 0;

//////////////////////////////////////
//////////////////PINS////////////////
//////////////////////////////////////
int IN1 = 8;
int IN2 = 9;
int VREF1 = 5;
int VREF2 = 6;
int IN3 = 10;
int IN4 = 11;
int pulse = 12;


const int ledPin = 13; //LED connected to digital pin 13
const int clockPin = 2; //output to clock
const int CSnPin = 3; //output to chip select
const int inputPin = 7; //read AS5040


//////////////////////////////////////
//////////////////////////////////////
//////////////////////////////////////


float angle_out=0.0;
int zero_state =0;




const PROGMEM float lookup[] = {
  
  0.0,0.09,0.18,0.27,0.36,0.45,0.54,0.63,0.72,0.81,0.9,0.99,1.08,1.17,1.26,1.35,1.44,1.53,1.62,1.71,1.8,1.89,1.98,2.07,2.16,2.25,2.34,2.43,2.52,2.61,2.7,2.7818,2.8636,2.9455,3.0273,3.1091,3.1909,3.2727,3.3545,3.4364,3.5182,3.6,3.6818,3.7636,3.8455,3.9273,4.0091,4.0909,4.1727,4.2545,4.3364,4.4182,4.5,4.6,4.7,4.8,4.9,5.0,5.1,5.2,5.3,5.4,5.49,5.58,5.67,5.76,5.85,5.94,6.03,6.12,6.21,6.3,6.3818,6.4636,6.5455,6.6273,6.7091,6.7909,6.8727,6.9545,7.0364,7.1182,7.2,7.2818,7.3636,7.4455,7.5273,7.6091,7.6909,7.7727,7.8545,7.9364,8.0182,8.1,8.2,8.3,8.4,8.5,8.6,8.7,8.8,8.9,9.0,9.1,9.2,9.3,9.4,9.5,9.6,9.7,9.8,9.9,9.975,10.05,10.125,10.2,10.275,10.35,10.425,10.5,10.575,10.65,10.725,10.8,10.89,10.98,11.07,11.16,11.25,11.34,11.43,11.52,11.61,11.7,11.79,11.88,11.97,12.06,12.15,12.24,12.33,12.42,12.51,12.6,12.69,12.78,12.87,12.96,13.05,13.14,13.23,13.32,13.41,13.5,13.5818,13.6636,13.7455,13.8273,13.9091,13.9909,14.0727,14.1545,14.2364,14.3182,14.4,14.49,14.58,14.67,14.76,14.85,14.94,15.03,15.12,15.21,15.3,15.39,15.48,15.57,15.66,15.75,15.84,15.93,16.02,16.11,16.2,16.29,16.38,16.47,16.56,16.65,16.74,16.83,16.92,17.01,17.1,17.1818,17.2636,17.3455,17.4273,17.5091,17.5909,17.6727,17.7545,17.8364,17.9182,18.0,18.09,18.18,18.27,18.36,18.45,18.54,18.63,18.72,18.81,18.9,18.99,19.08,19.17,19.26,19.35,19.44,19.53,19.62,19.71,19.8,19.89,19.98,20.07,20.16,20.25,20.34,20.43,20.52,20.61,20.7,20.7818,20.8636,20.9455,21.0273,21.1091,21.1909,21.2727,21.3545,21.4364,21.5182,21.6,21.69,21.78,21.87,21.96,22.05,22.14,22.23,22.32,22.41,22.5,22.6,22.7,22.8,22.9,23.0,23.1,23.2,23.3,23.4,23.4818,23.5636,23.6455,23.7273,23.8091,23.8909,23.9727,24.0545,24.1364,24.2182,24.3,24.3818,24.4636,24.5455,24.6273,24.7091,24.7909,24.8727,24.9545,25.0364,25.1182,25.2,25.3,25.4,25.5,25.6,25.7,25.8,25.9,26.0,26.1,26.19,26.28,26.37,26.46,26.55,26.64,26.73,26.82,26.91,27.0,27.0818,27.1636,27.2455,27.3273,27.4091,27.4909,27.5727,27.6545,27.7364,27.8182,27.9,27.9818,28.0636,28.1455,28.2273,28.3091,28.3909,28.4727,28.5545,28.6364,28.7182,28.8,28.9,29.0,29.1,29.2,29.3,29.4,29.5,29.6,29.7,29.8,29.9,30.0,30.1,30.2,30.3,30.4,30.5,30.6,30.675,30.75,30.825,30.9,30.975,31.05,31.125,31.2,31.275,31.35,31.425,31.5,31.59,31.68,31.77,31.86,31.95,32.04,32.13,32.22,32.31,32.4,32.5,32.6,32.7,32.8,32.9,33.0,33.1,33.2,33.3,33.39,33.48,33.57,33.66,33.75,33.84,33.93,34.02,34.11,34.2,34.275,34.35,34.425,34.5,34.575,34.65,34.725,34.8,34.875,34.95,35.025,35.1,35.19,35.28,35.37,35.46,35.55,35.64,35.73,35.82,35.91,36.0,36.1,36.2,36.3,36.4,36.5,36.6,36.7,36.8,36.9,36.99,37.08,37.17,37.26,37.35,37.44,37.53,37.62,37.71,37.8,37.8818,37.9636,38.0455,38.1273,38.2091,38.2909,38.3727,38.4545,38.5364,38.6182,38.7,38.7818,38.8636,38.9455,39.0273,39.1091,39.1909,39.2727,39.3545,39.4364,39.5182,39.6,39.7,39.8,39.9,40.0,40.1,40.2,40.3,40.4,40.5,40.59,40.68,40.77,40.86,40.95,41.04,41.13,41.22,41.31,41.4,41.4818,41.5636,41.6455,41.7273,41.8091,41.8909,41.9727,42.0545,42.1364,42.2182,42.3,42.39,42.48,42.57,42.66,42.75,42.84,42.93,43.02,43.11,43.2,43.29,43.38,43.47,43.56,43.65,43.74,43.83,43.92,44.01,44.1,44.19,44.28,44.37,44.46,44.55,44.64,44.73,44.82,44.91,45.0,45.0818,45.1636,45.2455,45.3273,45.4091,45.4909,45.5727,45.6545,45.7364,45.8182,45.9,45.99,46.08,46.17,46.26,46.35,46.44,46.53,46.62,46.71,46.8,46.9,47.0,47.1,47.2,47.3,47.4,47.5,47.6,47.7,47.7818,47.8636,47.9455,48.0273,48.1091,48.1909,48.2727,48.3545,48.4364,48.5182,48.6,48.69,48.78,48.87,48.96,49.05,49.14,49.23,49.32,49.41,49.5,49.59,49.68,49.77,49.86,49.95,50.04,50.13,50.22,50.31,50.4,50.49,50.58,50.67,50.76,50.85,50.94,51.03,51.12,51.21,51.3,51.3818,51.4636,51.5455,51.6273,51.7091,51.7909,51.8727,51.9545,52.0364,52.1182,52.2,52.29,52.38,52.47,52.56,52.65,52.74,52.83,52.92,53.01,53.1,53.19,53.28,53.37,53.46,53.55,53.64,53.73,53.82,53.91,54.0,54.09,54.18,54.27,54.36,54.45,54.54,54.63,54.72,54.81,54.9,54.9818,55.0636,55.1455,55.2273,55.3091,55.3909,55.4727,55.5545,55.6364,55.7182,55.8,55.89,55.98,56.07,56.16,56.25,56.34,56.43,56.52,56.61,56.7,56.8,56.9,57.0,57.1,57.2,57.3,57.4,57.5,57.6,57.6818,57.7636,57.8455,57.9273,58.0091,58.0909,58.1727,58.2545,58.3364,58.4182,58.5,58.5818,58.6636,58.7455,58.8273,58.9091,58.9909,59.0727,59.1545,59.2364,59.3182,59.4,59.49,59.58,59.67,59.76,59.85,59.94,60.03,60.12,60.21,60.3,60.4,60.5,60.6,60.7,60.8,60.9,61.0,61.1,61.2,61.2818,61.3636,61.4455,61.5273,61.6091,61.6909,61.7727,61.8545,61.9364,62.0182,62.1,62.1818,62.2636,62.3455,62.4273,62.5091,62.5909,62.6727,62.7545,62.8364,62.9182,63.0,63.09,63.18,63.27,63.36,63.45,63.54,63.63,63.72,63.81,63.9,64.0,64.1,64.2,64.3,64.4,64.5,64.6,64.7,64.8,64.89,64.98,65.07,65.16,65.25,65.34,65.43,65.52,65.61,65.7,65.7818,65.8636,65.9455,66.0273,66.1091,66.1909,66.2727,66.3545,66.4364,66.5182,66.6,66.69,66.78,66.87,66.96,67.05,67.14,67.23,67.32,67.41,67.5,67.5818,67.6636,67.7455,67.8273,67.9091,67.9909,68.0727,68.1545,68.2364,68.3182,68.4,68.5,68.6,68.7,68.8,68.9,69.0,69.1,69.2,69.3,69.3818,69.4636,69.5455,69.6273,69.7091,69.7909,69.8727,69.9545,70.0364,70.1182,70.2,70.29,70.38,70.47,70.56,70.65,70.74,70.83,70.92,71.01,71.1,71.1818,71.2636,71.3455,71.4273,71.5091,71.5909,71.6727,71.7545,71.8364,71.9182,72.0,72.1,72.2,72.3,72.4,72.5,72.6,72.7,72.8,72.9,72.99,73.08,73.17,73.26,73.35,73.44,73.53,73.62,73.71,73.8,73.8818,73.9636,74.0455,74.1273,74.2091,74.2909,74.3727,74.4545,74.5364,74.6182,74.7,74.7818,74.8636,74.9455,75.0273,75.1091,75.1909,75.2727,75.3545,75.4364,75.5182,75.6,75.69,75.78,75.87,75.96,76.05,76.14,76.23,76.32,76.41,76.5,76.6,76.7,76.8,76.9,77.0,77.1,77.2,77.3,77.4,77.4818,77.5636,77.6455,77.7273,77.8091,77.8909,77.9727,78.0545,78.1364,78.2182,78.3,78.3818,78.4636,78.5455,78.6273,78.7091,78.7909,78.8727,78.9545,79.0364,79.1182,79.2,79.29,79.38,79.47,79.56,79.65,79.74,79.83,79.92,80.01,80.1,80.2,80.3,80.4,80.5,80.6,80.7,80.8,80.9,81.0,81.09,81.18,81.27,81.36,81.45,81.54,81.63,81.72,81.81,81.9,81.9818,82.0636,82.1455,82.2273,82.3091,82.3909,82.4727,82.5545,82.6364,82.7182,82.8,82.8818,82.9636,83.0455,83.1273,83.2091,83.2909,83.3727,83.4545,83.5364,83.6182,83.7,83.8,83.9,84.0,84.1,84.2,84.3,84.4,84.5,84.6,84.69,84.78,84.87,84.96,85.05,85.14,85.23,85.32,85.41,85.5,85.575,85.65,85.725,85.8,85.875,85.95,86.025,86.1,86.175,86.25,86.325,86.4,86.49,86.58,86.67,86.76,86.85,86.94,87.03,87.12,87.21,87.3,87.39,87.48,87.57,87.66,87.75,87.84,87.93,88.02,88.11,88.2,88.29,88.38,88.47,88.56,88.65,88.74,88.83,88.92,89.01,89.1,89.1818,89.2636,89.3455,89.4273,89.5091,89.5909,89.6727,89.7545,89.8364,89.9182,90.0,90.1,90.2,90.3,90.4,90.5,90.6,90.7,90.8,90.9,90.9818,91.0636,91.1455,91.2273,91.3091,91.3909,91.4727,91.5545,91.6364,91.7182,91.8,91.89,91.98,92.07,92.16,92.25,92.34,92.43,92.52,92.61,92.7,92.7818,92.8636,92.9455,93.0273,93.1091,93.1909,93.2727,93.3545,93.4364,93.5182,93.6,93.7,93.8,93.9,94.0,94.1,94.2,94.3,94.4,94.5,94.5818,94.6636,94.7455,94.8273,94.9091,94.9909,95.0727,95.1545,95.2364,95.3182,95.4,95.4818,95.5636,95.6455,95.7273,95.8091,95.8909,95.9727,96.0545,96.1364,96.2182,96.3,96.39,96.48,96.57,96.66,96.75,96.84,96.93,97.02,97.11,97.2,97.3,97.4,97.5,97.6,97.7,97.8,97.9,98.0,98.1,98.19,98.28,98.37,98.46,98.55,98.64,98.73,98.82,98.91,99.0,99.0692,99.1385,99.2077,99.2769,99.3462,99.4154,99.4846,99.5538,99.6231,99.6923,99.7615,99.8308,99.9,100.0,100.1,100.2,100.3,100.4,100.5,100.6,100.7,100.8,100.9,101.0,101.1,101.2,101.3,101.4,101.5,101.6,101.7,101.79,101.88,101.97,102.06,102.15,102.24,102.33,102.42,102.51,102.6,102.675,102.75,102.825,102.9,102.975,103.05,103.125,103.2,103.275,103.35,103.425,103.5,103.5818,103.6636,103.7455,103.8273,103.9091,103.9909,104.0727,104.1545,104.2364,104.3182,104.4,104.5125,104.625,104.7375,104.85,104.9625,105.075,105.1875,105.3,105.3818,105.4636,105.5455,105.6273,105.7091,105.7909,105.8727,105.9545,106.0364,106.1182,106.2,106.2818,106.3636,106.4455,106.5273,106.6091,106.6909,106.7727,106.8545,106.9364,107.0182,107.1,107.1818,107.2636,107.3455,107.4273,107.5091,107.5909,107.6727,107.7545,107.8364,107.9182,108.0,108.1,108.2,108.3,108.4,108.5,108.6,108.7,108.8,108.9,108.99,109.08,109.17,109.26,109.35,109.44,109.53,109.62,109.71,109.8,109.8818,109.9636,110.0455,110.1273,110.2091,110.2909,110.3727,110.4545,110.5364,110.6182,110.7,110.7818,110.8636,110.9455,111.0273,111.1091,111.1909,111.2727,111.3545,111.4364,111.5182,111.6,111.7,111.8,111.9,112.0,112.1,112.2,112.3,112.4,112.5,112.59,112.68,112.77,112.86,112.95,113.04,113.13,113.22,113.31,113.4,113.4818,113.5636,113.6455,113.7273,113.8091,113.8909,113.9727,114.0545,114.1364,114.2182,114.3,114.3818,114.4636,114.5455,114.6273,114.7091,114.7909,114.8727,114.9545,115.0364,115.1182,115.2,115.29,115.38,115.47,115.56,115.65,115.74,115.83,115.92,116.01,116.1,116.2,116.3,116.4,116.5,116.6,116.7,116.8,116.9,117.0,117.0818,117.1636,117.2455,117.3273,117.4091,117.4909,117.5727,117.6545,117.7364,117.8182,117.9,117.9818,118.0636,118.1455,118.2273,118.3091,118.3909,118.4727,118.5545,118.6364,118.7182,118.8,118.89,118.98,119.07,119.16,119.25,119.34,119.43,119.52,119.61,119.7,119.79,119.88,119.97,120.06,120.15,120.24,120.33,120.42,120.51,120.6,120.69,120.78,120.87,120.96,121.05,121.14,121.23,121.32,121.41,121.5,121.5818,121.6636,121.7455,121.8273,121.9091,121.9909,122.0727,122.1545,122.2364,122.3182,122.4,122.49,122.58,122.67,122.76,122.85,122.94,123.03,123.12,123.21,123.3,123.39,123.48,123.57,123.66,123.75,123.84,123.93,124.02,124.11,124.2,124.2818,124.3636,124.4455,124.5273,124.6091,124.6909,124.7727,124.8545,124.9364,125.0182,125.1,125.19,125.28,125.37,125.46,125.55,125.64,125.73,125.82,125.91,126.0,126.09,126.18,126.27,126.36,126.45,126.54,126.63,126.72,126.81,126.9,126.9818,127.0636,127.1455,127.2273,127.3091,127.3909,127.4727,127.5545,127.6364,127.7182,127.8,127.89,127.98,128.07,128.16,128.25,128.34,128.43,128.52,128.61,128.7,128.7818,128.8636,128.9455,129.0273,129.1091,129.1909,129.2727,129.3545,129.4364,129.5182,129.6,129.69,129.78,129.87,129.96,130.05,130.14,130.23,130.32,130.41,130.5,130.59,130.68,130.77,130.86,130.95,131.04,131.13,131.22,131.31,131.4,131.49,131.58,131.67,131.76,131.85,131.94,132.03,132.12,132.21,132.3,132.3818,132.4636,132.5455,132.6273,132.7091,132.7909,132.8727,132.9545,133.0364,133.1182,133.2,133.29,133.38,133.47,133.56,133.65,133.74,133.83,133.92,134.01,134.1,134.19,134.28,134.37,134.46,134.55,134.64,134.73,134.82,134.91,135.0,135.0818,135.1636,135.2455,135.3273,135.4091,135.4909,135.5727,135.6545,135.7364,135.8182,135.9,135.9818,136.0636,136.1455,136.2273,136.3091,136.3909,136.4727,136.5545,136.6364,136.7182,136.8,136.9,137.0,137.1,137.2,137.3,137.4,137.5,137.6,137.7,137.79,137.88,137.97,138.06,138.15,138.24,138.33,138.42,138.51,138.6,138.6818,138.7636,138.8455,138.9273,139.0091,139.0909,139.1727,139.2545,139.3364,139.4182,139.5,139.5818,139.6636,139.7455,139.8273,139.9091,139.9909,140.0727,140.1545,140.2364,140.3182,140.4,140.5,140.6,140.7,140.8,140.9,141.0,141.1,141.2,141.3,141.39,141.48,141.57,141.66,141.75,141.84,141.93,142.02,142.11,142.2,142.2818,142.3636,142.4455,142.5273,142.6091,142.6909,142.7727,142.8545,142.9364,143.0182,143.1,143.1818,143.2636,143.3455,143.4273,143.5091,143.5909,143.6727,143.7545,143.8364,143.9182,144.0,144.09,144.18,144.27,144.36,144.45,144.54,144.63,144.72,144.81,144.9,145.0,145.1,145.2,145.3,145.4,145.5,145.6,145.7,145.8,145.8818,145.9636,146.0455,146.1273,146.2091,146.2909,146.3727,146.4545,146.5364,146.6182,146.7,146.775,146.85,146.925,147.0,147.075,147.15,147.225,147.3,147.375,147.45,147.525,147.6,147.7,147.8,147.9,148.0,148.1,148.2,148.3,148.4,148.5,148.6,148.7,148.8,148.9,149.0,149.1,149.2,149.3,149.4,149.4818,149.5636,149.6455,149.7273,149.8091,149.8909,149.9727,150.0545,150.1364,150.2182,150.3,150.375,150.45,150.525,150.6,150.675,150.75,150.825,150.9,150.975,151.05,151.125,151.2,151.3,151.4,151.5,151.6,151.7,151.8,151.9,152.0,152.1,152.19,152.28,152.37,152.46,152.55,152.64,152.73,152.82,152.91,153.0,153.09,153.18,153.27,153.36,153.45,153.54,153.63,153.72,153.81,153.9,153.975,154.05,154.125,154.2,154.275,154.35,154.425,154.5,154.575,154.65,154.725,154.8,154.9,155.0,155.1,155.2,155.3,155.4,155.5,155.6,155.7,155.79,155.88,155.97,156.06,156.15,156.24,156.33,156.42,156.51,156.6,156.6818,156.7636,156.8455,156.9273,157.0091,157.0909,157.1727,157.2545,157.3364,157.4182,157.5,157.59,157.68,157.77,157.86,157.95,158.04,158.13,158.22,158.31,158.4,158.49,158.58,158.67,158.76,158.85,158.94,159.03,159.12,159.21,159.3,159.39,159.48,159.57,159.66,159.75,159.84,159.93,160.02,160.11,160.2,160.29,160.38,160.47,160.56,160.65,160.74,160.83,160.92,161.01,161.1,161.175,161.25,161.325,161.4,161.475,161.55,161.625,161.7,161.775,161.85,161.925,162.0,162.09,162.18,162.27,162.36,162.45,162.54,162.63,162.72,162.81,162.9,162.99,163.08,163.17,163.26,163.35,163.44,163.53,163.62,163.71,163.8,163.89,163.98,164.07,164.16,164.25,164.34,164.43,164.52,164.61,164.7,164.79,164.88,164.97,165.06,165.15,165.24,165.33,165.42,165.51,165.6,165.69,165.78,165.87,165.96,166.05,166.14,166.23,166.32,166.41,166.5,166.5818,166.6636,166.7455,166.8273,166.9091,166.9909,167.0727,167.1545,167.2364,167.3182,167.4,167.49,167.58,167.67,167.76,167.85,167.94,168.03,168.12,168.21,168.3,168.39,168.48,168.57,168.66,168.75,168.84,168.93,169.02,169.11,169.2,169.29,169.38,169.47,169.56,169.65,169.74,169.83,169.92,170.01,170.1,170.1818,170.2636,170.3455,170.4273,170.5091,170.5909,170.6727,170.7545,170.8364,170.9182,171.0,171.09,171.18,171.27,171.36,171.45,171.54,171.63,171.72,171.81,171.9,171.9818,172.0636,172.1455,172.2273,172.3091,172.3909,172.4727,172.5545,172.6364,172.7182,172.8,172.9,173.0,173.1,173.2,173.3,173.4,173.5,173.6,173.7,173.79,173.88,173.97,174.06,174.15,174.24,174.33,174.42,174.51,174.6,174.6818,174.7636,174.8455,174.9273,175.0091,175.0909,175.1727,175.2545,175.3364,175.4182,175.5,175.5818,175.6636,175.7455,175.8273,175.9091,175.9909,176.0727,176.1545,176.2364,176.3182,176.4,176.5,176.6,176.7,176.8,176.9,177.0,177.1,177.2,177.3,177.39,177.48,177.57,177.66,177.75,177.84,177.93,178.02,178.11,178.2,178.2818,178.3636,178.4455,178.5273,178.6091,178.6909,178.7727,178.8545,178.9364,179.0182,179.1,179.19,179.28,179.37,179.46,179.55,179.64,179.73,179.82,179.91,180.0,180.09,180.18,180.27,180.36,180.45,180.54,180.63,180.72,180.81,180.9,180.99,181.08,181.17,181.26,181.35,181.44,181.53,181.62,181.71,181.8,181.8818,181.9636,182.0455,182.1273,182.2091,182.2909,182.3727,182.4545,182.5364,182.6182,182.7,182.7818,182.8636,182.9455,183.0273,183.1091,183.1909,183.2727,183.3545,183.4364,183.5182,183.6,183.7,183.8,183.9,184.0,184.1,184.2,184.3,184.4,184.5,184.59,184.68,184.77,184.86,184.95,185.04,185.13,185.22,185.31,185.4,185.49,185.58,185.67,185.76,185.85,185.94,186.03,186.12,186.21,186.3,186.3818,186.4636,186.5455,186.6273,186.7091,186.7909,186.8727,186.9545,187.0364,187.1182,187.2,187.29,187.38,187.47,187.56,187.65,187.74,187.83,187.92,188.01,188.1,188.19,188.28,188.37,188.46,188.55,188.64,188.73,188.82,188.91,189.0,189.09,189.18,189.27,189.36,189.45,189.54,189.63,189.72,189.81,189.9,189.9818,190.0636,190.1455,190.2273,190.3091,190.3909,190.4727,190.5545,190.6364,190.7182,190.8,190.89,190.98,191.07,191.16,191.25,191.34,191.43,191.52,191.61,191.7,191.79,191.88,191.97,192.06,192.15,192.24,192.33,192.42,192.51,192.6,192.7,192.8,192.9,193.0,193.1,193.2,193.3,193.4,193.5,193.5818,193.6636,193.7455,193.8273,193.9091,193.9909,194.0727,194.1545,194.2364,194.3182,194.4,194.4818,194.5636,194.6455,194.7273,194.8091,194.8909,194.9727,195.0545,195.1364,195.2182,195.3,195.4,195.5,195.6,195.7,195.8,195.9,196.0,196.1,196.2,196.29,196.38,196.47,196.56,196.65,196.74,196.83,196.92,197.01,197.1,197.1818,197.2636,197.3455,197.4273,197.5091,197.5909,197.6727,197.7545,197.8364,197.9182,198.0,198.0818,198.1636,198.2455,198.3273,198.4091,198.4909,198.5727,198.6545,198.7364,198.8182,198.9,198.99,199.08,199.17,199.26,199.35,199.44,199.53,199.62,199.71,199.8,199.9,200.0,200.1,200.2,200.3,200.4,200.5,200.6,200.7,200.7818,200.8636,200.9455,201.0273,201.1091,201.1909,201.2727,201.3545,201.4364,201.5182,201.6,201.69,201.78,201.87,201.96,202.05,202.14,202.23,202.32,202.41,202.5,202.59,202.68,202.77,202.86,202.95,203.04,203.13,203.22,203.31,203.4,203.4818,203.5636,203.6455,203.7273,203.8091,203.8909,203.9727,204.0545,204.1364,204.2182,204.3,204.39,204.48,204.57,204.66,204.75,204.84,204.93,205.02,205.11,205.2,205.29,205.38,205.47,205.56,205.65,205.74,205.83,205.92,206.01,206.1,206.19,206.28,206.37,206.46,206.55,206.64,206.73,206.82,206.91,207.0,207.09,207.18,207.27,207.36,207.45,207.54,207.63,207.72,207.81,207.9,207.99,208.08,208.17,208.26,208.35,208.44,208.53,208.62,208.71,208.8,208.89,208.98,209.07,209.16,209.25,209.34,209.43,209.52,209.61,209.7,209.79,209.88,209.97,210.06,210.15,210.24,210.33,210.42,210.51,210.6,210.6818,210.7636,210.8455,210.9273,211.0091,211.0909,211.1727,211.2545,211.3364,211.4182,211.5,211.5818,211.6636,211.7455,211.8273,211.9091,211.9909,212.0727,212.1545,212.2364,212.3182,212.4,212.5,212.6,212.7,212.8,212.9,213.0,213.1,213.2,213.3,213.39,213.48,213.57,213.66,213.75,213.84,213.93,214.02,214.11,214.2,214.29,214.38,214.47,214.56,214.65,214.74,214.83,214.92,215.01,215.1,215.1818,215.2636,215.3455,215.4273,215.5091,215.5909,215.6727,215.7545,215.8364,215.9182,216.0,216.09,216.18,216.27,216.36,216.45,216.54,216.63,216.72,216.81,216.9,216.99,217.08,217.17,217.26,217.35,217.44,217.53,217.62,217.71,217.8,217.89,217.98,218.07,218.16,218.25,218.34,218.43,218.52,218.61,218.7,218.7818,218.8636,218.9455,219.0273,219.1091,219.1909,219.2727,219.3545,219.4364,219.5182,219.6,219.7,219.8,219.9,220.0,220.1,220.2,220.3,220.4,220.5,220.59,220.68,220.77,220.86,220.95,221.04,221.13,221.22,221.31,221.4,221.49,221.58,221.67,221.76,221.85,221.94,222.03,222.12,222.21,222.3,222.3818,222.4636,222.5455,222.6273,222.7091,222.7909,222.8727,222.9545,223.0364,223.1182,223.2,223.29,223.38,223.47,223.56,223.65,223.74,223.83,223.92,224.01,224.1,224.19,224.28,224.37,224.46,224.55,224.64,224.73,224.82,224.91,225.0,225.09,225.18,225.27,225.36,225.45,225.54,225.63,225.72,225.81,225.9,225.99,226.08,226.17,226.26,226.35,226.44,226.53,226.62,226.71,226.8,226.8818,226.9636,227.0455,227.1273,227.2091,227.2909,227.3727,227.4545,227.5364,227.6182,227.7,227.79,227.88,227.97,228.06,228.15,228.24,228.33,228.42,228.51,228.6,228.69,228.78,228.87,228.96,229.05,229.14,229.23,229.32,229.41,229.5,229.59,229.68,229.77,229.86,229.95,230.04,230.13,230.22,230.31,230.4,230.49,230.58,230.67,230.76,230.85,230.94,231.03,231.12,231.21,231.3,231.3818,231.4636,231.5455,231.6273,231.7091,231.7909,231.8727,231.9545,232.0364,232.1182,232.2,232.3,232.4,232.5,232.6,232.7,232.8,232.9,233.0,233.1,233.19,233.28,233.37,233.46,233.55,233.64,233.73,233.82,233.91,234.0,234.0818,234.1636,234.2455,234.3273,234.4091,234.4909,234.5727,234.6545,234.7364,234.8182,234.9,234.9818,235.0636,235.1455,235.2273,235.3091,235.3909,235.4727,235.5545,235.6364,235.7182,235.8,235.89,235.98,236.07,236.16,236.25,236.34,236.43,236.52,236.61,236.7,236.8,236.9,237.0,237.1,237.2,237.3,237.4,237.5,237.6,237.69,237.78,237.87,237.96,238.05,238.14,238.23,238.32,238.41,238.5,238.5818,238.6636,238.7455,238.8273,238.9091,238.9909,239.0727,239.1545,239.2364,239.3182,239.4,239.49,239.58,239.67,239.76,239.85,239.94,240.03,240.12,240.21,240.3,240.39,240.48,240.57,240.66,240.75,240.84,240.93,241.02,241.11,241.2,241.29,241.38,241.47,241.56,241.65,241.74,241.83,241.92,242.01,242.1,242.1818,242.2636,242.3455,242.4273,242.5091,242.5909,242.6727,242.7545,242.8364,242.9182,243.0,243.09,243.18,243.27,243.36,243.45,243.54,243.63,243.72,243.81,243.9,243.99,244.08,244.17,244.26,244.35,244.44,244.53,244.62,244.71,244.8,244.9,245.0,245.1,245.2,245.3,245.4,245.5,245.6,245.7,245.7818,245.8636,245.9455,246.0273,246.1091,246.1909,246.2727,246.3545,246.4364,246.5182,246.6,246.69,246.78,246.87,246.96,247.05,247.14,247.23,247.32,247.41,247.5,247.5818,247.6636,247.7455,247.8273,247.9091,247.9909,248.0727,248.1545,248.2364,248.3182,248.4,248.5,248.6,248.7,248.8,248.9,249.0,249.1,249.2,249.3,249.3818,249.4636,249.5455,249.6273,249.7091,249.7909,249.8727,249.9545,250.0364,250.1182,250.2,250.29,250.38,250.47,250.56,250.65,250.74,250.83,250.92,251.01,251.1,251.1818,251.2636,251.3455,251.4273,251.5091,251.5909,251.6727,251.7545,251.8364,251.9182,252.0,252.1,252.2,252.3,252.4,252.5,252.6,252.7,252.8,252.9,252.99,253.08,253.17,253.26,253.35,253.44,253.53,253.62,253.71,253.8,253.8818,253.9636,254.0455,254.1273,254.2091,254.2909,254.3727,254.4545,254.5364,254.6182,254.7,254.79,254.88,254.97,255.06,255.15,255.24,255.33,255.42,255.51,255.6,255.69,255.78,255.87,255.96,256.05,256.14,256.23,256.32,256.41,256.5,256.59,256.68,256.77,256.86,256.95,257.04,257.13,257.22,257.31,257.4,257.49,257.58,257.67,257.76,257.85,257.94,258.03,258.12,258.21,258.3,258.3818,258.4636,258.5455,258.6273,258.7091,258.7909,258.8727,258.9545,259.0364,259.1182,259.2,259.29,259.38,259.47,259.56,259.65,259.74,259.83,259.92,260.01,260.1,260.2,260.3,260.4,260.5,260.6,260.7,260.8,260.9,261.0,261.0818,261.1636,261.2455,261.3273,261.4091,261.4909,261.5727,261.6545,261.7364,261.8182,261.9,261.9818,262.0636,262.1455,262.2273,262.3091,262.3909,262.4727,262.5545,262.6364,262.7182,262.8,262.89,262.98,263.07,263.16,263.25,263.34,263.43,263.52,263.61,263.7,263.79,263.88,263.97,264.06,264.15,264.24,264.33,264.42,264.51,264.6,264.69,264.78,264.87,264.96,265.05,265.14,265.23,265.32,265.41,265.5,265.5818,265.6636,265.7455,265.8273,265.9091,265.9909,266.0727,266.1545,266.2364,266.3182,266.4,266.5,266.6,266.7,266.8,266.9,267.0,267.1,267.2,267.3,267.3818,267.4636,267.5455,267.6273,267.7091,267.7909,267.8727,267.9545,268.0364,268.1182,268.2,268.29,268.38,268.47,268.56,268.65,268.74,268.83,268.92,269.01,269.1,269.19,269.28,269.37,269.46,269.55,269.64,269.73,269.82,269.91,270.0,270.09,270.18,270.27,270.36,270.45,270.54,270.63,270.72,270.81,270.9,270.9818,271.0636,271.1455,271.2273,271.3091,271.3909,271.4727,271.5545,271.6364,271.7182,271.8,271.8818,271.9636,272.0455,272.1273,272.2091,272.2909,272.3727,272.4545,272.5364,272.6182,272.7,272.79,272.88,272.97,273.06,273.15,273.24,273.33,273.42,273.51,273.6,273.7,273.8,273.9,274.0,274.1,274.2,274.3,274.4,274.5,274.5818,274.6636,274.7455,274.8273,274.9091,274.9909,275.0727,275.1545,275.2364,275.3182,275.4,275.4818,275.5636,275.6455,275.7273,275.8091,275.8909,275.9727,276.0545,276.1364,276.2182,276.3,276.39,276.48,276.57,276.66,276.75,276.84,276.93,277.02,277.11,277.2,277.3,277.4,277.5,277.6,277.7,277.8,277.9,278.0,278.1,278.1818,278.2636,278.3455,278.4273,278.5091,278.5909,278.6727,278.7545,278.8364,278.9182,279.0,279.0818,279.1636,279.2455,279.3273,279.4091,279.4909,279.5727,279.6545,279.7364,279.8182,279.9,280.0,280.1,280.2,280.3,280.4,280.5,280.6,280.7,280.8,280.89,280.98,281.07,281.16,281.25,281.34,281.43,281.52,281.61,281.7,281.79,281.88,281.97,282.06,282.15,282.24,282.33,282.42,282.51,282.6,282.675,282.75,282.825,282.9,282.975,283.05,283.125,283.2,283.275,283.35,283.425,283.5,283.6,283.7,283.8,283.9,284.0,284.1,284.2,284.3,284.4,284.5,284.6,284.7,284.8,284.9,285.0,285.1,285.2,285.3,285.3818,285.4636,285.5455,285.6273,285.7091,285.7909,285.8727,285.9545,286.0364,286.1182,286.2,286.275,286.35,286.425,286.5,286.575,286.65,286.725,286.8,286.875,286.95,287.025,287.1,287.19,287.28,287.37,287.46,287.55,287.64,287.73,287.82,287.91,288.0,288.1,288.2,288.3,288.4,288.5,288.6,288.7,288.8,288.9,288.9818,289.0636,289.1455,289.2273,289.3091,289.3909,289.4727,289.5545,289.6364,289.7182,289.8,289.8818,289.9636,290.0455,290.1273,290.2091,290.2909,290.3727,290.4545,290.5364,290.6182,290.7,290.79,290.88,290.97,291.06,291.15,291.24,291.33,291.42,291.51,291.6,291.7,291.8,291.9,292.0,292.1,292.2,292.3,292.4,292.5,292.5818,292.6636,292.7455,292.8273,292.9091,292.9909,293.0727,293.1545,293.2364,293.3182,293.4,293.49,293.58,293.67,293.76,293.85,293.94,294.03,294.12,294.21,294.3,294.3818,294.4636,294.5455,294.6273,294.7091,294.7909,294.8727,294.9545,295.0364,295.1182,295.2,295.29,295.38,295.47,295.56,295.65,295.74,295.83,295.92,296.01,296.1,296.19,296.28,296.37,296.46,296.55,296.64,296.73,296.82,296.91,297.0,297.09,297.18,297.27,297.36,297.45,297.54,297.63,297.72,297.81,297.9,297.9818,298.0636,298.1455,298.2273,298.3091,298.3909,298.4727,298.5545,298.6364,298.7182,298.8,298.89,298.98,299.07,299.16,299.25,299.34,299.43,299.52,299.61,299.7,299.7818,299.8636,299.9455,300.0273,300.1091,300.1909,300.2727,300.3545,300.4364,300.5182,300.6,300.7,300.8,300.9,301.0,301.1,301.2,301.3,301.4,301.5,301.5818,301.6636,301.7455,301.8273,301.9091,301.9909,302.0727,302.1545,302.2364,302.3182,302.4,302.4818,302.5636,302.6455,302.7273,302.8091,302.8909,302.9727,303.0545,303.1364,303.2182,303.3,303.39,303.48,303.57,303.66,303.75,303.84,303.93,304.02,304.11,304.2,304.29,304.38,304.47,304.56,304.65,304.74,304.83,304.92,305.01,305.1,305.19,305.28,305.37,305.46,305.55,305.64,305.73,305.82,305.91,306.0,306.0818,306.1636,306.2455,306.3273,306.4091,306.4909,306.5727,306.6545,306.7364,306.8182,306.9,306.99,307.08,307.17,307.26,307.35,307.44,307.53,307.62,307.71,307.8,307.89,307.98,308.07,308.16,308.25,308.34,308.43,308.52,308.61,308.7,308.7818,308.8636,308.9455,309.0273,309.1091,309.1909,309.2727,309.3545,309.4364,309.5182,309.6,309.7,309.8,309.9,310.0,310.1,310.2,310.3,310.4,310.5,310.5818,310.6636,310.7455,310.8273,310.9091,310.9909,311.0727,311.1545,311.2364,311.3182,311.4,311.49,311.58,311.67,311.76,311.85,311.94,312.03,312.12,312.21,312.3,312.3818,312.4636,312.5455,312.6273,312.7091,312.7909,312.8727,312.9545,313.0364,313.1182,313.2,313.3,313.4,313.5,313.6,313.7,313.8,313.9,314.0,314.1,314.1818,314.2636,314.3455,314.4273,314.5091,314.5909,314.6727,314.7545,314.8364,314.9182,315.0,315.0818,315.1636,315.2455,315.3273,315.4091,315.4909,315.5727,315.6545,315.7364,315.8182,315.9,315.9818,316.0636,316.1455,316.2273,316.3091,316.3909,316.4727,316.5545,316.6364,316.7182,316.8,316.9125,317.025,317.1375,317.25,317.3625,317.475,317.5875,317.7,317.7818,317.8636,317.9455,318.0273,318.1091,318.1909,318.2727,318.3545,318.4364,318.5182,318.6,318.6818,318.7636,318.8455,318.9273,319.0091,319.0909,319.1727,319.2545,319.3364,319.4182,319.5,319.5818,319.6636,319.7455,319.8273,319.9091,319.9909,320.0727,320.1545,320.2364,320.3182,320.4,320.5,320.6,320.7,320.8,320.9,321.0,321.1,321.2,321.3,321.39,321.48,321.57,321.66,321.75,321.84,321.93,322.02,322.11,322.2,322.2818,322.3636,322.4455,322.5273,322.6091,322.6909,322.7727,322.8545,322.9364,323.0182,323.1,323.175,323.25,323.325,323.4,323.475,323.55,323.625,323.7,323.775,323.85,323.925,324.0,324.1125,324.225,324.3375,324.45,324.5625,324.675,324.7875,324.9,324.99,325.08,325.17,325.26,325.35,325.44,325.53,325.62,325.71,325.8,325.8818,325.9636,326.0455,326.1273,326.2091,326.2909,326.3727,326.4545,326.5364,326.6182,326.7,326.7818,326.8636,326.9455,327.0273,327.1091,327.1909,327.2727,327.3545,327.4364,327.5182,327.6,327.69,327.78,327.87,327.96,328.05,328.14,328.23,328.32,328.41,328.5,328.6,328.7,328.8,328.9,329.0,329.1,329.2,329.3,329.4,329.4818,329.5636,329.6455,329.7273,329.8091,329.8909,329.9727,330.0545,330.1364,330.2182,330.3,330.3818,330.4636,330.5455,330.6273,330.7091,330.7909,330.8727,330.9545,331.0364,331.1182,331.2,331.3,331.4,331.5,331.6,331.7,331.8,331.9,332.0,332.1,332.1818,332.2636,332.3455,332.4273,332.5091,332.5909,332.6727,332.7545,332.8364,332.9182,333.0,333.09,333.18,333.27,333.36,333.45,333.54,333.63,333.72,333.81,333.9,333.975,334.05,334.125,334.2,334.275,334.35,334.425,334.5,334.575,334.65,334.725,334.8,334.9125,335.025,335.1375,335.25,335.3625,335.475,335.5875,335.7,335.79,335.88,335.97,336.06,336.15,336.24,336.33,336.42,336.51,336.6,336.6818,336.7636,336.8455,336.9273,337.0091,337.0909,337.1727,337.2545,337.3364,337.4182,337.5,337.5818,337.6636,337.7455,337.8273,337.9091,337.9909,338.0727,338.1545,338.2364,338.3182,338.4,338.49,338.58,338.67,338.76,338.85,338.94,339.03,339.12,339.21,339.3,339.39,339.48,339.57,339.66,339.75,339.84,339.93,340.02,340.11,340.2,340.2818,340.3636,340.4455,340.5273,340.6091,340.6909,340.7727,340.8545,340.9364,341.0182,341.1,341.19,341.28,341.37,341.46,341.55,341.64,341.73,341.82,341.91,342.0,342.09,342.18,342.27,342.36,342.45,342.54,342.63,342.72,342.81,342.9,342.99,343.08,343.17,343.26,343.35,343.44,343.53,343.62,343.71,343.8,343.8818,343.9636,344.0455,344.1273,344.2091,344.2909,344.3727,344.4545,344.5364,344.6182,344.7,344.79,344.88,344.97,345.06,345.15,345.24,345.33,345.42,345.51,345.6,345.7,345.8,345.9,346.0,346.1,346.2,346.3,346.4,346.5,346.5818,346.6636,346.7455,346.8273,346.9091,346.9909,347.0727,347.1545,347.2364,347.3182,347.4,347.4818,347.5636,347.6455,347.7273,347.8091,347.8909,347.9727,348.0545,348.1364,348.2182,348.3,348.39,348.48,348.57,348.66,348.75,348.84,348.93,349.02,349.11,349.2,349.3,349.4,349.5,349.6,349.7,349.8,349.9,350.0,350.1,350.175,350.25,350.325,350.4,350.475,350.55,350.625,350.7,350.775,350.85,350.925,351.0,351.09,351.18,351.27,351.36,351.45,351.54,351.63,351.72,351.81,351.9,351.99,352.08,352.17,352.26,352.35,352.44,352.53,352.62,352.71,352.8,352.9,353.0,353.1,353.2,353.3,353.4,353.5,353.6,353.7,353.7818,353.8636,353.9455,354.0273,354.1091,354.1909,354.2727,354.3545,354.4364,354.5182,354.6,354.6818,354.7636,354.8455,354.9273,355.0091,355.0909,355.1727,355.2545,355.3364,355.4182,355.5,355.59,355.68,355.77,355.86,355.95,356.04,356.13,356.22,356.31,356.4,356.49,356.58,356.67,356.76,356.85,356.94,357.03,357.12,357.21,357.3,357.3818,357.4636,357.5455,357.6273,357.7091,357.7909,357.8727,357.9545,358.0364,358.1182,358.2,358.29,358.38,358.47,358.56,358.65,358.74,358.83,358.92,359.01,
  
 };



void setup() {
  Serial.begin(115200);
  
  pinMode(VREF1, OUTPUT);
  pinMode(VREF2, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(pulse, OUTPUT);
  
  
  analogWrite(VREF1, 217);  
  analogWrite(VREF2, 217);  

  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
 
  pinMode(ledPin, OUTPUT); // visual signal of I/O to chip
  pinMode(clockPin, OUTPUT); // SCK
  pinMode(CSnPin, OUTPUT); // CSn -- has to toggle high and low to signal chip to start data transfer
  pinMode(inputPin, INPUT); // SDA


  Serial.print("DDRB , ");
  Serial.println(DDRB,BIN);
  Serial.print("DDRD , ");
  Serial.println(DDRD,BIN);
  
}







void loop()
{
  while (Serial.available()) {

    char inChar = (char)Serial.read();
    
    if (inChar == 'p') {
      print_angle();
      delay(50);
    }
    
    else if (inChar == 's') {
      one_step();  
      print_angle();
    }
    
    else if (inChar == 'd') {
       if (dir == 1){
         dir = 0;
       }
       else {
         dir = 1;
       }
    }
    
    else if (inChar == 'c') {
       i_step = 0;
       i_w = 0;
    }
    
    else if (inChar == 'z') {
      a = readEncoder();
      anglefloat = a * 0.08789;
      while (anglefloat >= aps){//0.9)
        one_step();
        a = readEncoder();
        anglefloat = a * 0.08789;
        Serial.println(anglefloat,DEC);
      delay(50);        
      }
      delay(100);
      offset = readEncoder();
      zero_state = step_state;
      Serial.println(zero_state,DEC);
     }
     else if (inChar == 'g') {
       for(int x = 0; x < spr; x++){
        one_step();
        a = readEncoder();
        anglefloat = a * 0.08789;
        //Serial.print(i_step,DEC);
        //Serial.print(" , ");
        //Serial.print(i_step*0.9,DEC);
        //Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        Serial.println(anglefloat, DEC);
       }
     } 
     
     else if (inChar == 'w') {
       for(int x = 0; x < spr; x++){
        a = readEncoder();
        
        i_w = 2*x;
        EEPROM.put(i_w,a);
        one_step();
        anglefloat = a * 0.08789;
        //Serial.print(i_step,DEC);
        //Serial.print(" , ");
        //Serial.print(i_step*0.9,DEC);
        //Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        Serial.println(anglefloat, DEC);
       delay(100);
       }
     }    
      else if (inChar == 'r') {
       for(int x = 0; x < spr; x++){
        i_r = 2*x;
       
        EEPROM.get(i_r,a);
        
        //anglefloat = a * 0.08789;
        //Serial.print(i_step,DEC);
        //Serial.print(" , ");
        //Serial.print(i_step*0.9,DEC);
        //Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        //Serial.println(anglefloat, DEC);
        Serial.println(a, DEC);
       }
     }
     
     
  else if (inChar == 'a')  {
     Serial.println("Enter angle:");      //Prompt User for input
     while (Serial.available()==0)  {     //Wait for new angle
    }   
     update_angle();
    }
  else if (inChar == 'l') {
     Serial.println("Enter encoder count:");      //Prompt User for input
     while (Serial.available()==0)  {     //Wait for new angle
    }   
     a=Serial.parseFloat();
     angle_out= lookup_angle(a);
     Serial.println(angle_out,DEC);
    }
  else if (inChar == 'f') {
  follow();
  }
  
  
  else if (inChar == 'x')  {
     Serial.println("Enter angle:");      //Prompt User for input
     while (Serial.available()==0)  {     //Wait for new angle
    }   
     setpoint();
    }
  
  }
    
       
     
     
}





float lookup_angle(int n)
{
   float a_out; 
   a_out = pgm_read_float_near(lookup+n);
  //Serial.println(angle_out,DEC);
    return a_out;
}



//_____________________________________________________________________________


void follow()
{
  while (1) {
       a = readEncoder();
       current_angle= lookup_angle(a);
      
       digitalWrite(pulse, !digitalRead(pulse));
      
      val1 = 100*sin( ((spr/4.0)*(current_angle*pi)/180) + .45+((pi/4)*(3+ 2*zero_state)));
      analogWrite(VREF1, abs(val1));
      
      if (val1 >= 0)  {
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2,LOW);
      }
      else  {
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
      }
      val2 = 100*sin( ((spr/4.0)*(current_angle*pi)/180) + .45+(((pi/4)*(1+ 2*zero_state))));
      analogWrite(VREF2, abs(val2));  
      
      if (val2 >= 0)  {
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4,LOW);
      }
      else  {
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
      }
      
      
      //delay(1);
      Serial.print(current_angle);
      Serial.print(" , ");
      Serial.print(val1,DEC);
      Serial.print(" , ");
      Serial.println(val2,DEC);
    }

}












//________________________________________________________________________




void update_angle()
{
  int start =0;
  int finish = 0;
  static int U = 0;
  new_angle=Serial.parseFloat();     
  diff_angle =(new_angle-current_angle);

    
  if (abs(diff_angle) > 0.05)  {
    while (1) {//(abs(diff_angle) >= 0.05)  
      
      a = readEncoder();
      current_angle = lookup_angle(a);
      
      //Serial.print(current_angle,DEC);
     // Serial.print(" , ");
      
      if (diff_angle>0){
        current_angle +=0.7;
      }
      else{
        current_angle -=0.7;
      }
              
      //Serial.print(current_angle,DEC);
      //Serial.print(" , ");
      //Serial.println(lookup_angle(a),DEC);
      
      
        U =abs(kp*diff_angle);                  //control effort
        if (U>200){                             //saturation limits max current command
          U = 200;
        }
      
      
       //digitalWrite(pulse, !digitalRead(pulse));
             PORTB ^= (B00010000);     //PULSE 
       
       output(current_angle,U);
           if (Serial.available() > 0) {
       new_angle=Serial.parseFloat();
    }

      diff_angle =(new_angle-current_angle);  
    }

  }

  a = readEncoder();
  Serial.println(a);

}


//-----------------------------------------------------------------------

void setpoint()
{ 
  
  static float ei =0.0; 
  int start =0;
  int finish = 0;
  static int U = 0;
  new_angle=Serial.parseFloat();     
  diff_angle =(new_angle-current_angle);

    
  if (abs(diff_angle) > 0.05)  {
    while (1) {//(abs(diff_angle) >= 0.05)  
      
      a = readEncoder();
      current_angle = lookup_angle(a);
      
      //Serial.print(current_angle,DEC);
     // Serial.print(" , ");
      
      if (diff_angle>0){
        current_angle +=0.7;
      }
      else{
        current_angle -=0.7;
      }
              
      //Serial.print(current_angle,DEC);
      //Serial.print(" , ");
      //Serial.println(lookup_angle(a),DEC);
        ei = 0.95*(ei+diff_angle);
      ep=(kp*diff_angle);
      U =abs(ep+ki*ei);
        if (U>200){                             //saturation limits max current command
          U = 200;
        }
      
      
       //digitalWrite(pulse, !digitalRead(pulse));
             PORTB ^= (B00010000);     //PULSE 
       
       output(current_angle,U);
           if (Serial.available() > 0) {
       new_angle=Serial.parseFloat();
    }

      diff_angle =(new_angle-current_angle);  
    }

  }

  a = readEncoder();
  Serial.println(a);

}


//
//void setpoint()
//{
//  static float ei =0.0;    
//  static int U = 0;
//  int start =0;
//  int finish = 0;
//
//  
//  static float FA = 0.15;
//  while(1){
//    
//    if (Serial.available() > 0) {
//       new_angle=Serial.parseFloat();
//    }
//    
//   start = micros();
//    a = readEncoder();
//finish = micros();
//    
//    
//       current_angle= lookup_angle(a);
//       ei = 0.95*(ei+diff_angle);
//  diff_angle = -(new_angle-current_angle);
//  Serial.println(current_angle,DEC);
// /*Serial.print(current_angle,DEC);
//  Serial.print("  |  ") ;
//  Serial.print(ei,DEC);
//  Serial.print("  |  ") ;
//  Serial.print(FA,DEC);
//  Serial.print("  |  ") ;  
//  Serial.println(diff_angle,DEC);
//  //delay(100);
//*/ 
//  ep=(kp*diff_angle);
//  U =abs(ep+ki*ei);
//  if (U>256){
//    U = 256;
//  }
// // else if (U<25){
// //   U = 25;
// // }
//  
//  //FA = abs(diff_angle*KF);
//  //if (FA>=0.1){
//   FA=0.3 ;
//  //}
// // Serial.println(current_angle);
//  
//  //digitalWrite(pulse, !digitalRead(pulse));
//  
// 
// // Serial.println(ep,DEC);
//  if (diff_angle > 0.05)  {
//    //while (diff_angle >= 0.05)  
//      current_angle -= FA;//0.15;
//      
//       //digitalWrite(pulse, !digitalRead(pulse));
//      PORTB ^= (B00010000); 
//      
//      ;
//      val1 = U*sin( ((spr/4.0)*(current_angle*pi)/180)+((pi/4)*(3+ 2*zero_state)));
//      //val1 = ep*sin( 1.74533*current_angle + 6.8562);
//      
//     
//      analogWrite(VREF1, abs(val1));
//
//      if (val1 >= 0)  {
//        //digitalWrite(IN1, HIGH);
//        PORTB |= (B00000001);
//        //digitalWrite(IN2,LOW);
//        PORTB &= ~(B00000010);
//      }
//      else  {
//        //digitalWrite(IN1, LOW);
//        PORTB &= ~(B00000001);
//        //digitalWrite(IN2, HIGH);
//        PORTB |= (B00000010);
//      }
//      val2 = U*sin( ((spr/4.0)*(current_angle*pi)/180) +((pi/4)*(1+ 2*zero_state)));
//     //val2 = ep*sin( 1.74533*current_angle + 5.2854);
//      analogWrite(VREF2, abs(val2));  
//      
//      if (val2 >= 0)  {
//        //digitalWrite(IN3, HIGH);
//        PORTB |= (B00000100);
//        //digitalWrite(IN4,LOW);
//        PORTB &= ~(B00001000);
//        
//      }
//      else  {
//        //digitalWrite(IN3, LOW);
//        PORTB &= ~(B00000100);
//        //digitalWrite(IN4, HIGH);
//        PORTB |= (B00001000);
//        
//      }
//      
//      
//      //delay(1);
//    //  Serial.print(current_angle);
//    //  Serial.print(" , ");
//    //  Serial.print(val1,DEC);
//    //  Serial.print(" , ");
//    //  Serial.println(val2,DEC);
//      //diff_angle =(new_angle-current_angle);  
//    
//
//  }
//  else if (diff_angle < -0.05)  {
//    //while (diff_angle <= 0.05)  
//      current_angle += FA;//.15;
//      
//       //digitalWrite(pulse, !digitalRead(pulse));
//      PORTB ^= (B00010000); 
//      
//      
//      val1 = U*sin( ((spr/4.0)*(current_angle*pi)/180) +((pi/4)*(3+ 2*zero_state)));
//      //val1 = ep*sin( 1.74533*current_angle + 6.8562);
//      analogWrite(VREF1, abs(val1));
//      
//      if (val1 >= 0)  {
//        //digitalWrite(IN1, HIGH);
//        PORTB |= (B00000001);
//        //digitalWrite(IN2,LOW);
//        PORTB &= ~(B00000010);
//      }
//      else  {
//        //digitalWrite(IN1, LOW);
//        PORTB &= ~(B00000001);
//        //digitalWrite(IN2, HIGH);
//        PORTB |= (B00000010);
//      }
//      val2 = U*sin( ((spr/4.0)*(current_angle*pi)/180) +((pi/4)*(1+ 2*zero_state)));
//      //val2 = ep*sin( 1.74533*current_angle + 5.2854);
//      analogWrite(VREF2, abs(val2));  
//      
//      if (val2 >= 0)  {
//        //digitalWrite(IN3, HIGH);
//        PORTB |= (B00000100);
//        //digitalWrite(IN4,LOW);
//        PORTB &= ~(B00001000);
//        
//      }
//      else  {
//        //digitalWrite(IN3, LOW);
//        PORTB &= ~(B00000100);
//        //digitalWrite(IN4, HIGH);
//        PORTB |= (B00001000);
//        
//      }
//      
//      
//      //delay(1);
//    //  Serial.print(current_angle);
//    //  Serial.print(" , ");
//    //  Serial.print(val1,DEC);
//    //  Serial.print(" , ");
//    //  Serial.println(val2,DEC);
//      //diff_angle =(new_angle-current_angle);  
//    
//
//  
//  }
//  else{
//  analogWrite(VREF1, 0); 
//  analogWrite(VREF2, 0);  
//  
//  }
// // Serial.println(finish-start,DEC);
//
//}
//
//}






void one_step(){

  if (dir == 0) {
        i_step += 1;     
  }
   else{
        i_step -= 1;      
  }
  step_state = ((((i_step+zero_state) % 4)+4)%4);   // arduino mod does not wrap for negative....

  
  
  Serial.println(dir,DEC);
  Serial.println(step_state,DEC);

  
      
  analogWrite(VREF1, 64);  
  analogWrite(VREF2, 64);  
    if (step_state == 0){
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4, LOW);
    }
    else if (step_state == 1){

        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4, LOW);
    }
    else if (step_state == 2){
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
    }
     else if (step_state == 3){
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
        
     }
      delay(10);
}


void print_angle()
{
        a = readEncoder();
        anglefloat = a * 0.08789;
        Serial.print(i_step,DEC);
        Serial.print(" , ");
        Serial.print(i_step*aps,DEC);
        Serial.print(" , ");
        Serial.print(a,DEC);
        Serial.print(" , ");
        //Serial.println(a-offset, DEC);
        Serial.println(anglefloat, DEC);
}


void output(float theta,int effort){
  
  
       val1 = effort*sin( ((spr/4.0)*(theta*pi)/180) + ((pi/4)*(3+ 2*zero_state)));
      analogWrite(VREF1, abs(val1));
      
      if (val1 >= 0)  {
        //digitalWrite(IN1, HIGH);
        PORTB |= (B00000001);
        //digitalWrite(IN2,LOW);
        PORTB &= ~(B00000010);
      }
      else  {
        //digitalWrite(IN1, LOW);
        PORTB &= ~(B00000001);
        //digitalWrite(IN2, HIGH);
        PORTB |= (B00000010);
      }
      
      
      val2 = effort*sin( ((spr/4.0)*(theta*pi)/180) + ((pi/4)*(1+ 2*zero_state)));
      analogWrite(VREF2, abs(val2));  
      
            if (val2 >= 0)  {
        //digitalWrite(IN3, HIGH);
        PORTB |= (B00000100);
        //digitalWrite(IN4,LOW);
        PORTB &= ~(B00001000);
        
      }
      else  {
        //digitalWrite(IN3, LOW);
        PORTB &= ~(B00000100);
        //digitalWrite(IN4, HIGH);
        PORTB |= (B00001000);
        
      } 
  
  
  
  
  
}
int readEncoder()
{
// CSn needs to cycle from high to low to initiate transfer. Then clock cycles. As it goes high
// again, data will appear on sda
  digitalWrite(CSnPin, HIGH); // CSn high
  digitalWrite(clockPin, HIGH); // CLK high
  //delay(longdelay);// time between readings
  delayMicroseconds(10);
  digitalWrite(ledPin, HIGH); // signal start of transfer with LED
  digitalWrite(CSnPin, LOW); // CSn low: start of transfer
  delayMicroseconds(shortdelay); // delay for chip initialization
  digitalWrite(clockPin, LOW); // CLK goes low: start clocking
  delayMicroseconds(shortdelay); // hold low
 // for (int x=0; x <16; x++) // clock signal, 16 transitions, output to clock pin
 for (int x=0; x <18; x++) // clock signal, 16 transitions, output to clock pin
  {
    digitalWrite(clockPin, HIGH); //clock goes high
    delayMicroseconds(shortdelay); //
    inputstream =digitalRead(inputPin); // read one bit of data from pin
//Serial.print(inputstream, DEC);
    packeddata = ((packeddata << 1) + inputstream);// left-shift summing variable, add pin value
    digitalWrite(clockPin, LOW);
    delayMicroseconds(shortdelay); // end of one clock cycle
  }
// end of entire clock cycle
//Serial.println(" ");
  digitalWrite(ledPin, LOW); // signal end of transmission
// lots of diagnostics for verifying bitwise operations
//Serial.print("packed:");
//Serial.println(packeddata,DEC);
//Serial.print("pack bin: ");
//Serial.println(packeddata,BIN);
  angle = packeddata & anglemask; // mask rightmost 6 digits of packeddata to zero, into angle.
//Serial.print("mask: ");
//Serial.println(anglemask, BIN);
//Serial.print("bin angle:");
//Serial.println(angle, BIN);
//Serial.print("angle: ");
//Serial.println(angle, DEC);
  angle = (angle >> 6); // shift 16-digit angle right 6 digits to form 10-digit value
//Serial.print("angleshft:");
//Serial.println(angle, BIN);
//Serial.print("angledec: ");
//Serial.println(angle, DEC);
//angle = angle * 0.3515; // angle * (360/1024) == actual degrees
  //anglefloat = angle * 0.08789; // angle * (360/4096) == actual degrees
  angletemp = angle;
  //Serial.print("angle: "); // and, finally, print it.
  
//  Serial.print(i_step,DEC);
//  Serial.print(" , ");
//  Serial.print(i_step*0.9,DEC);
//  Serial.print(" , ");
//  Serial.println(anglefloat-offset, DEC);
  
  
  
//Serial.println("--------------------");
//Serial.print("raw: "); // this was the prefix for the bit-by-bit diag output inside the loop.
  if (debug)
  {
    statusbits = packeddata & statusmask;
    DECn = statusbits & 2; // goes high if magnet moved away from IC
    INCn = statusbits & 4; // goes high if magnet moved towards IC
    LIN = statusbits & 8; // goes high for linearity alarm
    COF = statusbits & 16; // goes high for cordic overflow: data invalid
    OCF = statusbits & 32; // this is 1 when the chip startup is finished.
    if (DECn && INCn) { Serial.println("magnet moved out of range"); }
    else
    {
      if (DECn) { Serial.println("magnet moved away from chip"); }
      if (INCn) { Serial.println("magnet moved towards chip"); }
    }
    if (LIN) { Serial.println("linearity alarm: magnet misaligned? Data questionable."); }
    if (COF) { Serial.println("cordic overflow: magnet misaligned? Data invalid."); }
  }

  packeddata = 0; // reset both variables to zero so they don't just accumulate
  angle = 0;
  
//  return anglefloat;
return angletemp;
}

